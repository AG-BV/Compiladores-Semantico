// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: A_Lexico.jflex

/* JFlex example: partial Java language lexer specification */
package Analizadores;
import java.util.ArrayList;
import java_cup.runtime.*;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int Chars = 4;
  public static final int hexaState = 6;
  public static final int hexaStateC = 8;
  public static final int hexaStateError = 10;
  public static final int hexaStateCError = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\u10df\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\0\6\41"+
    "\24\42\1\43\1\0\1\44\1\45\1\46\1\0\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\42\1\60\1\61\1\62\1\63\1\64\1\65\1\42"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\62\0\1\103\21\0"+
    "\1\104\u0154\0\1\103\347\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\21\27\1\33\1\6\1\34\1\6"+
    "\1\1\1\35\2\36\1\37\1\40\2\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\35\1\47\1\35\1\50\1\51"+
    "\1\52\2\53\1\54\2\1\1\55\4\0\1\56\1\0"+
    "\1\57\1\6\1\60\1\56\1\61\1\62\1\20\1\0"+
    "\1\2\1\63\2\64\1\65\1\66\1\67\3\56\2\0"+
    "\1\1\1\27\1\70\10\27\1\71\11\27\1\72\26\27"+
    "\1\73\1\1\2\0\1\20\6\0\1\56\1\0\4\2"+
    "\1\56\1\2\2\0\2\64\2\56\15\27\1\74\2\27"+
    "\1\70\2\27\1\75\24\27\1\76\1\27\3\0\1\2"+
    "\3\56\3\0\2\56\3\2\1\0\1\20\4\64\2\27"+
    "\1\77\1\27\1\100\1\101\3\27\1\102\1\103\3\27"+
    "\1\104\1\105\5\27\1\106\12\27\1\101\4\27\1\107"+
    "\1\27\1\110\1\27\1\111\1\27\1\0\1\2\2\56"+
    "\1\0\1\20\2\64\2\27\1\112\7\27\1\113\4\27"+
    "\1\114\1\27\1\115\1\116\23\27\1\117\1\120\1\0"+
    "\1\64\2\0\1\64\2\27\1\121\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\1\131\6\27\1\132\1\133"+
    "\4\27\1\134\1\27\1\135\1\136\1\27\1\137\1\140"+
    "\1\27\1\141\1\27\1\142\1\27\1\143\1\144\2\0"+
    "\1\64\1\145\1\146\1\147\1\150\1\151\1\152\1\153"+
    "\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163"+
    "\1\164\1\165\1\166\1\167\1\170\1\171\1\172\1\173"+
    "\1\174\6\27\1\175\1\176\1\177\2\27\1\200\1\201"+
    "\2\0\1\27\1\202\1\203\1\27\1\204\1\205\1\206"+
    "\4\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[424];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u01e3\0\u02f7\0\u033c\0\u01e3\0\u0228"+
    "\0\u0228\0\u0381\0\u03c6\0\u0228\0\u040b\0\u0450\0\u0495\0\u04da"+
    "\0\u0228\0\u0228\0\u051f\0\u0564\0\u05a9\0\u0228\0\u05ee\0\u0228"+
    "\0\u0228\0\u02f7\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c"+
    "\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4"+
    "\0\u09f9\0\u0a3e\0\u0a83\0\u0228\0\u0ac8\0\u0228\0\u02f7\0\u0b0d"+
    "\0\u0b52\0\u0228\0\u0b97\0\u0228\0\u0228\0\u0228\0\u0bdc\0\u0228"+
    "\0\u0228\0\u0228\0\u0228\0\u0228\0\u0c21\0\u0228\0\u0c66\0\u0228"+
    "\0\u0228\0\u0228\0\u0228\0\u0cab\0\u0228\0\u0cf0\0\u0d35\0\u0228"+
    "\0\u02f7\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u02f7\0\u0ed3"+
    "\0\u0228\0\u0f18\0\u0228\0\u0228\0\u0f5d\0\u0fa2\0\u0fe7\0\u02f7"+
    "\0\u102c\0\u1071\0\u0228\0\u0228\0\u0228\0\u10b6\0\u10fb\0\u1140"+
    "\0\u1185\0\u11ca\0\u120f\0\u1254\0\u05ee\0\u1299\0\u12de\0\u1323"+
    "\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u05ee\0\u14c1\0\u1506"+
    "\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u05ee"+
    "\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911"+
    "\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39"+
    "\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u0228\0\u0ed3"+
    "\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff"+
    "\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127"+
    "\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u230a\0\u234f"+
    "\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577"+
    "\0\u25bc\0\u2601\0\u2646\0\u268b\0\u05ee\0\u26d0\0\u2715\0\u275a"+
    "\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982"+
    "\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa"+
    "\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u05ee"+
    "\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u1eba\0\u2ee6\0\u2f2b\0\u2f70"+
    "\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e\0\u3153\0\u3198"+
    "\0\u31dd\0\u3222\0\u21f6\0\u3267\0\u32ac\0\u32f1\0\u3336\0\u337b"+
    "\0\u05ee\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519\0\u05ee"+
    "\0\u05ee\0\u355e\0\u35a3\0\u35e8\0\u01e3\0\u01e3\0\u362d\0\u3672"+
    "\0\u36b7\0\u36fc\0\u3741\0\u05ee\0\u3786\0\u37cb\0\u3810\0\u3855"+
    "\0\u389a\0\u38df\0\u3924\0\u3969\0\u39ae\0\u39f3\0\u05ee\0\u3a38"+
    "\0\u3a7d\0\u3ac2\0\u3b07\0\u05ee\0\u3b4c\0\u05ee\0\u3b91\0\u3bd6"+
    "\0\u3c1b\0\u3c60\0\u0d7a\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9"+
    "\0\u3dfe\0\u3e43\0\u3e88\0\u05ee\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c"+
    "\0\u3fe1\0\u4026\0\u406b\0\u05ee\0\u40b0\0\u40f5\0\u413a\0\u417f"+
    "\0\u05ee\0\u41c4\0\u05ee\0\u05ee\0\u4209\0\u424e\0\u4293\0\u42d8"+
    "\0\u431d\0\u4362\0\u43a7\0\u43ec\0\u4431\0\u4476\0\u44bb\0\u4500"+
    "\0\u4545\0\u458a\0\u45cf\0\u4614\0\u4659\0\u469e\0\u46e3\0\u05ee"+
    "\0\u05ee\0\u4728\0\u476d\0\u47b2\0\u47f7\0\u483c\0\u4881\0\u48c6"+
    "\0\u490b\0\u4950\0\u4995\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u05ee"+
    "\0\u05ee\0\u49da\0\u4a1f\0\u4a64\0\u4aa9\0\u4aee\0\u4b33\0\u05ee"+
    "\0\u05ee\0\u4b78\0\u4bbd\0\u4c02\0\u4c47\0\u05ee\0\u4c8c\0\u05ee"+
    "\0\u4cd1\0\u4d16\0\u05ee\0\u05ee\0\u4d5b\0\u05ee\0\u4da0\0\u05ee"+
    "\0\u4de5\0\u05ee\0\u05ee\0\u4e2a\0\u4e6f\0\u4eb4\0\u05ee\0\u05ee"+
    "\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u05ee"+
    "\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u05ee"+
    "\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u05ee\0\u4ef9\0\u4f3e"+
    "\0\u4f83\0\u4fc8\0\u500d\0\u5052\0\u05ee\0\u05ee\0\u05ee\0\u5097"+
    "\0\u50dc\0\u05ee\0\u05ee\0\u5121\0\u5166\0\u51ab\0\u05ee\0\u05ee"+
    "\0\u51f0\0\u05ee\0\u05ee\0\u05ee\0\u5235\0\u527a\0\u52bf\0\u5304";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[424];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\2\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\12\30\1\31\1\32\1\33\1\34\1\35\1\36\2\37"+
    "\1\40\1\41\1\42\1\37\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\37\1\51\1\52\2\37\1\53\2\37"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\37"+
    "\1\63\1\37\1\64\1\65\1\66\1\67\1\10\1\70"+
    "\2\71\1\72\1\73\1\71\1\74\2\71\1\75\76\71"+
    "\1\76\1\77\1\71\1\100\2\71\1\101\74\71\5\102"+
    "\1\103\2\102\1\104\10\102\12\105\1\102\1\106\4\102"+
    "\1\107\43\102\5\110\1\111\2\110\1\103\10\110\12\105"+
    "\1\110\1\106\4\110\1\107\43\110\1\112\2\113\1\114"+
    "\1\112\1\115\26\112\1\115\60\112\1\115\23\112\1\115"+
    "\50\112\1\10\4\0\1\10\2\0\1\10\2\0\1\10"+
    "\25\0\2\116\3\0\1\117\30\116\4\0\2\10\107\0"+
    "\1\11\140\0\1\120\54\0\2\121\3\0\1\121\4\0"+
    "\1\122\14\0\1\123\1\0\1\124\1\0\2\125\2\0"+
    "\1\121\31\125\3\0\1\121\1\0\1\126\6\0\1\121"+
    "\1\127\3\0\1\121\4\0\1\122\14\0\1\123\1\0"+
    "\1\124\1\0\2\125\2\0\1\121\31\125\3\0\1\121"+
    "\1\0\1\126\1\10\4\0\1\10\2\121\1\10\2\0"+
    "\1\130\4\0\1\122\14\0\1\123\1\131\1\124\1\0"+
    "\2\125\2\0\1\121\1\132\30\125\3\0\1\121\1\10"+
    "\1\70\36\0\1\133\104\0\1\134\67\0\12\135\60\0"+
    "\2\121\3\0\1\136\4\0\1\137\14\0\1\123\1\140"+
    "\1\124\1\0\2\125\2\0\1\121\31\125\3\0\1\121"+
    "\1\0\1\126\17\0\1\135\1\0\12\30\6\0\2\141"+
    "\3\0\5\141\1\142\23\141\43\0\1\67\1\143\104\0"+
    "\1\144\104\0\1\145\1\67\45\0\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\31\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\4\37\1\154"+
    "\14\37\1\155\7\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\1\37\1\156\14\37\1\157\1\37\1\160\6\37"+
    "\1\161\1\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\1\37\1\162\14\37\1\163\12\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\1\37\1\164\3\37\1\165\10\37"+
    "\1\166\12\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\13\37\1\167\1\37\1\170\13\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\1\37\1\171\7\37\1\172\4\37"+
    "\1\173\1\37\1\174\2\37\1\175\5\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\5\37\1\176\10\37\1\177"+
    "\12\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\6\37"+
    "\1\200\5\37\1\201\1\202\13\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\1\37\1\203\7\37\1\204\4\37"+
    "\1\205\12\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\1\37\1\206\16\37\1\207\2\37\1\210\5\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\5\37\1\211\23\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\5\37\1\212"+
    "\10\37\1\213\3\37\1\214\5\37\1\215\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\10\37\1\216\7\37\1\217"+
    "\10\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\6\37"+
    "\1\220\2\37\1\221\17\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\1\37\1\222\7\37\1\223\17\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\5\37\1\224\2\37"+
    "\1\225\20\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\5\37\1\226\23\37\3\0\1\146\1\10\1\153\100\0"+
    "\1\227\4\0\1\10\4\0\1\10\2\0\1\10\2\0"+
    "\1\10\25\0\2\116\3\0\1\117\30\116\4\0\1\230"+
    "\1\10\2\71\2\0\1\71\1\0\2\71\1\0\74\71"+
    "\2\0\1\72\104\0\1\76\123\0\12\105\113\0\1\107"+
    "\45\0\1\113\123\0\12\116\6\0\2\116\3\0\31\116"+
    "\6\0\1\10\4\0\1\10\2\0\1\10\2\0\1\10"+
    "\5\0\12\116\6\0\2\116\3\0\1\117\30\116\4\0"+
    "\2\10\6\0\2\121\3\0\1\121\4\0\1\122\14\0"+
    "\1\123\1\121\1\124\1\0\2\125\2\0\1\121\31\125"+
    "\3\0\1\121\1\0\1\126\35\0\1\121\106\0\1\121"+
    "\53\0\2\146\3\0\1\146\4\0\1\150\12\125\2\0"+
    "\1\151\1\0\1\152\1\0\2\125\2\0\1\146\31\125"+
    "\3\0\1\146\1\0\1\231\103\0\1\121\1\0\1\10"+
    "\4\0\1\10\2\121\1\10\2\0\1\230\4\0\1\122"+
    "\14\0\1\123\1\0\1\124\1\0\2\125\2\0\1\121"+
    "\1\132\30\125\3\0\1\121\1\10\1\70\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\125"+
    "\2\0\1\151\1\0\1\152\1\0\2\125\2\0\1\146"+
    "\1\132\30\125\3\0\1\146\1\10\1\153\17\0\1\232"+
    "\1\0\12\233\6\0\2\141\3\0\5\141\1\142\23\141"+
    "\6\0\6\234\2\235\3\234\1\236\4\234\1\237\14\234"+
    "\1\240\1\234\1\241\1\234\2\242\2\234\1\235\31\242"+
    "\3\234\1\235\1\234\1\243\2\244\1\11\1\12\2\244"+
    "\2\245\3\244\1\245\4\244\1\137\14\244\1\246\1\245"+
    "\1\247\1\244\2\250\2\244\1\245\31\250\3\244\1\245"+
    "\1\244\1\251\21\0\12\141\6\0\2\141\3\0\31\141"+
    "\24\0\1\252\1\253\1\0\12\254\6\0\2\141\3\0"+
    "\5\141\1\255\23\141\14\0\2\146\3\0\1\146\4\0"+
    "\1\150\14\0\1\151\1\0\1\152\1\0\2\256\2\0"+
    "\1\146\31\256\3\0\1\146\1\0\1\231\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\14\0"+
    "\1\151\1\0\1\152\1\0\2\256\2\0\1\146\1\257"+
    "\30\256\3\0\1\146\1\10\1\153\6\0\2\146\3\0"+
    "\1\146\4\0\1\150\14\0\1\151\1\146\1\152\1\0"+
    "\2\256\2\0\1\146\31\256\3\0\1\146\1\0\1\231"+
    "\35\0\1\146\106\0\1\146\45\0\1\10\4\0\1\10"+
    "\2\0\1\10\2\0\1\10\25\0\2\116\3\0\1\117"+
    "\30\116\4\0\1\147\2\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\4\37\1\260\24\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\13\37\1\261"+
    "\15\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\16\37"+
    "\1\262\12\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\5\37\1\263\23\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\22\37\1\264\6\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\13\37\1\265\15\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\15\37\1\266\13\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\27\37\1\267\1\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\13\37\1\270\15\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\21\37\1\271"+
    "\7\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\23\37"+
    "\1\272\5\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\13\37\1\273\15\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\15\37\1\274\13\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\20\37\1\275\10\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\16\37\1\276\12\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\15\37\1\277\13\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\26\37\1\300\2\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\23\37\1\301"+
    "\5\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\17\37"+
    "\1\302\11\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\22\37\1\303\6\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\17\37\1\304\11\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\15\37\1\305\13\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\4\37\1\306\24\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\27\37\1\307\1\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\1\37\1\310\7\37"+
    "\1\311\17\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\2\37\1\312\26\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\22\37\1\313\6\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\3\37\1\314\11\37\1\315\13\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\13\37\1\316\15\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\20\37\1\317"+
    "\10\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\1\37"+
    "\1\320\27\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\11\37\1\321\17\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\1\37\1\322\21\37\1\323\5\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\11\37\1\324\17\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\15\37\1\325\13\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\20\37\1\155"+
    "\10\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\5\37"+
    "\1\326\23\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\5\37\1\327\3\37\1\330\17\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\11\37\1\331\17\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\1\37\1\301\27\37\3\0"+
    "\1\146\1\10\1\153\103\0\1\146\22\0\12\332\71\0"+
    "\1\332\1\0\12\233\6\0\2\141\3\0\5\141\1\142"+
    "\23\141\6\0\13\234\1\333\77\234\2\235\3\234\1\334"+
    "\4\234\1\237\14\234\1\240\1\234\1\241\1\234\2\242"+
    "\2\234\1\235\31\242\3\234\1\235\1\234\1\243\6\234"+
    "\2\235\3\234\1\334\4\234\1\335\14\234\1\240\1\234"+
    "\1\241\1\234\2\242\2\234\1\235\31\242\3\234\1\235"+
    "\1\234\1\243\6\234\2\235\3\234\1\334\4\234\1\237"+
    "\14\234\1\240\1\235\1\241\1\234\2\242\2\234\1\235"+
    "\31\242\3\234\1\235\1\234\1\243\13\234\1\333\21\234"+
    "\1\235\62\234\1\333\23\234\1\235\53\234\2\336\3\234"+
    "\1\337\4\234\1\340\12\242\2\234\1\341\1\234\1\342"+
    "\1\234\2\242\2\234\1\336\31\242\3\234\1\336\1\234"+
    "\1\343\13\234\1\333\67\234\1\235\1\234\2\244\1\11"+
    "\1\12\103\244\1\11\1\12\2\244\2\245\3\244\1\245"+
    "\4\244\1\137\14\244\1\246\1\244\1\247\1\244\2\250"+
    "\2\244\1\245\31\250\3\244\1\245\1\244\1\251\2\244"+
    "\1\11\1\12\31\244\1\245\51\244\1\11\1\12\33\244"+
    "\1\245\47\244\1\11\1\12\2\244\2\344\3\244\1\344"+
    "\4\244\1\345\12\250\2\244\1\346\1\244\1\347\1\244"+
    "\2\250\2\244\1\344\31\250\3\244\1\344\1\244\1\350"+
    "\2\244\1\11\1\12\77\244\1\245\1\244\16\0\1\351"+
    "\1\253\1\0\12\352\73\0\12\353\71\0\1\354\1\0"+
    "\12\355\6\0\2\141\3\0\31\141\24\0\1\351\1\253"+
    "\1\0\12\356\6\0\2\141\3\0\5\141\1\255\23\141"+
    "\27\0\12\256\6\0\2\256\3\0\31\256\6\0\1\10"+
    "\4\0\1\10\2\0\1\10\2\0\1\10\5\0\12\256"+
    "\6\0\2\256\3\0\1\257\30\256\4\0\3\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\20\37\1\357\10\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\1\37\1\360\27\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\13\37\1\361\15\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\1\37\1\362\27\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\5\37\1\363\23\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\13\37\1\364\15\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\21\37\1\365"+
    "\1\366\6\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\21\37\1\330\7\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\5\37\1\367\23\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\5\37\1\370\23\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\14\37\1\371\14\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\21\37\1\372\7\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\15\37\1\373\13\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\14\37\1\155"+
    "\14\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\3\37"+
    "\1\374\25\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\375\2\146\1\376\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\31\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\20\37"+
    "\1\267\10\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\16\37\1\377\12\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\1\37\1\u0100\1\u0101\1\u0102\2\37\1\u0103\1\37\1\u0104"+
    "\1\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\5\37\1\u0105\23\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\17\37\1\u0106\11\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\23\37\1\u0107\5\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\11\37\1\u0108\17\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\1\37\1\u0109\27\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\7\37\1\u010a"+
    "\21\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\24\37"+
    "\1\u010b\4\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\13\37\1\u010c\15\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\23\37\1\u010d\5\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\16\37\1\u010e\12\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\4\37\1\u010f\24\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\11\37\1\u0110\17\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\11\37\1\u0111\11\37"+
    "\1\u0112\5\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\2\37\1\u0113\26\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\21\37\1\u0114\7\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\15\37\1\u0115\13\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\5\37\1\u0116\23\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\26\37\1\u0117\2\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\22\37\1\u0118\6\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\25\37\1\155"+
    "\3\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\12\37"+
    "\1\267\16\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\13\37\1\u0119\15\37\3\0\1\146\1\10\1\153\17\0"+
    "\1\232\1\0\12\u011a\6\0\2\141\3\0\5\141\1\142"+
    "\23\141\6\0\13\234\1\333\4\234\1\11\72\234\2\235"+
    "\3\234\1\334\4\234\1\u011b\14\234\1\240\1\234\1\241"+
    "\1\234\2\242\2\234\1\235\31\242\3\234\1\235\1\234"+
    "\1\243\6\234\2\336\3\234\1\337\4\234\1\340\14\234"+
    "\1\341\1\234\1\342\1\234\2\u011c\2\234\1\336\31\u011c"+
    "\3\234\1\336\1\234\1\343\6\234\2\336\3\234\1\337"+
    "\4\234\1\150\14\234\1\341\1\234\1\342\1\234\2\u011c"+
    "\2\234\1\336\31\u011c\3\234\1\336\1\234\1\343\6\234"+
    "\2\336\3\234\1\337\4\234\1\340\14\234\1\341\1\336"+
    "\1\342\1\234\2\u011c\2\234\1\336\31\u011c\3\234\1\336"+
    "\1\234\1\343\13\234\1\333\21\234\1\336\62\234\1\333"+
    "\23\234\1\336\60\234\1\333\67\234\1\336\1\234\2\244"+
    "\1\11\1\12\2\244\2\344\3\244\1\344\4\244\1\345"+
    "\14\244\1\346\1\244\1\347\1\244\2\u011d\2\244\1\344"+
    "\31\u011d\3\244\1\344\1\244\1\350\2\244\1\11\1\12"+
    "\2\244\2\344\3\244\1\344\4\244\1\345\14\244\1\346"+
    "\1\344\1\347\1\244\2\u011d\2\244\1\344\31\u011d\3\244"+
    "\1\344\1\244\1\350\2\244\1\11\1\12\31\244\1\344"+
    "\51\244\1\11\1\12\33\244\1\344\47\244\1\11\1\12"+
    "\77\244\1\344\1\244\16\0\1\351\1\253\1\0\12\u011e"+
    "\71\0\1\354\1\0\12\u011f\6\0\2\141\3\0\31\141"+
    "\27\0\12\u0120\71\0\1\u0120\1\0\12\355\6\0\2\141"+
    "\3\0\5\141\1\u0121\23\141\25\0\1\353\1\0\12\356"+
    "\6\0\2\141\3\0\31\141\6\0\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\5\37"+
    "\1\u0122\23\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\15\37\1\u0123\13\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\12\37\1\u0124\16\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\21\37\1\u0125\7\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\3\37\1\u0126\25\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\22\37\1\u0127\6\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\11\37\1\u0128\6\37"+
    "\1\u0129\10\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\7\37\1\u012a\12\37\1\u012b\6\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\5\37\1\u012c\23\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\5\37\1\u012d\23\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\22\37\1\u012e\6\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\20\37\1\u012f"+
    "\10\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\2\37\1\u0130"+
    "\3\37\1\u0131\3\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\31\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\5\37\1\u0132\4\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\31\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\2\37\1\u0133\7\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\31\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\4\37\1\u0134\5\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\31\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\20\37\1\u0135\10\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\11\37\1\u0136"+
    "\17\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\22\37"+
    "\1\u0137\6\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\6\37\1\u0138\22\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\2\37\1\u0139\26\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\14\37\1\u013a\14\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\1\37\1\u013b\27\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\11\37\1\u013c\17\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\20\37\1\u013d\10\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\15\37\1\u013e"+
    "\13\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\4\37"+
    "\1\u013f\24\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\15\37\1\u0140\13\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\3\37\1\u0141\25\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\16\37\1\330\12\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\21\37\1\u0142\7\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\5\37\1\u0143\23\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\1\37\1\u0144\1\u0145\1\u0146"+
    "\2\37\1\u0147\1\37\1\u0148\1\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\31\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\5\37\1\u0149\23\37\3\0"+
    "\1\146\1\10\1\153\17\0\1\332\1\0\12\u011a\6\0"+
    "\2\141\3\0\5\141\1\142\23\141\6\0\13\234\1\333"+
    "\5\234\12\u011c\6\234\2\u011c\3\234\31\u011c\6\234\2\244"+
    "\1\11\1\12\15\244\12\u011d\6\244\2\u011d\3\244\31\u011d"+
    "\6\244\17\0\1\353\1\0\12\u011e\71\0\1\u0120\1\0"+
    "\12\u011f\6\0\2\141\3\0\5\141\1\u0121\23\141\25\0"+
    "\1\u014a\1\0\12\u014b\20\0\1\u014c\47\0\1\u014d\2\0"+
    "\12\u014e\6\0\2\141\3\0\31\141\6\0\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\21\37\1\u014f\7\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\3\37\1\u0150\25\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\1\37\1\u0151\1\u0152\1\u0153\1\u0154\1\u0155\1\u0156"+
    "\1\u0157\1\u0158\1\u0159\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\31\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\16\37\1\u015a\12\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\20\37\1\u015b\10\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\15\37\1\u015c\13\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\1\37\1\u015d\27\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\1\37\1\u015e"+
    "\27\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\5\37"+
    "\1\155\23\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\27\37\1\330\1\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\11\37\1\u015f\17\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\22\37\1\155\6\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\10\37\1\u0160\1\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\31\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\6\37\1\u0161\3\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\31\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\15\37\1\u0162\13\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\15\37\1\u0163"+
    "\13\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\5\37"+
    "\1\267\23\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\11\37\1\u0164\17\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\13\37\1\u0165\15\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\1\37\1\u0166\27\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\22\37\1\u0167\6\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\3\37\1\u0168\25\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\15\37\1\u0169\13\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\4\37\1\267"+
    "\24\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\11\37"+
    "\1\u016a\17\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\7\37\1\u016b\21\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\22\37\1\u016c\6\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\6\37\1\u016d\22\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\4\37\1\u016e\24\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\2\37\1\u016f\3\37\1\u0170\3\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\31\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\5\37\1\u0171"+
    "\4\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\31\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\2\37"+
    "\1\u0172\7\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\31\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\4\37\1\u0173\5\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\31\37\3\0\1\146\1\10\1\153"+
    "\21\0\12\u0174\71\0\1\u0174\1\0\12\u014b\20\0\1\u014c"+
    "\47\0\1\u014d\2\0\12\u0175\73\0\12\u0175\71\0\1\u014a"+
    "\1\0\12\u0176\6\0\2\141\3\0\31\141\6\0\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\21\37\1\u0177\7\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\5\37\1\u010f\23\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\1\u0178\1\u0179\1\u017a\1\u017b\1\u017c\1\u017d"+
    "\1\u017e\1\u017f\1\u0180\1\u0181\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\31\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\1\u0182\1\u0183\1\u0184\1\u0185\1\u0186\1\u0187"+
    "\1\u0188\1\u0189\1\u018a\1\u018b\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\31\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\1\u018c\1\u018d\1\u018e\7\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\31\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\4\37\1\u0150\24\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\23\37\1\u018f"+
    "\5\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\23\37"+
    "\1\u0190\5\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\3\37\1\u0191\25\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\22\37\1\u0192\6\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\16\37\1\u0193\12\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\1\37\1\u0194\27\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\7\37\1\155\21\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\5\37\1\222\23\37"+
    "\3\0\1\146\1\10\1\153\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\5\37\1\u0195"+
    "\23\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\5\37"+
    "\1\u0196\23\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\21\37\1\u0197\7\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\22\37\1\u0198\6\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\5\37\1\u0199\23\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\10\37\1\u019a\1\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\31\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\6\37\1\u019b\3\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\31\37\3\0"+
    "\1\146\1\10\1\153\17\0\1\u014a\1\0\12\u019c\20\0"+
    "\1\u014c\50\0\1\u014a\1\0\12\u019d\6\0\2\141\3\0"+
    "\31\141\25\0\1\u0174\1\0\12\u0176\6\0\2\141\3\0"+
    "\5\141\1\u0121\23\141\6\0\1\10\4\0\1\10\2\146"+
    "\1\10\2\0\1\147\4\0\1\150\12\37\2\0\1\151"+
    "\1\0\1\152\1\0\2\37\2\0\1\146\3\37\1\u019e"+
    "\25\37\3\0\1\146\1\10\1\153\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\5\37"+
    "\1\u019f\23\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\22\37\1\u01a0\6\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\5\37\1\u01a1\23\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\15\37\1\u01a2\13\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\13\37\1\u01a3\15\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\27\37\1\u01a4\1\37\3\0"+
    "\1\146\1\10\1\153\1\10\4\0\1\10\2\146\1\10"+
    "\2\0\1\147\4\0\1\150\12\37\2\0\1\151\1\0"+
    "\1\152\1\0\2\37\2\0\1\146\20\37\1\u010f\10\37"+
    "\3\0\1\146\1\10\1\153\17\0\1\u0174\1\0\12\u019c"+
    "\20\0\1\u014c\50\0\1\u0174\1\0\12\u019d\6\0\2\141"+
    "\3\0\5\141\1\u0121\23\141\6\0\1\10\4\0\1\10"+
    "\2\146\1\10\2\0\1\147\4\0\1\150\12\37\2\0"+
    "\1\151\1\0\1\152\1\0\2\37\2\0\1\146\22\37"+
    "\1\u01a5\6\37\3\0\1\146\1\10\1\153\1\10\4\0"+
    "\1\10\2\146\1\10\2\0\1\147\4\0\1\150\12\37"+
    "\2\0\1\151\1\0\1\152\1\0\2\37\2\0\1\146"+
    "\3\37\1\u01a6\25\37\3\0\1\146\1\10\1\153\1\10"+
    "\4\0\1\10\2\146\1\10\2\0\1\147\4\0\1\150"+
    "\12\37\2\0\1\151\1\0\1\152\1\0\2\37\2\0"+
    "\1\146\16\37\1\222\12\37\3\0\1\146\1\10\1\153"+
    "\1\10\4\0\1\10\2\146\1\10\2\0\1\147\4\0"+
    "\1\150\12\37\2\0\1\151\1\0\1\152\1\0\2\37"+
    "\2\0\1\146\1\37\1\u01a7\27\37\3\0\1\146\1\10"+
    "\1\153\1\10\4\0\1\10\2\146\1\10\2\0\1\147"+
    "\4\0\1\150\12\37\2\0\1\151\1\0\1\152\1\0"+
    "\2\37\2\0\1\146\13\37\1\u01a8\15\37\3\0\1\146"+
    "\1\10\1\153\1\10\4\0\1\10\2\146\1\10\2\0"+
    "\1\147\4\0\1\150\12\37\2\0\1\151\1\0\1\152"+
    "\1\0\2\37\2\0\1\146\13\37\1\u010f\15\37\3\0"+
    "\1\146\1\10\1\153";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21321];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\1\1\11\6\1\2\11\2\1\1\11\4\1"+
    "\2\11\3\1\1\11\1\1\2\11\22\1\1\11\1\1"+
    "\1\11\3\1\1\11\1\1\3\11\1\1\5\11\1\1"+
    "\1\11\1\1\4\11\1\1\1\11\2\1\1\11\4\0"+
    "\1\1\1\0\2\1\1\11\1\1\2\11\1\1\1\0"+
    "\4\1\3\11\3\1\2\0\54\1\1\11\1\1\2\0"+
    "\1\1\6\0\1\1\1\0\6\1\2\0\56\1\3\0"+
    "\4\1\3\0\5\1\1\0\60\1\1\0\3\1\1\0"+
    "\53\1\1\0\1\1\2\0\46\1\2\0\46\1\2\0"+
    "\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[424];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    public static int bandera = 0;
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();

    private Symbol symbol(int type) {
      return new Symbol(type, yyline, yycolumn);
    }
     private Symbol symbol(int type, Object value) {
       System.out.println(value + ", " + String.valueOf(type));
      return new Symbol(type, yyline, yycolumn, value);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symb.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: identificador 4"));
            }
            // fall through
          case 135: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 136: break;
          case 3:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.negacion, yytext());
            }
            // fall through
          case 137: break;
          case 4:
            { string.setLength(0); yybegin(STRING); bandera = yycolumn;
            }
            // fall through
          case 138: break;
          case 5:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.porcentaje, yytext());
            }
            // fall through
          case 139: break;
          case 6:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
            }
            // fall through
          case 140: break;
          case 7:
            { string.setLength(0); yybegin(Chars); bandera = yycolumn;
            }
            // fall through
          case 141: break;
          case 8:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.O_Parent_R, yytext());
            }
            // fall through
          case 142: break;
          case 9:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.C_Parent_R, yytext());
            }
            // fall through
          case 143: break;
          case 10:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.por, yytext());
            }
            // fall through
          case 144: break;
          case 11:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.mas, yytext());
            }
            // fall through
          case 145: break;
          case 12:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.coma, yytext());
            }
            // fall through
          case 146: break;
          case 13:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.menos, yytext());
            }
            // fall through
          case 147: break;
          case 14:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.punto, yytext());
            }
            // fall through
          case 148: break;
          case 15:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.div, yytext());
            }
            // fall through
          case 149: break;
          case 16:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Literal: Numero")); return symbol(Symb.numero, yytext());
            }
            // fall through
          case 150: break;
          case 17:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.punto_punto, yytext());
            }
            // fall through
          case 151: break;
          case 18:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.punto_coma, yytext());
            }
            // fall through
          case 152: break;
          case 19:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.menor, yytext());
            }
            // fall through
          case 153: break;
          case 20:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.igual, yytext());
            }
            // fall through
          case 154: break;
          case 21:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.mayor, yytext());
            }
            // fall through
          case 155: break;
          case 22:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.interrogacion_C, yytext());
            }
            // fall through
          case 156: break;
          case 23:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Identificador")); return symbol(Symb.ident,yytext());
            }
            // fall through
          case 157: break;
          case 24:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.O_Parent_C , yytext());
            }
            // fall through
          case 158: break;
          case 25:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.C_Parent_C, yytext());
            }
            // fall through
          case 159: break;
          case 26:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.techo, yytext());
            }
            // fall through
          case 160: break;
          case 27:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.O_Parent_L , yytext());
            }
            // fall through
          case 161: break;
          case 28:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.C_Parent_L, yytext());
            }
            // fall through
          case 162: break;
          case 29:
            { string.append( yytext() );
            }
            // fall through
          case 163: break;
          case 30:
            { errores.add(new Token(string.toString(), yyline, bandera, "Error stringASAD"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 164: break;
          case 31:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
    return symbol(Symb.stringSoli, yytext());
            }
            // fall through
          case 165: break;
          case 32:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error string"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 166: break;
          case 33:
            { string.append( yytext() );
    errores.add(new Token(string.toString(), yyline, bandera, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 167: break;
          case 34:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 168: break;
          case 35:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
    return symbol(Symb.charss, yytext());
            }
            // fall through
          case 169: break;
          case 36:
            { string.append(yytext());
    yybegin(hexaStateError);
            }
            // fall through
          case 170: break;
          case 37:
            { yybegin(YYINITIAL);
    string.append( yytext() ); 
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada")); 
    return symbol(Symb.numero, yytext());
            }
            // fall through
          case 171: break;
          case 38:
            { string.append(yytext());
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 172: break;
          case 39:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); 
    errores.add(new Token("Comillas", yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
    return symbol(Symb.punto_coma, yytext());
            }
            // fall through
          case 173: break;
          case 40:
            { string.append(yytext());
    yybegin(hexaStateCError);
            }
            // fall through
          case 174: break;
          case 41:
            { string.append( yytext() ); 
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 175: break;
          case 42:
            { string.append(yytext());
            }
            // fall through
          case 176: break;
          case 43:
            { yybegin(YYINITIAL); errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
            }
            // fall through
          case 177: break;
          case 44:
            { yybegin(YYINITIAL);
    string.append(yytext());
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
            }
            // fall through
          case 178: break;
          case 45:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.diferente, yytext());
            }
            // fall through
          case 179: break;
          case 46:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: identificador"));
            }
            // fall through
          case 180: break;
          case 47:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.op_and, yytext());
            }
            // fall through
          case 181: break;
          case 48:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.por_igual, yytext());
            }
            // fall through
          case 182: break;
          case 49:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.mas_igual, yytext());
            }
            // fall through
          case 183: break;
          case 50:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.menos_igual, yytext());
            }
            // fall through
          case 184: break;
          case 51:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.div_igual, yytext());
            }
            // fall through
          case 185: break;
          case 52:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero"));
            }
            // fall through
          case 186: break;
          case 53:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.menor_igual, yytext());
            }
            // fall through
          case 187: break;
          case 54:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.igual_igual, yytext());
            }
            // fall through
          case 188: break;
          case 55:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.mayor_igual, yytext());
            }
            // fall through
          case 189: break;
          case 56:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 190: break;
          case 57:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.doSoli, yytext());
            }
            // fall through
          case 191: break;
          case 58:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.ifSoli, yytext());
            }
            // fall through
          case 192: break;
          case 59:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.op_or, yytext());
            }
            // fall through
          case 193: break;
          case 60:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.forSoli, yytext());
            }
            // fall through
          case 194: break;
          case 61:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.intSoli, yytext());
            }
            // fall through
          case 195: break;
          case 62:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 196: break;
          case 63:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.bool, yytext());
            }
            // fall through
          case 197: break;
          case 64:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.byteSoli, yytext());
            }
            // fall through
          case 198: break;
          case 65:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 199: break;
          case 66:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.elseSoli, yytext());
            }
            // fall through
          case 200: break;
          case 67:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.enumSoli, yytext());
            }
            // fall through
          case 201: break;
          case 68:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 202: break;
          case 69:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaStateC);
            }
            // fall through
          case 203: break;
          case 70:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_O, yytext());
            }
            // fall through
          case 204: break;
          case 71:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.thisSoli, yytext());
            }
            // fall through
          case 205: break;
          case 72:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.trueSoli, yytext());
            }
            // fall through
          case 206: break;
          case 73:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint, yytext());
            }
            // fall through
          case 207: break;
          case 74:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.breakSoli, yytext());
            }
            // fall through
          case 208: break;
          case 75:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.falseSoli, yytext());
            }
            // fall through
          case 209: break;
          case 76:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_DS, yytext());
            }
            // fall through
          case 210: break;
          case 77:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_TD , yytext());
            }
            // fall through
          case 211: break;
          case 78:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_SC, yytext());
            }
            // fall through
          case 212: break;
          case 79:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_O, yytext());
            }
            // fall through
          case 213: break;
          case 80:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.whileSoli, yytext());
            }
            // fall through
          case 214: break;
          case 81:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_I, yytext());
            }
            // fall through
          case 215: break;
          case 82:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_II, yytext());
            }
            // fall through
          case 216: break;
          case 83:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_III, yytext());
            }
            // fall through
          case 217: break;
          case 84:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_IV, yytext());
            }
            // fall through
          case 218: break;
          case 85:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_V, yytext());
            }
            // fall through
          case 219: break;
          case 86:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_VI, yytext());
            }
            // fall through
          case 220: break;
          case 87:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_VII, yytext());
            }
            // fall through
          case 221: break;
          case 88:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_IIX, yytext());
            }
            // fall through
          case 222: break;
          case 89:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_IX, yytext());
            }
            // fall through
          case 223: break;
          case 90:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_CVO, yytext());
            }
            // fall through
          case 224: break;
          case 91:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_DCS, yytext());
            }
            // fall through
          case 225: break;
          case 92:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.pragma, yytext());
            }
            // fall through
          case 226: break;
          case 93:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.publicSoli, yytext());
            }
            // fall through
          case 227: break;
          case 94:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.returnSoli, yytext());
            }
            // fall through
          case 228: break;
          case 95:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.string, yytext());
            }
            // fall through
          case 229: break;
          case 96:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.structSoli, yytext());
            }
            // fall through
          case 230: break;
          case 97:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.ufixedSoli, yytext());
            }
            // fall through
          case 231: break;
          case 98:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_DS, yytext());
            }
            // fall through
          case 232: break;
          case 99:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_TD , yytext());
            }
            // fall through
          case 233: break;
          case 100:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_SC, yytext());
            }
            // fall through
          case 234: break;
          case 101:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.address, yytext());
            }
            // fall through
          case 235: break;
          case 102:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_X, yytext());
            }
            // fall through
          case 236: break;
          case 103:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XI, yytext());
            }
            // fall through
          case 237: break;
          case 104:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XII, yytext());
            }
            // fall through
          case 238: break;
          case 105:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XIII, yytext());
            }
            // fall through
          case 239: break;
          case 106:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XIV, yytext());
            }
            // fall through
          case 240: break;
          case 107:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XV, yytext());
            }
            // fall through
          case 241: break;
          case 108:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XVI, yytext());
            }
            // fall through
          case 242: break;
          case 109:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XVII, yytext());
            }
            // fall through
          case 243: break;
          case 110:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XIIX, yytext());
            }
            // fall through
          case 244: break;
          case 111:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XIX, yytext());
            }
            // fall through
          case 245: break;
          case 112:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XX, yytext());
            }
            // fall through
          case 246: break;
          case 113:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXI, yytext());
            }
            // fall through
          case 247: break;
          case 114:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXII, yytext());
            }
            // fall through
          case 248: break;
          case 115:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXIII, yytext());
            }
            // fall through
          case 249: break;
          case 116:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXIV, yytext());
            }
            // fall through
          case 250: break;
          case 117:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXV, yytext());
            }
            // fall through
          case 251: break;
          case 118:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXVI, yytext());
            }
            // fall through
          case 252: break;
          case 119:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXVII, yytext());
            }
            // fall through
          case 253: break;
          case 120:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXIIX, yytext());
            }
            // fall through
          case 254: break;
          case 121:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXIX, yytext());
            }
            // fall through
          case 255: break;
          case 122:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXX, yytext());
            }
            // fall through
          case 256: break;
          case 123:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXXI, yytext());
            }
            // fall through
          case 257: break;
          case 124:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXXII, yytext());
            }
            // fall through
          case 258: break;
          case 125:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.payableSoli, yytext());
            }
            // fall through
          case 259: break;
          case 126:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.privateSoli, yytext());
            }
            // fall through
          case 260: break;
          case 127:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.returns, yytext());
            }
            // fall through
          case 261: break;
          case 128:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_CVO, yytext());
            }
            // fall through
          case 262: break;
          case 129:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_DCS, yytext());
            }
            // fall through
          case 263: break;
          case 130:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.continueSoli, yytext());
            }
            // fall through
          case 264: break;
          case 131:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.contract, yytext());
            }
            // fall through
          case 265: break;
          case 132:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.functionSoli, yytext());
            }
            // fall through
          case 266: break;
          case 133:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.internalSoli, yytext());
            }
            // fall through
          case 267: break;
          case 134:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.solidity, yytext());
            }
            // fall through
          case 268: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
