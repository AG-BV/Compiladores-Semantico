
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symb.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u015b\000\002\002\004\000\002\140\002\000\002\002" +
    "\004\000\002\003\016\000\002\075\010\000\002\075\002" +
    "\000\002\004\004\000\002\004\003\000\002\005\004\000" +
    "\002\005\003\000\002\006\004\000\002\006\003\000\002" +
    "\007\004\000\002\007\002\000\002\012\021\000\002\012" +
    "\005\000\002\055\006\000\002\055\002\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\002\000\002\057\007\000\002\057\002\000\002" +
    "\060\004\000\002\060\002\000\002\076\007\000\002\076" +
    "\003\000\002\141\002\000\002\142\002\000\002\054\007" +
    "\000\002\054\004\000\002\054\005\000\002\054\003\000" +
    "\002\063\003\000\002\063\003\000\002\077\004\000\002" +
    "\077\003\000\002\100\003\000\002\100\003\000\002\050" +
    "\014\000\002\050\005\000\002\050\006\000\002\051\010" +
    "\000\002\051\002\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\143\002\000\002" +
    "\144\002\000\002\145\002\000\002\034\015\000\002\034" +
    "\005\000\002\042\016\000\002\044\014\000\002\146\002" +
    "\000\002\147\002\000\002\150\002\000\002\045\016\000" +
    "\002\045\005\000\002\151\002\000\002\046\010\000\002" +
    "\046\005\000\002\046\002\000\002\047\012\000\002\047" +
    "\005\000\002\047\011\000\002\041\004\000\002\041\002" +
    "\000\002\152\002\000\002\035\005\000\002\035\010\000" +
    "\002\153\002\000\002\154\002\000\002\035\014\000\002" +
    "\035\016\000\002\035\014\000\002\035\003\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\037\005" +
    "\000\002\037\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\013\000\002\155\002\000\002\156\002\000\002" +
    "\157\002\000\002\052\016\000\002\160\002\000\002\053" +
    "\010\000\002\053\002\000\002\161\002\000\002\036\006" +
    "\000\002\040\006\000\002\043\005\000\002\030\004\000" +
    "\002\030\002\000\002\031\005\000\002\031\002\000\002" +
    "\061\004\000\002\010\010\000\002\010\005\000\002\013" +
    "\005\000\002\013\002\000\002\162\002\000\002\163\002" +
    "\000\002\164\002\000\002\017\012\000\002\017\005\000" +
    "\002\033\003\000\002\033\004\000\002\165\002\000\002" +
    "\020\005\000\002\015\004\000\002\015\002\000\002\016" +
    "\003\000\002\016\003\000\002\016\002\000\002\166\002" +
    "\000\002\021\005\000\002\021\004\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\070\004\000\002" +
    "\070\004\000\002\167\002\000\002\073\005\000\002\073" +
    "\003\000\002\064\005\000\002\064\003\000\002\074\004" +
    "\000\002\170\002\000\002\074\006\000\002\074\004\000" +
    "\002\074\002\000\002\065\005\000\002\066\004\000\002" +
    "\171\002\000\002\066\006\000\002\066\004\000\002\066" +
    "\002\000\002\071\004\000\002\071\003\000\002\072\004" +
    "\000\002\072\003\000\002\172\002\000\002\022\005\000" +
    "\002\173\002\000\002\022\005\000\002\022\006\000\002" +
    "\022\003\000\002\135\004\000\002\135\003\000\002\135" +
    "\002\000\002\174\002\000\002\026\006\000\002\026\003" +
    "\000\002\134\003\000\002\134\003\000\002\134\002\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\067\003\000\002\024\004\000\002\175" +
    "\002\000\002\117\005\000\002\176\002\000\002\117\005" +
    "\000\002\177\002\000\002\117\005\000\002\200\002\000" +
    "\002\117\005\000\002\201\002\000\002\027\005\000\002" +
    "\027\002\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\116\003\000" +
    "\002\116\002\000\002\032\003\000\002\032\003\000\002" +
    "\101\004\000\002\101\004\000\002\101\003\000\002\101" +
    "\003\000\002\105\004\000\002\102\005\000\002\102\003" +
    "\000\002\107\004\000\002\107\004\000\002\107\004\000" +
    "\002\103\005\000\002\112\004\000\002\112\004\000\002" +
    "\112\002\000\002\110\004\000\002\110\006\000\002\110" +
    "\003\000\002\113\004\000\002\113\003\000\002\111\004" +
    "\000\002\111\005\000\002\111\007\000\002\106\004\000" +
    "\002\106\002\000\002\114\004\000\002\114\002\000\002" +
    "\115\003\000\002\115\003\000\002\115\003\000\002\115" +
    "\003\000\002\115\003\000\002\115\003\000\002\115\003" +
    "\000\002\115\003\000\002\115\003\000\002\104\003\000" +
    "\002\104\003\000\002\120\004\000\002\120\004\000\002" +
    "\120\003\000\002\120\003\000\002\120\003\000\002\130" +
    "\004\000\002\130\004\000\002\124\004\000\002\121\005" +
    "\000\002\121\003\000\002\125\004\000\002\125\004\000" +
    "\002\125\004\000\002\125\002\000\002\122\005\000\002" +
    "\126\004\000\002\126\004\000\002\126\004\000\002\126" +
    "\002\000\002\123\003\000\002\123\003\000\002\133\004" +
    "\000\002\133\003\000\002\133\004\000\002\133\004\000" +
    "\002\133\004\000\002\136\005\000\002\136\006\000\002" +
    "\131\004\000\002\131\002\000\002\132\003\000\002\132" +
    "\003\000\002\132\003\000\002\132\003\000\002\132\003" +
    "\000\002\132\003\000\002\132\003\000\002\132\003\000" +
    "\002\132\003\000\002\132\003\000\002\132\003\000\002" +
    "\132\003\000\002\132\003\000\002\132\003\000\002\132" +
    "\003\000\002\132\003\000\002\132\003\000\002\137\004" +
    "\000\002\137\002\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0261\000\004\004\000\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\005\011\001\002\000\004\002\uffff\001\002\000" +
    "\004\006\012\001\002\000\004\120\013\001\002\000\004" +
    "\120\014\001\002\000\004\013\015\001\002\000\004\007" +
    "\016\001\002\000\004\117\017\001\002\000\004\010\020" +
    "\001\002\000\166\011\ufff4\012\075\015\022\016\024\017" +
    "\040\020\106\021\065\022\120\023\113\024\036\025\107" +
    "\026\110\027\032\030\033\031\077\032\067\033\116\034" +
    "\074\035\100\036\112\037\070\107\105\110\057\114\064" +
    "\115\044\116\115\123\072\124\063\125\114\126\050\127" +
    "\056\130\042\131\051\132\104\133\047\134\054\135\073" +
    "\136\034\137\027\140\021\141\061\142\117\143\076\144" +
    "\121\145\122\146\060\147\043\150\052\151\035\152\041" +
    "\153\030\154\031\155\102\156\023\157\037\160\026\161" +
    "\062\162\055\001\002\000\014\003\ufeb9\040\ufeb9\042\ufeb9" +
    "\043\ufeb9\117\ufeb9\001\002\000\014\003\ufedc\040\ufedc\042" +
    "\ufedc\043\ufedc\117\ufedc\001\002\000\014\003\ufeab\040\ufeab" +
    "\042\ufeab\043\ufeab\117\ufeab\001\002\000\014\003\ufedb\040" +
    "\ufedb\042\ufedb\043\ufedb\117\ufedb\001\002\000\014\003\u0256" +
    "\040\uff95\042\uff95\043\uff95\117\uff95\001\002\000\014\003" +
    "\ufea9\040\ufea9\042\ufea9\043\ufea9\117\ufea9\001\002\000\014" +
    "\003\ufeba\040\ufeba\042\ufeba\043\ufeba\117\ufeba\001\002\000" +
    "\014\003\ufeae\040\ufeae\042\ufeae\043\ufeae\117\ufeae\001\002" +
    "\000\014\003\ufead\040\ufead\042\ufead\043\ufead\117\ufead\001" +
    "\002\000\014\003\ufed1\040\ufed1\042\ufed1\043\ufed1\117\ufed1" +
    "\001\002\000\014\003\ufed0\040\ufed0\042\ufed0\043\ufed0\117" +
    "\ufed0\001\002\000\014\003\ufebb\040\ufebb\042\ufebb\043\ufebb" +
    "\117\ufebb\001\002\000\014\003\ufeb0\040\ufeb0\042\ufeb0\043" +
    "\ufeb0\117\ufeb0\001\002\000\014\003\ufed4\040\ufed4\042\ufed4" +
    "\043\ufed4\117\ufed4\001\002\000\014\003\ufeaa\040\ufeaa\042" +
    "\ufeaa\043\ufeaa\117\ufeaa\001\002\000\014\003\ufeda\040\ufeda" +
    "\042\ufeda\043\ufeda\117\ufeda\001\002\000\014\003\ufeaf\040" +
    "\ufeaf\042\ufeaf\043\ufeaf\117\ufeaf\001\002\000\014\003\ufec1" +
    "\040\ufec1\042\ufec1\043\ufec1\117\ufec1\001\002\000\014\003" +
    "\ufeb2\040\ufeb2\042\ufeb2\043\ufeb2\117\ufeb2\001\002\000\014" +
    "\003\ufed9\040\ufed9\042\ufed9\043\ufed9\117\ufed9\001\002\000" +
    "\164\011\ufff4\015\022\016\024\017\040\020\106\021\065" +
    "\022\120\023\113\024\036\025\107\026\110\027\032\030" +
    "\033\031\077\032\067\033\116\034\074\035\100\036\112" +
    "\037\070\107\105\110\057\114\064\115\044\116\115\123" +
    "\072\124\063\125\114\126\050\127\056\130\042\131\051" +
    "\132\104\133\047\134\054\135\073\136\034\137\027\140" +
    "\021\141\061\142\117\143\076\144\121\145\122\146\060" +
    "\147\043\150\052\151\035\152\041\153\030\154\031\155" +
    "\102\156\023\157\037\160\026\161\062\162\055\001\002" +
    "\000\004\011\ufff8\001\002\000\014\003\ufebe\040\ufebe\042" +
    "\ufebe\043\ufebe\117\ufebe\001\002\000\014\003\ufec3\040\ufec3" +
    "\042\ufec3\043\ufec3\117\ufec3\001\002\000\014\003\ufec0\040" +
    "\ufec0\042\ufec0\043\ufec0\117\ufec0\001\002\000\014\003\ufeb1" +
    "\040\ufeb1\042\ufeb1\043\ufeb1\117\ufeb1\001\002\000\004\011" +
    "\ufffa\001\002\000\014\003\ufebd\040\ufebd\042\ufebd\043\ufebd" +
    "\117\ufebd\001\002\000\014\003\ufea7\040\ufea7\042\ufea7\043" +
    "\ufea7\117\ufea7\001\002\000\014\003\ufec2\040\ufec2\042\ufec2" +
    "\043\ufec2\117\ufec2\001\002\000\006\003\177\117\200\001" +
    "\002\000\014\003\ufeb3\040\ufeb3\042\ufeb3\043\ufeb3\117\ufeb3" +
    "\001\002\000\014\003\ufeb8\040\ufeb8\042\ufeb8\043\ufeb8\117" +
    "\ufeb8\001\002\000\014\003\ufea8\040\ufea8\042\ufea8\043\ufea8" +
    "\117\ufea8\001\002\000\014\003\ufec5\040\ufec5\042\ufec5\043" +
    "\ufec5\117\ufec5\001\002\000\014\003\ufec8\040\ufec8\042\ufec8" +
    "\043\ufec8\117\ufec8\001\002\000\014\003\ufed7\040\ufed7\042" +
    "\ufed7\043\ufed7\117\ufed7\001\002\000\004\011\167\001\002" +
    "\000\014\003\ufece\040\ufece\042\ufece\043\ufece\117\ufece\001" +
    "\002\000\014\003\ufec9\040\ufec9\042\ufec9\043\ufec9\117\ufec9" +
    "\001\002\000\004\011\ufff6\001\002\000\014\003\ufec6\040" +
    "\ufec6\042\ufec6\043\ufec6\117\ufec6\001\002\000\014\003\ufebc" +
    "\040\ufebc\042\ufebc\043\ufebc\117\ufebc\001\002\000\014\003" +
    "\ufecc\040\ufecc\042\ufecc\043\ufecc\117\ufecc\001\002\000\006" +
    "\003\155\117\156\001\002\000\014\003\ufeb6\040\ufeb6\042" +
    "\ufeb6\043\ufeb6\117\ufeb6\001\002\000\014\003\ufecf\040\ufecf" +
    "\042\ufecf\043\ufecf\117\ufecf\001\002\000\014\003\ufecb\040" +
    "\ufecb\042\ufecb\043\ufecb\117\ufecb\001\002\000\166\011\ufff4" +
    "\012\075\015\022\016\024\017\040\020\106\021\065\022" +
    "\120\023\113\024\036\025\107\026\110\027\032\030\033" +
    "\031\077\032\067\033\116\034\074\035\100\036\112\037" +
    "\070\107\105\110\057\114\064\115\044\116\115\123\072" +
    "\124\063\125\114\126\050\127\056\130\042\131\051\132" +
    "\104\133\047\134\054\135\073\136\034\137\027\140\021" +
    "\141\061\142\117\143\076\144\121\145\122\146\060\147" +
    "\043\150\052\151\035\152\041\153\030\154\031\155\102" +
    "\156\023\157\037\160\026\161\062\162\055\001\002\000" +
    "\014\003\ufeac\040\ufeac\042\ufeac\043\ufeac\117\ufeac\001\002" +
    "\000\006\011\ufff4\110\057\001\002\000\014\003\ufebf\040" +
    "\ufebf\042\ufebf\043\ufebf\117\ufebf\001\002\000\006\003\124" +
    "\117\125\001\002\000\014\003\ufed8\040\ufed8\042\ufed8\043" +
    "\ufed8\117\ufed8\001\002\000\014\003\ufed3\040\ufed3\042\ufed3" +
    "\043\ufed3\117\ufed3\001\002\000\014\003\ufed2\040\ufed2\042" +
    "\ufed2\043\ufed2\117\ufed2\001\002\000\010\011\ufff4\107\105" +
    "\110\057\001\002\000\014\003\ufeca\040\ufeca\042\ufeca\043" +
    "\ufeca\117\ufeca\001\002\000\014\003\ufed5\040\ufed5\042\ufed5" +
    "\043\ufed5\117\ufed5\001\002\000\014\003\ufec4\040\ufec4\042" +
    "\ufec4\043\ufec4\117\ufec4\001\002\000\014\003\ufec7\040\ufec7" +
    "\042\ufec7\043\ufec7\117\ufec7\001\002\000\014\003\ufecd\040" +
    "\ufecd\042\ufecd\043\ufecd\117\ufecd\001\002\000\014\003\ufeb7" +
    "\040\ufeb7\042\ufeb7\043\ufeb7\117\ufeb7\001\002\000\014\003" +
    "\ufed6\040\ufed6\042\ufed6\043\ufed6\117\ufed6\001\002\000\014" +
    "\003\ufeb5\040\ufeb5\042\ufeb5\043\ufeb5\117\ufeb5\001\002\000" +
    "\014\003\ufeb4\040\ufeb4\042\ufeb4\043\ufeb4\117\ufeb4\001\002" +
    "\000\004\011\ufff7\001\002\000\004\011\152\001\002\000" +
    "\006\003\127\010\126\001\002\000\156\015\022\016\024" +
    "\017\040\020\106\021\065\022\120\023\113\024\036\025" +
    "\107\026\110\027\032\030\033\031\077\032\067\033\116" +
    "\034\074\035\100\036\112\037\070\114\064\115\044\116" +
    "\115\123\072\124\063\125\114\126\050\127\056\130\042" +
    "\131\051\132\104\133\047\134\054\135\073\136\034\137" +
    "\027\140\021\141\061\142\117\143\076\144\121\145\122" +
    "\146\060\147\043\150\052\151\035\152\041\153\030\154" +
    "\031\155\102\156\023\157\037\160\026\161\062\162\055" +
    "\001\002\000\004\011\130\001\002\000\010\011\uffd6\107" +
    "\uffd6\110\uffd6\001\002\000\012\040\132\042\uff8b\043\uff8b" +
    "\117\uff8b\001\002\000\004\041\151\001\002\000\010\042" +
    "\134\043\135\117\uff88\001\002\000\004\117\uff8a\001\002" +
    "\000\004\117\uff89\001\002\000\004\117\137\001\002\000" +
    "\004\013\140\001\002\000\160\011\uffd4\015\022\016\024" +
    "\017\040\020\106\021\065\022\120\023\113\024\036\025" +
    "\107\026\110\027\032\030\033\031\077\032\067\033\116" +
    "\034\074\035\100\036\112\037\070\114\064\115\044\116" +
    "\115\123\072\124\063\125\114\126\050\127\056\130\042" +
    "\131\051\132\104\133\047\134\054\135\073\136\034\137" +
    "\027\140\021\141\061\142\117\143\076\144\121\145\122" +
    "\146\060\147\043\150\052\151\035\152\041\153\030\154" +
    "\031\155\102\156\023\157\037\160\026\161\062\162\055" +
    "\001\002\000\012\040\132\042\uff8b\043\uff8b\117\uff8b\001" +
    "\002\000\004\011\143\001\002\000\010\011\uffd8\107\uffd8" +
    "\110\uffd8\001\002\000\010\042\134\043\135\117\uff88\001" +
    "\002\000\004\117\146\001\002\000\004\013\147\001\002" +
    "\000\160\011\uffd4\015\022\016\024\017\040\020\106\021" +
    "\065\022\120\023\113\024\036\025\107\026\110\027\032" +
    "\030\033\031\077\032\067\033\116\034\074\035\100\036" +
    "\112\037\070\114\064\115\044\116\115\123\072\124\063" +
    "\125\114\126\050\127\056\130\042\131\051\132\104\133" +
    "\047\134\054\135\073\136\034\137\027\140\021\141\061" +
    "\142\117\143\076\144\121\145\122\146\060\147\043\150" +
    "\052\151\035\152\041\153\030\154\031\155\102\156\023" +
    "\157\037\160\026\161\062\162\055\001\002\000\004\011" +
    "\uffd5\001\002\000\010\042\uff8c\043\uff8c\117\uff8c\001\002" +
    "\000\010\011\uffd7\107\uffd7\110\uffd7\001\002\000\004\011" +
    "\ufff5\001\002\000\004\011\ufffb\001\002\000\004\011\166" +
    "\001\002\000\004\010\157\001\002\000\004\117\160\001" +
    "\002\000\006\011\uff96\014\161\001\002\000\004\117\164" +
    "\001\002\000\004\011\163\001\002\000\166\011\uff99\012" +
    "\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99" +
    "\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031" +
    "\uff99\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99" +
    "\107\uff99\110\uff99\114\uff99\115\uff99\116\uff99\123\uff99\124" +
    "\uff99\125\uff99\126\uff99\127\uff99\130\uff99\131\uff99\132\uff99" +
    "\133\uff99\134\uff99\135\uff99\136\uff99\137\uff99\140\uff99\141" +
    "\uff99\142\uff99\143\uff99\144\uff99\145\uff99\146\uff99\147\uff99" +
    "\150\uff99\151\uff99\152\uff99\153\uff99\154\uff99\155\uff99\156" +
    "\uff99\157\uff99\160\uff99\161\uff99\162\uff99\001\002\000\006" +
    "\011\uff96\014\161\001\002\000\004\011\uff97\001\002\000" +
    "\166\011\uff98\012\uff98\015\uff98\016\uff98\017\uff98\020\uff98" +
    "\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027" +
    "\uff98\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98" +
    "\036\uff98\037\uff98\107\uff98\110\uff98\114\uff98\115\uff98\116" +
    "\uff98\123\uff98\124\uff98\125\uff98\126\uff98\127\uff98\130\uff98" +
    "\131\uff98\132\uff98\133\uff98\134\uff98\135\uff98\136\uff98\137" +
    "\uff98\140\uff98\141\uff98\142\uff98\143\uff98\144\uff98\145\uff98" +
    "\146\uff98\147\uff98\150\uff98\151\uff98\152\uff98\153\uff98\154" +
    "\uff98\155\uff98\156\uff98\157\uff98\160\uff98\161\uff98\162\uff98" +
    "\001\002\000\006\002\ufffc\007\171\001\002\000\004\002" +
    "\ufffe\001\002\000\004\117\172\001\002\000\004\010\173" +
    "\001\002\000\166\011\ufff4\012\075\015\022\016\024\017" +
    "\040\020\106\021\065\022\120\023\113\024\036\025\107" +
    "\026\110\027\032\030\033\031\077\032\067\033\116\034" +
    "\074\035\100\036\112\037\070\107\105\110\057\114\064" +
    "\115\044\116\115\123\072\124\063\125\114\126\050\127" +
    "\056\130\042\131\051\132\104\133\047\134\054\135\073" +
    "\136\034\137\027\140\021\141\061\142\117\143\076\144" +
    "\121\145\122\146\060\147\043\150\052\151\035\152\041" +
    "\153\030\154\031\155\102\156\023\157\037\160\026\161" +
    "\062\162\055\001\002\000\004\011\175\001\002\000\006" +
    "\002\ufffc\007\171\001\002\000\004\002\ufffd\001\002\000" +
    "\004\011\u0253\001\002\000\004\064\201\001\002\000\156" +
    "\015\022\016\024\017\040\020\106\021\065\022\120\023" +
    "\113\024\036\025\107\026\110\027\032\030\033\031\077" +
    "\032\067\033\116\034\074\035\100\036\112\037\070\114" +
    "\064\115\044\116\115\123\072\124\063\125\114\126\050" +
    "\127\056\130\042\131\051\132\104\133\047\134\054\135" +
    "\073\136\034\137\027\140\021\141\061\142\117\143\076" +
    "\144\121\145\122\146\060\147\043\150\052\151\035\152" +
    "\041\153\030\154\031\155\102\156\023\157\037\160\026" +
    "\161\062\162\055\001\002\000\004\117\203\001\002\000" +
    "\006\014\204\065\ufff0\001\002\000\156\015\022\016\024" +
    "\017\040\020\106\021\065\022\120\023\113\024\036\025" +
    "\107\026\110\027\032\030\033\031\077\032\067\033\116" +
    "\034\074\035\100\036\112\037\070\114\064\115\044\116" +
    "\115\123\072\124\063\125\114\126\050\127\056\130\042" +
    "\131\051\132\104\133\047\134\054\135\073\136\034\137" +
    "\027\140\021\141\061\142\117\143\076\144\121\145\122" +
    "\146\060\147\043\150\052\151\035\152\041\153\030\154" +
    "\031\155\102\156\023\157\037\160\026\161\062\162\055" +
    "\001\002\000\004\065\206\001\002\000\016\010\uffeb\042" +
    "\207\043\211\111\213\112\212\113\uffeb\001\002\000\006" +
    "\010\uffed\113\uffed\001\002\000\006\010\uffe9\113\215\001" +
    "\002\000\006\010\uffee\113\uffee\001\002\000\006\010\uffec" +
    "\113\uffec\001\002\000\006\010\uffef\113\uffef\001\002\000" +
    "\004\010\222\001\002\000\004\064\216\001\002\000\156" +
    "\015\022\016\024\017\040\020\106\021\065\022\120\023" +
    "\113\024\036\025\107\026\110\027\032\030\033\031\077" +
    "\032\067\033\116\034\074\035\100\036\112\037\070\114" +
    "\064\115\044\116\115\123\072\124\063\125\114\126\050" +
    "\127\056\130\042\131\051\132\104\133\047\134\054\135" +
    "\073\136\034\137\027\140\021\141\061\142\117\143\076" +
    "\144\121\145\122\146\060\147\043\150\052\151\035\152" +
    "\041\153\030\154\031\155\102\156\023\157\037\160\026" +
    "\161\062\162\055\001\002\000\004\117\220\001\002\000" +
    "\004\065\221\001\002\000\004\010\uffea\001\002\000\210" +
    "\015\022\016\024\017\040\020\106\021\065\022\120\023" +
    "\113\024\036\025\107\026\110\027\032\030\033\031\077" +
    "\032\067\033\116\034\074\035\100\036\112\037\070\045" +
    "\240\046\231\064\234\074\251\075\252\076\uffe7\101\227" +
    "\102\232\103\246\114\064\115\044\116\115\117\224\120" +
    "\244\121\230\122\253\123\072\124\063\125\114\126\050" +
    "\127\056\130\042\131\051\132\104\133\047\134\054\135" +
    "\073\136\034\137\027\140\021\141\061\142\117\143\076" +
    "\144\121\145\122\146\060\147\043\150\052\151\035\152" +
    "\041\153\030\154\031\155\102\156\023\157\037\160\026" +
    "\161\062\162\055\001\002\000\004\013\u024f\001\002\000" +
    "\054\013\uff87\044\uffe4\047\uff87\050\uff87\051\uff87\052\uff87" +
    "\053\uff87\054\uff87\055\uff87\056\uff87\060\uff87\061\uff87\062" +
    "\uff87\063\uff87\064\uff87\066\uff87\067\uff87\070\uff87\071\uff87" +
    "\072\uff87\073\uff87\001\002\000\004\076\u0245\001\002\000" +
    "\210\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1" +
    "\045\uffd1\046\uffd1\064\uffd1\074\uffd1\075\uffd1\076\uffd1\101" +
    "\uffd1\102\uffd1\103\uffd1\114\uffd1\115\uffd1\116\uffd1\117\uffd1" +
    "\120\uffd1\121\uffd1\122\uffd1\123\uffd1\124\uffd1\125\uffd1\126" +
    "\uffd1\127\uffd1\130\uffd1\131\uffd1\132\uffd1\133\uffd1\134\uffd1" +
    "\135\uffd1\136\uffd1\137\uffd1\140\uffd1\141\uffd1\142\uffd1\143" +
    "\uffd1\144\uffd1\145\uffd1\146\uffd1\147\uffd1\150\uffd1\151\uffd1" +
    "\152\uffd1\153\uffd1\154\uffd1\155\uffd1\156\uffd1\157\uffd1\160" +
    "\uffd1\161\uffd1\162\uffd1\001\002\000\004\064\u023a\001\002" +
    "\000\010\003\uff34\013\uff34\106\uff34\001\002\000\030\003" +
    "\uff3f\013\uff3f\047\277\050\300\051\301\052\276\053\274" +
    "\054\275\055\272\056\302\106\uff3f\001\002\000\004\010" +
    "\u0230\001\002\000\210\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\045\uffe5\046\uffe5\064\uffe5\074\uffe5\075" +
    "\uffe5\076\uffe5\101\uffe5\102\uffe5\103\uffe5\114\uffe5\115\uffe5" +
    "\116\uffe5\117\uffe5\120\uffe5\121\uffe5\122\uffe5\123\uffe5\124" +
    "\uffe5\125\uffe5\126\uffe5\127\uffe5\130\uffe5\131\uffe5\132\uffe5" +
    "\133\uffe5\134\uffe5\135\uffe5\136\uffe5\137\uffe5\140\uffe5\141" +
    "\uffe5\142\uffe5\143\uffe5\144\uffe5\145\uffe5\146\uffe5\147\uffe5" +
    "\150\uffe5\151\uffe5\152\uffe5\153\uffe5\154\uffe5\155\uffe5\156" +
    "\uffe5\157\uffe5\160\uffe5\161\uffe5\162\uffe5\001\002\000\022" +
    "\013\uff9d\045\u013d\046\u013c\074\u0138\117\u013e\120\u0140\121" +
    "\u013f\122\u0139\001\002\000\010\003\uff82\013\uff82\106\uff82" +
    "\001\002\000\012\040\132\042\uff8b\043\uff8b\117\uff8b\001" +
    "\002\000\210\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\045\uffd2\046\uffd2\064\uffd2\074\uffd2\075\uffd2\076" +
    "\uffd2\101\uffd2\102\uffd2\103\uffd2\114\uffd2\115\uffd2\116\uffd2" +
    "\117\uffd2\120\uffd2\121\uffd2\122\uffd2\123\uffd2\124\uffd2\125" +
    "\uffd2\126\uffd2\127\uffd2\130\uffd2\131\uffd2\132\uffd2\133\uffd2" +
    "\134\uffd2\135\uffd2\136\uffd2\137\uffd2\140\uffd2\141\uffd2\142" +
    "\uffd2\143\uffd2\144\uffd2\145\uffd2\146\uffd2\147\uffd2\150\uffd2" +
    "\151\uffd2\152\uffd2\153\uffd2\154\uffd2\155\uffd2\156\uffd2\157" +
    "\uffd2\160\uffd2\161\uffd2\162\uffd2\001\002\000\030\003\uff3f" +
    "\013\uff3f\047\277\050\300\051\301\052\276\053\274\054" +
    "\275\055\272\056\302\106\uff3f\001\002\000\010\003\uff84" +
    "\013\uff84\106\uff84\001\002\000\210\015\022\016\024\017" +
    "\040\020\106\021\065\022\120\023\113\024\036\025\107" +
    "\026\110\027\032\030\033\031\077\032\067\033\116\034" +
    "\074\035\100\036\112\037\070\045\240\046\231\064\234" +
    "\074\251\075\252\076\uffe7\101\227\102\232\103\246\114" +
    "\064\115\044\116\115\117\224\120\244\121\230\122\253" +
    "\123\072\124\063\125\114\126\050\127\056\130\042\131" +
    "\051\132\104\133\047\134\054\135\073\136\034\137\027" +
    "\140\021\141\061\142\117\143\076\144\121\145\122\146" +
    "\060\147\043\150\052\151\035\152\041\153\030\154\031" +
    "\155\102\156\023\157\037\160\026\161\062\162\055\001" +
    "\002\000\010\003\uff83\013\uff83\106\uff83\001\002\000\034" +
    "\003\uff7d\013\uff7d\060\uff7f\061\uff7f\062\uff7f\063\uff7f\065" +
    "\uff7f\066\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\106\uff7d" +
    "\001\002\000\210\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\045\uffd3\046\uffd3\064\uffd3\074\uffd3\075\uffd3" +
    "\076\uffd3\101\uffd3\102\uffd3\103\uffd3\114\uffd3\115\uffd3\116" +
    "\uffd3\117\uffd3\120\uffd3\121\uffd3\122\uffd3\123\uffd3\124\uffd3" +
    "\125\uffd3\126\uffd3\127\uffd3\130\uffd3\131\uffd3\132\uffd3\133" +
    "\uffd3\134\uffd3\135\uffd3\136\uffd3\137\uffd3\140\uffd3\141\uffd3" +
    "\142\uffd3\143\uffd3\144\uffd3\145\uffd3\146\uffd3\147\uffd3\150" +
    "\uffd3\151\uffd3\152\uffd3\153\uffd3\154\uffd3\155\uffd3\156\uffd3" +
    "\157\uffd3\160\uffd3\161\uffd3\162\uffd3\001\002\000\006\003" +
    "\u01fe\064\uffc8\001\002\000\210\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\045\uffdf\046\uffdf\064\uffdf\074" +
    "\uffdf\075\uffdf\076\uffdf\101\uffdf\102\uffdf\103\uffdf\114\uffdf" +
    "\115\uffdf\116\uffdf\117\uffdf\120\uffdf\121\uffdf\122\uffdf\123" +
    "\uffdf\124\uffdf\125\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf" +
    "\132\uffdf\133\uffdf\134\uffdf\135\uffdf\136\uffdf\137\uffdf\140" +
    "\uffdf\141\uffdf\142\uffdf\143\uffdf\144\uffdf\145\uffdf\146\uffdf" +
    "\147\uffdf\150\uffdf\151\uffdf\152\uffdf\153\uffdf\154\uffdf\155" +
    "\uffdf\156\uffdf\157\uffdf\160\uffdf\161\uffdf\162\uffdf\001\002" +
    "\000\210\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\045\uffd0\046\uffd0\064\uffd0\074\uffd0\075\uffd0\076\uffd0" +
    "\101\uffd0\102\uffd0\103\uffd0\114\uffd0\115\uffd0\116\uffd0\117" +
    "\uffd0\120\uffd0\121\uffd0\122\uffd0\123\uffd0\124\uffd0\125\uffd0" +
    "\126\uffd0\127\uffd0\130\uffd0\131\uffd0\132\uffd0\133\uffd0\134" +
    "\uffd0\135\uffd0\136\uffd0\137\uffd0\140\uffd0\141\uffd0\142\uffd0" +
    "\143\uffd0\144\uffd0\145\uffd0\146\uffd0\147\uffd0\150\uffd0\151" +
    "\uffd0\152\uffd0\153\uffd0\154\uffd0\155\uffd0\156\uffd0\157\uffd0" +
    "\160\uffd0\161\uffd0\162\uffd0\001\002\000\004\073\u01f2\001" +
    "\002\000\006\003\255\064\uffcf\001\002\000\010\003\uff33" +
    "\013\uff33\106\uff33\001\002\000\004\064\257\001\002\000" +
    "\004\011\256\001\002\000\210\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\045\uffcb\046\uffcb\064\uffcb\074" +
    "\uffcb\075\uffcb\076\uffcb\101\uffcb\102\uffcb\103\uffcb\114\uffcb" +
    "\115\uffcb\116\uffcb\117\uffcb\120\uffcb\121\uffcb\122\uffcb\123" +
    "\uffcb\124\uffcb\125\uffcb\126\uffcb\127\uffcb\130\uffcb\131\uffcb" +
    "\132\uffcb\133\uffcb\134\uffcb\135\uffcb\136\uffcb\137\uffcb\140" +
    "\uffcb\141\uffcb\142\uffcb\143\uffcb\144\uffcb\145\uffcb\146\uffcb" +
    "\147\uffcb\150\uffcb\151\uffcb\152\uffcb\153\uffcb\154\uffcb\155" +
    "\uffcb\156\uffcb\157\uffcb\160\uffcb\161\uffcb\162\uffcb\001\002" +
    "\000\014\045\uff35\046\uff35\057\262\117\uff35\120\uff35\001" +
    "\002\000\004\065\uffce\001\002\000\012\045\267\046\263" +
    "\117\265\120\264\001\002\000\012\045\uff36\046\uff36\117" +
    "\uff36\120\uff36\001\002\000\032\003\uff47\013\uff47\047\uff47" +
    "\050\uff47\051\uff47\052\uff47\053\uff47\054\uff47\055\uff47\056" +
    "\uff47\065\uff47\106\uff47\001\002\000\032\003\uff43\013\uff43" +
    "\047\uff43\050\uff43\051\uff43\052\uff43\053\uff43\054\uff43\055" +
    "\uff43\056\uff43\065\uff43\106\uff43\001\002\000\032\003\uff45" +
    "\013\uff45\047\uff45\050\uff45\051\uff45\052\uff45\053\uff45\054" +
    "\uff45\055\uff45\056\uff45\065\uff45\106\uff45\001\002\000\012" +
    "\003\uff4a\013\uff4a\065\uff4a\106\uff4a\001\002\000\032\003" +
    "\uff49\013\uff49\047\uff49\050\uff49\051\uff49\052\uff49\053\uff49" +
    "\054\uff49\055\uff49\056\uff49\065\uff49\106\uff49\001\002\000" +
    "\032\003\uff3f\013\uff3f\047\277\050\300\051\301\052\276" +
    "\053\274\054\275\055\272\056\302\065\uff3f\106\uff3f\001" +
    "\002\000\012\003\uff48\013\uff48\065\uff48\106\uff48\001\002" +
    "\000\014\045\uff38\046\uff38\057\uff38\117\uff38\120\uff38\001" +
    "\002\000\014\045\uff41\046\uff41\057\uff41\117\uff41\120\uff41" +
    "\001\002\000\014\045\uff3a\046\uff3a\057\uff3a\117\uff3a\120" +
    "\uff3a\001\002\000\014\045\uff39\046\uff39\057\uff39\117\uff39" +
    "\120\uff39\001\002\000\014\045\uff3b\046\uff3b\057\uff3b\117" +
    "\uff3b\120\uff3b\001\002\000\014\045\uff3e\046\uff3e\057\uff3e" +
    "\117\uff3e\120\uff3e\001\002\000\014\045\uff3d\046\uff3d\057" +
    "\uff3d\117\uff3d\120\uff3d\001\002\000\014\045\uff3c\046\uff3c" +
    "\057\uff3c\117\uff3c\120\uff3c\001\002\000\014\045\uff37\046" +
    "\uff37\057\uff37\117\uff37\120\uff37\001\002\000\014\045\uff35" +
    "\046\uff35\057\262\117\uff35\120\uff35\001\002\000\012\003" +
    "\uff40\013\uff40\065\uff40\106\uff40\001\002\000\032\003\uff3f" +
    "\013\uff3f\047\277\050\300\051\301\052\276\053\274\054" +
    "\275\055\272\056\302\065\uff3f\106\uff3f\001\002\000\012" +
    "\003\uff44\013\uff44\065\uff44\106\uff44\001\002\000\032\003" +
    "\uff3f\013\uff3f\047\277\050\300\051\301\052\276\053\274" +
    "\054\275\055\272\056\302\065\uff3f\106\uff3f\001\002\000" +
    "\012\003\uff42\013\uff42\065\uff42\106\uff42\001\002\000\032" +
    "\003\uff3f\013\uff3f\047\277\050\300\051\301\052\276\053" +
    "\274\054\275\055\272\056\302\065\uff3f\106\uff3f\001\002" +
    "\000\012\003\uff46\013\uff46\065\uff46\106\uff46\001\002\000" +
    "\004\065\314\001\002\000\004\010\uffcd\001\002\000\004" +
    "\010\316\001\002\000\024\074\317\075\324\076\331\077" +
    "\325\100\320\101\330\102\322\103\326\117\323\001\002" +
    "\000\004\073\u01ed\001\002\000\004\013\u01ec\001\002\000" +
    "\026\011\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2" +
    "\101\uffb2\102\uffb2\103\uffb2\117\uffb2\001\002\000\004\010" +
    "\u01e3\001\002\000\010\044\uffba\064\uffba\073\uffba\001\002" +
    "\000\004\064\uffb7\001\002\000\004\013\u01bc\001\002\000" +
    "\004\064\uffa9\001\002\000\026\011\uffbb\074\317\075\324" +
    "\076\331\077\325\100\320\101\330\102\322\103\326\117" +
    "\323\001\002\000\004\064\333\001\002\000\004\013\332" +
    "\001\002\000\026\011\uffb1\074\uffb1\075\uffb1\076\uffb1\077" +
    "\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1\117\uffb1\001\002" +
    "\000\004\117\334\001\002\000\004\044\u0125\001\002\000" +
    "\004\013\336\001\002\000\014\045\uff35\046\uff35\057\262" +
    "\117\uff35\120\uff35\001\002\000\004\013\340\001\002\000" +
    "\014\074\341\117\345\120\342\121\350\122\346\001\002" +
    "\000\004\073\u011d\001\002\000\026\060\374\061\366\062" +
    "\362\063\373\065\uff1b\066\364\067\363\070\360\071\371" +
    "\072\372\001\002\000\004\065\uff2f\001\002\000\004\065" +
    "\uff30\001\002\000\032\044\376\060\374\061\366\062\362" +
    "\063\373\064\375\066\364\067\363\070\360\071\371\072" +
    "\372\073\367\001\002\000\004\065\uff0e\001\002\000\004" +
    "\065\351\001\002\000\004\065\uff0f\001\002\000\004\010" +
    "\352\001\002\000\024\074\317\075\324\076\331\077\325" +
    "\100\320\101\330\102\322\103\326\117\323\001\002\000" +
    "\026\011\uffbb\074\317\075\324\076\331\077\325\100\320" +
    "\101\330\102\322\103\326\117\323\001\002\000\026\011" +
    "\uffbb\074\317\075\324\076\331\077\325\100\320\101\330" +
    "\102\322\103\326\117\323\001\002\000\004\011\356\001" +
    "\002\000\026\011\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4" +
    "\100\uffb4\101\uffb4\102\uffb4\103\uffb4\117\uffb4\001\002\000" +
    "\004\011\uffbc\001\002\000\010\074\uff12\117\uff12\120\uff12" +
    "\001\002\000\004\065\uff32\001\002\000\010\074\uff16\117" +
    "\uff16\120\uff16\001\002\000\010\074\uff13\117\uff13\120\uff13" +
    "\001\002\000\010\074\uff14\117\uff14\120\uff14\001\002\000" +
    "\010\074\u0100\117\u0102\120\377\001\002\000\010\074\uff17" +
    "\117\uff17\120\uff17\001\002\000\004\117\u0119\001\002\000" +
    "\004\065\uff2c\001\002\000\010\074\uff11\117\uff11\120\uff11" +
    "\001\002\000\010\074\uff10\117\uff10\120\uff10\001\002\000" +
    "\010\074\uff15\117\uff15\120\uff15\001\002\000\010\074\uff18" +
    "\117\uff18\120\uff18\001\002\000\010\065\u0111\074\u010f\117" +
    "\u0110\001\002\000\010\074\u0100\117\u0102\120\377\001\002" +
    "\000\026\060\374\061\366\062\362\063\373\065\uff1b\066" +
    "\364\067\363\070\360\071\371\072\372\001\002\000\004" +
    "\073\u0109\001\002\000\004\065\uff29\001\002\000\030\060" +
    "\uff19\061\uff19\062\uff19\063\uff19\065\uff19\066\uff19\067\uff19" +
    "\070\uff19\071\uff19\072\uff19\073\u0103\001\002\000\004\117" +
    "\u0108\001\002\000\026\060\374\061\366\062\362\063\373" +
    "\065\uff1b\066\364\067\363\070\360\071\371\072\372\001" +
    "\002\000\010\074\u0100\117\u0102\120\377\001\002\000\004" +
    "\065\uff1e\001\002\000\004\065\uff1c\001\002\000\026\060" +
    "\uff1a\061\uff1a\062\uff1a\063\uff1a\065\uff1a\066\uff1a\067\uff1a" +
    "\070\uff1a\071\uff1a\072\uff1a\001\002\000\004\117\u010a\001" +
    "\002\000\030\060\uff19\061\uff19\062\uff19\063\uff19\065\uff19" +
    "\066\uff19\067\uff19\070\uff19\071\uff19\072\uff19\073\u0103\001" +
    "\002\000\026\060\374\061\366\062\362\063\373\065\uff1b" +
    "\066\364\067\363\070\360\071\371\072\372\001\002\000" +
    "\004\065\uff1d\001\002\000\004\065\uff1f\001\002\000\004" +
    "\065\uff2b\001\002\000\004\073\u0116\001\002\000\006\014" +
    "\u0112\065\u0114\001\002\000\004\065\uff22\001\002\000\010" +
    "\065\u0111\074\u010f\117\u0110\001\002\000\004\065\uff24\001" +
    "\002\000\004\065\uff20\001\002\000\004\065\uff21\001\002" +
    "\000\004\117\u0117\001\002\000\006\014\u0112\065\u0114\001" +
    "\002\000\004\065\uff23\001\002\000\030\044\376\060\374" +
    "\061\366\062\362\063\373\064\375\066\364\067\363\070" +
    "\360\071\371\072\372\001\002\000\004\065\uff2d\001\002" +
    "\000\004\065\uff2a\001\002\000\004\065\uff2e\001\002\000" +
    "\004\117\u011f\001\002\000\004\065\uff31\001\002\000\030" +
    "\060\374\061\366\062\362\063\373\064\u0122\065\uff25\066" +
    "\364\067\363\070\360\071\371\072\372\001\002\000\010" +
    "\074\u0100\117\u0102\120\377\001\002\000\004\065\uff28\001" +
    "\002\000\010\065\u0111\074\u010f\117\u0110\001\002\000\004" +
    "\065\uff27\001\002\000\004\065\uff26\001\002\000\020\045" +
    "\240\046\231\074\251\117\u0126\120\244\121\230\122\253" +
    "\001\002\000\056\003\uff87\013\uff87\047\uff87\050\uff87\051" +
    "\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87\060\uff87" +
    "\061\uff87\062\uff87\063\uff87\064\uff87\066\uff87\067\uff87\070" +
    "\uff87\071\uff87\072\uff87\073\uff87\106\uff87\001\002\000\004" +
    "\013\uff9f\001\002\000\056\003\uff76\013\uff76\047\277\050" +
    "\300\051\301\052\276\053\274\054\275\055\272\056\302" +
    "\060\u0137\061\u012f\062\u0132\063\u012c\064\u0136\066\u012b\067" +
    "\u0135\070\u012d\071\u0129\072\u0131\073\u0130\106\uff76\001\002" +
    "\000\014\064\uff4c\065\uff4c\074\uff4c\117\uff4c\120\uff4c\001" +
    "\002\000\014\045\uff35\046\uff35\057\262\117\uff35\120\uff35" +
    "\001\002\000\014\064\uff4f\065\uff4f\074\uff4f\117\uff4f\120" +
    "\uff4f\001\002\000\014\064\uff50\065\uff50\074\uff50\117\uff50" +
    "\120\uff50\001\002\000\014\064\uff4d\065\uff4d\074\uff4d\117" +
    "\uff4d\120\uff4d\001\002\000\014\064\uff79\065\uff79\074\uff79" +
    "\117\uff79\120\uff79\001\002\000\014\064\uff52\065\uff52\074" +
    "\uff52\117\uff52\120\uff52\001\002\000\004\117\u0186\001\002" +
    "\000\014\064\uff4b\065\uff4b\074\uff4b\117\uff4b\120\uff4b\001" +
    "\002\000\014\064\uff51\065\uff51\074\uff51\117\uff51\120\uff51" +
    "\001\002\000\010\003\uff86\013\uff86\106\uff86\001\002\000" +
    "\010\003\uff7b\013\uff7b\106\uff7b\001\002\000\014\064\uff4e" +
    "\065\uff4e\074\uff4e\117\uff4e\120\uff4e\001\002\000\022\045" +
    "\u013d\046\u013c\065\u0144\074\u0138\117\u013e\120\u0140\121\u013f" +
    "\122\u0139\001\002\000\014\064\uff53\065\uff53\074\uff53\117" +
    "\uff53\120\uff53\001\002\000\004\073\u017c\001\002\000\026" +
    "\013\ufef9\014\ufef9\045\ufef9\046\ufef9\065\ufef9\074\ufef9\117" +
    "\ufef9\120\ufef9\121\ufef9\122\ufef9\001\002\000\026\013\uff0a" +
    "\014\uff0a\045\uff0a\046\uff0a\065\uff0a\074\uff0a\117\uff0a\120" +
    "\uff0a\121\uff0a\122\uff0a\001\002\000\006\014\u0178\065\u0179" +
    "\001\002\000\070\013\ufef0\014\ufef0\045\ufef0\046\ufef0\047" +
    "\u0149\050\u0145\051\u0157\052\u014d\053\u0150\054\u0156\055\u0147" +
    "\056\u0154\060\u0155\061\u014f\062\u0152\063\u014a\065\ufef0\066" +
    "\u014b\067\u0153\070\u014c\071\u0146\072\u0151\074\ufef0\117\ufef0" +
    "\120\ufef0\121\ufef0\122\ufef0\001\002\000\070\013\ufef0\014" +
    "\ufef0\045\ufef0\046\ufef0\047\u0149\050\u0145\051\u0157\052\u014d" +
    "\053\u0150\054\u0156\055\u0147\056\u0154\060\u0155\061\u014f\062" +
    "\u0152\063\u014a\065\ufef0\066\u014b\067\u0153\070\u014c\071\u0146" +
    "\072\u0151\074\ufef0\117\ufef0\120\ufef0\121\ufef0\122\ufef0\001" +
    "\002\000\074\013\uff00\014\uff00\045\uff00\046\uff00\047\u0149" +
    "\050\u0145\051\u0157\052\u014d\053\u0150\054\u0156\055\u0147\056" +
    "\u0154\060\u0155\061\u014f\062\u0152\063\u014a\064\u0170\065\uff00" +
    "\066\u014b\067\u0153\070\u014c\071\u0146\072\u0151\073\u016f\074" +
    "\uff00\117\uff00\120\uff00\121\uff00\122\uff00\001\002\000\026" +
    "\013\ufefa\014\ufefa\045\ufefa\046\ufefa\065\ufefa\074\ufefa\117" +
    "\ufefa\120\ufefa\121\ufefa\122\ufefa\001\002\000\070\013\ufef0" +
    "\014\ufef0\045\ufef0\046\ufef0\047\u0149\050\u0145\051\u0157\052" +
    "\u014d\053\u0150\054\u0156\055\u0147\056\u0154\060\u0155\061\u014f" +
    "\062\u0152\063\u014a\065\ufef0\066\u014b\067\u0153\070\u014c\071" +
    "\u0146\072\u0151\074\ufef0\117\ufef0\120\ufef0\121\ufef0\122\ufef0" +
    "\001\002\000\026\013\uff0b\014\uff0b\045\uff0b\046\uff0b\065" +
    "\uff0b\074\uff0b\117\uff0b\120\uff0b\121\uff0b\122\uff0b\001\002" +
    "\000\010\003\uff7a\013\uff7a\106\uff7a\001\002\000\026\013" +
    "\uff09\014\uff09\045\uff09\046\uff09\065\uff09\074\uff09\117\uff09" +
    "\120\uff09\121\uff09\122\uff09\001\002\000\010\003\uff6e\013" +
    "\uff6e\106\uff6e\001\002\000\016\045\ufeee\046\ufeee\057\ufeee" +
    "\074\ufeee\117\ufeee\120\ufeee\001\002\000\016\045\ufee0\046" +
    "\ufee0\057\ufee0\074\ufee0\117\ufee0\120\ufee0\001\002\000\016" +
    "\045\ufee9\046\ufee9\057\ufee9\074\ufee9\117\ufee9\120\ufee9\001" +
    "\002\000\026\013\uff06\014\uff06\045\uff06\046\uff06\065\uff06" +
    "\074\uff06\117\uff06\120\uff06\121\uff06\122\uff06\001\002\000" +
    "\016\045\ufeef\046\ufeef\057\ufeef\074\ufeef\117\ufeef\120\ufeef" +
    "\001\002\000\016\045\ufee4\046\ufee4\057\ufee4\074\ufee4\117" +
    "\ufee4\120\ufee4\001\002\000\016\045\ufee3\046\ufee3\057\ufee3" +
    "\074\ufee3\117\ufee3\120\ufee3\001\002\000\016\045\ufee1\046" +
    "\ufee1\057\ufee1\074\ufee1\117\ufee1\120\ufee1\001\002\000\016" +
    "\045\ufeec\046\ufeec\057\ufeec\074\ufeec\117\ufeec\120\ufeec\001" +
    "\002\000\016\045\u015e\046\u0158\057\u015d\074\u0159\117\u015c" +
    "\120\u015a\001\002\000\016\045\ufee6\046\ufee6\057\ufee6\074" +
    "\ufee6\117\ufee6\120\ufee6\001\002\000\016\045\ufeeb\046\ufeeb" +
    "\057\ufeeb\074\ufeeb\117\ufeeb\120\ufeeb\001\002\000\016\045" +
    "\ufedf\046\ufedf\057\ufedf\074\ufedf\117\ufedf\120\ufedf\001\002" +
    "\000\016\045\ufee5\046\ufee5\057\ufee5\074\ufee5\117\ufee5\120" +
    "\ufee5\001\002\000\016\045\ufee2\046\ufee2\057\ufee2\074\ufee2" +
    "\117\ufee2\120\ufee2\001\002\000\016\045\ufee8\046\ufee8\057" +
    "\ufee8\074\ufee8\117\ufee8\120\ufee8\001\002\000\016\045\ufee7" +
    "\046\ufee7\057\ufee7\074\ufee7\117\ufee7\120\ufee7\001\002\000" +
    "\016\045\ufeea\046\ufeea\057\ufeea\074\ufeea\117\ufeea\120\ufeea" +
    "\001\002\000\016\045\ufeed\046\ufeed\057\ufeed\074\ufeed\117" +
    "\ufeed\120\ufeed\001\002\000\070\013\ufef0\014\ufef0\045\ufef0" +
    "\046\ufef0\047\u0149\050\u0145\051\u0157\052\u014d\053\u0150\054" +
    "\u0156\055\u0147\056\u0154\060\u0155\061\u014f\062\u0152\063\u014a" +
    "\065\ufef0\066\u014b\067\u0153\070\u014c\071\u0146\072\u0151\074" +
    "\ufef0\117\ufef0\120\ufef0\121\ufef0\122\ufef0\001\002\000\004" +
    "\073\u0167\001\002\000\070\013\ufef0\014\ufef0\045\ufef0\046" +
    "\ufef0\047\u0149\050\u0145\051\u0157\052\u014d\053\u0150\054\u0156" +
    "\055\u0147\056\u0154\060\u0155\061\u014f\062\u0152\063\u014a\065" +
    "\ufef0\066\u014b\067\u0153\070\u014c\071\u0146\072\u0151\074\ufef0" +
    "\117\ufef0\120\ufef0\121\ufef0\122\ufef0\001\002\000\026\013" +
    "\ufef1\014\ufef1\045\ufef1\046\ufef1\065\ufef1\074\ufef1\117\ufef1" +
    "\120\ufef1\121\ufef1\122\ufef1\001\002\000\072\013\ufedd\014" +
    "\ufedd\045\ufedd\046\ufedd\047\ufedd\050\ufedd\051\ufedd\052\ufedd" +
    "\053\ufedd\054\ufedd\055\ufedd\056\ufedd\060\ufedd\061\ufedd\062" +
    "\ufedd\063\ufedd\065\ufedd\066\ufedd\067\ufedd\070\ufedd\071\ufedd" +
    "\072\ufedd\073\u0162\074\ufedd\117\ufedd\120\ufedd\121\ufedd\122" +
    "\ufedd\001\002\000\006\074\u0159\117\u015c\001\002\000\070" +
    "\013\ufef0\014\ufef0\045\ufef0\046\ufef0\047\u0149\050\u0145\051" +
    "\u0157\052\u014d\053\u0150\054\u0156\055\u0147\056\u0154\060\u0155" +
    "\061\u014f\062\u0152\063\u014a\065\ufef0\066\u014b\067\u0153\070" +
    "\u014c\071\u0146\072\u0151\074\ufef0\117\ufef0\120\ufef0\121\ufef0" +
    "\122\ufef0\001\002\000\026\013\ufef7\014\ufef7\045\ufef7\046" +
    "\ufef7\065\ufef7\074\ufef7\117\ufef7\120\ufef7\121\ufef7\122\ufef7" +
    "\001\002\000\026\013\ufef6\014\ufef6\045\ufef6\046\ufef6\065" +
    "\ufef6\074\ufef6\117\ufef6\120\ufef6\121\ufef6\122\ufef6\001\002" +
    "\000\026\013\ufef8\014\ufef8\045\ufef8\046\ufef8\065\ufef8\074" +
    "\ufef8\117\ufef8\120\ufef8\121\ufef8\122\ufef8\001\002\000\004" +
    "\117\u0165\001\002\000\070\013\ufef0\014\ufef0\045\ufef0\046" +
    "\ufef0\047\u0149\050\u0145\051\u0157\052\u014d\053\u0150\054\u0156" +
    "\055\u0147\056\u0154\060\u0155\061\u014f\062\u0152\063\u014a\065" +
    "\ufef0\066\u014b\067\u0153\070\u014c\071\u0146\072\u0151\074\ufef0" +
    "\117\ufef0\120\ufef0\121\ufef0\122\ufef0\001\002\000\026\013" +
    "\ufef3\014\ufef3\045\ufef3\046\ufef3\065\ufef3\074\ufef3\117\ufef3" +
    "\120\ufef3\121\ufef3\122\ufef3\001\002\000\070\013\ufede\014" +
    "\ufede\045\ufede\046\ufede\047\ufede\050\ufede\051\ufede\052\ufede" +
    "\053\ufede\054\ufede\055\ufede\056\ufede\060\ufede\061\ufede\062" +
    "\ufede\063\ufede\065\ufede\066\ufede\067\ufede\070\ufede\071\ufede" +
    "\072\ufede\074\ufede\117\ufede\120\ufede\121\ufede\122\ufede\001" +
    "\002\000\026\013\ufef4\014\ufef4\045\ufef4\046\ufef4\065\ufef4" +
    "\074\ufef4\117\ufef4\120\ufef4\121\ufef4\122\ufef4\001\002\000" +
    "\004\117\u0168\001\002\000\070\013\ufef0\014\ufef0\045\ufef0" +
    "\046\ufef0\047\u0149\050\u0145\051\u0157\052\u014d\053\u0150\054" +
    "\u0156\055\u0147\056\u0154\060\u0155\061\u014f\062\u0152\063\u014a" +
    "\065\ufef0\066\u014b\067\u0153\070\u014c\071\u0146\072\u0151\074" +
    "\ufef0\117\ufef0\120\ufef0\121\ufef0\122\ufef0\001\002\000\026" +
    "\013\ufef2\014\ufef2\045\ufef2\046\ufef2\065\ufef2\074\ufef2\117" +
    "\ufef2\120\ufef2\121\ufef2\122\ufef2\001\002\000\026\013\ufef5" +
    "\014\ufef5\045\ufef5\046\ufef5\065\ufef5\074\ufef5\117\ufef5\120" +
    "\ufef5\121\ufef5\122\ufef5\001\002\000\026\013\uff04\014\uff04" +
    "\045\uff04\046\uff04\065\uff04\074\uff04\117\uff04\120\uff04\121" +
    "\uff04\122\uff04\001\002\000\026\013\uff0d\014\uff0d\045\uff0d" +
    "\046\uff0d\065\uff0d\074\uff0d\117\uff0d\120\uff0d\121\uff0d\122" +
    "\uff0d\001\002\000\016\045\u015e\046\u0158\057\u015d\074\u0159" +
    "\117\u015c\120\u015a\001\002\000\016\045\u015e\046\u0158\057" +
    "\u015d\074\u0159\117\u015c\120\u015a\001\002\000\004\117\u0172" +
    "\001\002\000\016\045\u015e\046\u0158\057\u015d\074\u0159\117" +
    "\u015c\120\u015a\001\002\000\026\013\uff03\014\uff03\045\uff03" +
    "\046\uff03\065\uff03\074\uff03\117\uff03\120\uff03\121\uff03\122" +
    "\uff03\001\002\000\072\013\uff00\014\uff00\045\uff00\046\uff00" +
    "\047\u0149\050\u0145\051\u0157\052\u014d\053\u0150\054\u0156\055" +
    "\u0147\056\u0154\060\u0155\061\u014f\062\u0152\063\u014a\064\u0170" +
    "\065\uff00\066\u014b\067\u0153\070\u014c\071\u0146\072\u0151\074" +
    "\uff00\117\uff00\120\uff00\121\uff00\122\uff00\001\002\000\026" +
    "\013\uff05\014\uff05\045\uff05\046\uff05\065\uff05\074\uff05\117" +
    "\uff05\120\uff05\121\uff05\122\uff05\001\002\000\026\013\uff01" +
    "\014\uff01\045\uff01\046\uff01\065\uff01\074\uff01\117\uff01\120" +
    "\uff01\121\uff01\122\uff01\001\002\000\026\013\uff02\014\uff02" +
    "\045\uff02\046\uff02\065\uff02\074\uff02\117\uff02\120\uff02\121" +
    "\uff02\122\uff02\001\002\000\026\013\uff08\014\uff08\045\uff08" +
    "\046\uff08\065\uff08\074\uff08\117\uff08\120\uff08\121\uff08\122" +
    "\uff08\001\002\000\026\013\uff07\014\uff07\045\uff07\046\uff07" +
    "\065\uff07\074\uff07\117\uff07\120\uff07\121\uff07\122\uff07\001" +
    "\002\000\022\045\u013d\046\u013c\065\u0144\074\u0138\117\u013e" +
    "\120\u0140\121\u013f\122\u0139\001\002\000\010\003\uff6c\013" +
    "\uff6c\106\uff6c\001\002\000\010\003\uff6f\013\uff6f\106\uff6f" +
    "\001\002\000\010\003\uff6d\013\uff6d\106\uff6d\001\002\000" +
    "\004\117\u017e\001\002\000\026\013\uff0c\014\uff0c\045\uff0c" +
    "\046\uff0c\065\uff0c\074\uff0c\117\uff0c\120\uff0c\121\uff0c\122" +
    "\uff0c\001\002\000\072\013\ufefb\014\ufefb\045\ufefb\046\ufefb" +
    "\047\u0149\050\u0145\051\u0157\052\u014d\053\u0150\054\u0156\055" +
    "\u0147\056\u0154\060\u0155\061\u014f\062\u0152\063\u014a\064\u0182" +
    "\065\ufefb\066\u014b\067\u0153\070\u014c\071\u0146\072\u0151\074" +
    "\ufefb\117\ufefb\120\ufefb\121\ufefb\122\ufefb\001\002\000\026" +
    "\013\ufeff\014\ufeff\045\ufeff\046\ufeff\065\ufeff\074\ufeff\117" +
    "\ufeff\120\ufeff\121\ufeff\122\ufeff\001\002\000\016\045\u015e" +
    "\046\u0158\057\u015d\074\u0159\117\u015c\120\u015a\001\002\000" +
    "\016\045\u015e\046\u0158\057\u015d\074\u0159\117\u015c\120\u015a" +
    "\001\002\000\016\045\u015e\046\u0158\057\u015d\074\u0159\117" +
    "\u015c\120\u015a\001\002\000\026\013\ufefe\014\ufefe\045\ufefe" +
    "\046\ufefe\065\ufefe\074\ufefe\117\ufefe\120\ufefe\121\ufefe\122" +
    "\ufefe\001\002\000\026\013\ufefc\014\ufefc\045\ufefc\046\ufefc" +
    "\065\ufefc\074\ufefc\117\ufefc\120\ufefc\121\ufefc\122\ufefc\001" +
    "\002\000\026\013\ufefd\014\ufefd\045\ufefd\046\ufefd\065\ufefd" +
    "\074\ufefd\117\ufefd\120\ufefd\121\ufefd\122\ufefd\001\002\000" +
    "\054\003\uff76\013\uff76\047\277\050\300\051\301\052\276" +
    "\053\274\054\275\055\272\056\302\060\u0137\061\u012f\062" +
    "\u0132\063\u012c\064\u0136\066\u012b\067\u0135\070\u012d\071\u0129" +
    "\072\u0131\106\uff76\001\002\000\010\003\uff7c\013\uff7c\106" +
    "\uff7c\001\002\000\014\064\u018a\065\u018b\074\uff5d\117\uff5d" +
    "\120\uff5d\001\002\000\010\074\u018c\117\u018e\120\u018d\001" +
    "\002\000\010\074\uff5e\117\uff5e\120\uff5e\001\002\000\010" +
    "\074\uff5f\117\uff5f\120\uff5f\001\002\000\004\073\u01a5\001" +
    "\002\000\034\003\uff66\013\uff66\060\uff6b\061\uff6b\062\uff6b" +
    "\063\uff6b\065\uff6b\066\uff6b\067\uff6b\070\uff6b\071\uff6b\072" +
    "\uff6b\106\uff66\001\002\000\036\003\uff69\013\uff69\060\uff69" +
    "\061\uff69\062\uff69\063\uff69\064\uff69\065\uff69\066\uff69\067" +
    "\uff69\070\uff69\071\uff69\072\uff69\106\uff69\001\002\000\010" +
    "\003\uff78\013\uff78\106\uff78\001\002\000\036\003\uff63\013" +
    "\uff63\060\u019d\061\u0197\062\u0193\063\u019b\064\u019c\065\u019e" +
    "\066\u0195\067\u0194\070\u0191\071\u0198\072\u0199\106\uff63\001" +
    "\002\000\014\064\uff56\065\uff56\074\uff56\117\uff56\120\uff56" +
    "\001\002\000\014\064\uff62\065\uff62\074\uff62\117\uff62\120" +
    "\uff62\001\002\000\014\064\uff5a\065\uff5a\074\uff5a\117\uff5a" +
    "\120\uff5a\001\002\000\014\064\uff57\065\uff57\074\uff57\117" +
    "\uff57\120\uff57\001\002\000\014\064\uff58\065\uff58\074\uff58" +
    "\117\uff58\120\uff58\001\002\000\010\003\uff68\013\uff68\106" +
    "\uff68\001\002\000\014\064\uff5b\065\uff5b\074\uff5b\117\uff5b" +
    "\120\uff5b\001\002\000\014\064\uff55\065\uff55\074\uff55\117" +
    "\uff55\120\uff55\001\002\000\014\064\uff54\065\uff54\074\uff54" +
    "\117\uff54\120\uff54\001\002\000\010\003\uff64\013\uff64\106" +
    "\uff64\001\002\000\014\064\uff59\065\uff59\074\uff59\117\uff59" +
    "\120\uff59\001\002\000\022\045\u013d\046\u013c\065\u0144\074" +
    "\u0138\117\u013e\120\u0140\121\u013f\122\u0139\001\002\000\014" +
    "\064\uff5c\065\uff5c\074\uff5c\117\uff5c\120\uff5c\001\002\000" +
    "\010\003\uff60\013\uff60\106\uff60\001\002\000\010\003\uff65" +
    "\013\uff65\106\uff65\001\002\000\014\064\u018a\065\u018b\074" +
    "\uff5d\117\uff5d\120\uff5d\001\002\000\010\074\u018c\117\u018e" +
    "\120\u018d\001\002\000\010\003\uff61\013\uff61\106\uff61\001" +
    "\002\000\026\060\u019d\061\u0197\062\u0193\063\u019b\065\u019e" +
    "\066\u0195\067\u0194\070\u0191\071\u0198\072\u0199\001\002\000" +
    "\010\003\uff6a\013\uff6a\106\uff6a\001\002\000\004\117\u01a6" +
    "\001\002\000\036\003\uff63\013\uff63\060\u019d\061\u0197\062" +
    "\u0193\063\u019b\064\u019c\065\u019e\066\u0195\067\u0194\070\u0191" +
    "\071\u0198\072\u0199\106\uff63\001\002\000\010\003\uff67\013" +
    "\uff67\106\uff67\001\002\000\010\003\uff77\013\uff77\106\uff77" +
    "\001\002\000\004\011\u01aa\001\002\000\210\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\045\uffcc\046\uffcc" +
    "\064\uffcc\074\uffcc\075\uffcc\076\uffcc\101\uffcc\102\uffcc\103" +
    "\uffcc\114\uffcc\115\uffcc\116\uffcc\117\uffcc\120\uffcc\121\uffcc" +
    "\122\uffcc\123\uffcc\124\uffcc\125\uffcc\126\uffcc\127\uffcc\130" +
    "\uffcc\131\uffcc\132\uffcc\133\uffcc\134\uffcc\135\uffcc\136\uffcc" +
    "\137\uffcc\140\uffcc\141\uffcc\142\uffcc\143\uffcc\144\uffcc\145" +
    "\uffcc\146\uffcc\147\uffcc\150\uffcc\151\uffcc\152\uffcc\153\uffcc" +
    "\154\uffcc\155\uffcc\156\uffcc\157\uffcc\160\uffcc\161\uffcc\162" +
    "\uffcc\001\002\000\004\064\u01ac\001\002\000\014\045\uff35" +
    "\046\uff35\057\262\117\uff35\120\uff35\001\002\000\004\065" +
    "\uffa8\001\002\000\004\065\u01af\001\002\000\004\010\uffa7" +
    "\001\002\000\004\010\u01b1\001\002\000\024\074\317\075" +
    "\324\076\331\077\325\100\320\101\330\102\322\103\326" +
    "\117\323\001\002\000\026\011\uffbb\074\317\075\324\076" +
    "\331\077\325\100\320\101\330\102\322\103\326\117\323" +
    "\001\002\000\004\011\u01b4\001\002\000\030\011\uffa3\074" +
    "\uffa3\075\uffa3\076\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3" +
    "\103\uffa3\104\u01b6\117\uffa3\001\002\000\026\011\uffa6\074" +
    "\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6" +
    "\103\uffa6\117\uffa6\001\002\000\004\010\uffa5\001\002\000" +
    "\004\010\u01b8\001\002\000\024\074\317\075\324\076\331" +
    "\077\325\100\320\101\330\102\322\103\326\117\323\001" +
    "\002\000\026\011\uffbb\074\317\075\324\076\331\077\325" +
    "\100\320\101\330\102\322\103\326\117\323\001\002\000" +
    "\004\011\u01bb\001\002\000\026\011\uffa4\074\uffa4\075\uffa4" +
    "\076\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\117" +
    "\uffa4\001\002\000\026\011\uffb0\074\uffb0\075\uffb0\076\uffb0" +
    "\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\117\uffb0\001" +
    "\002\000\004\064\u01be\001\002\000\014\045\uff35\046\uff35" +
    "\057\262\117\uff35\120\uff35\001\002\000\004\065\u01c0\001" +
    "\002\000\004\010\uffb6\001\002\000\004\010\u01c2\001\002" +
    "\000\024\074\317\075\324\076\331\077\325\100\320\101" +
    "\330\102\322\103\326\117\323\001\002\000\026\011\uffbb" +
    "\074\317\075\324\076\331\077\325\100\320\101\330\102" +
    "\322\103\326\117\323\001\002\000\004\011\u01c5\001\002" +
    "\000\026\011\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\100" +
    "\uffb5\101\uffb5\102\uffb5\103\uffb5\117\uffb5\001\002\000\010" +
    "\044\u01cb\064\u01cc\073\u01c7\001\002\000\004\117\u01e1\001" +
    "\002\000\026\011\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9" +
    "\100\uffb9\101\uffb9\102\uffb9\103\uffb9\117\uffb9\001\002\000" +
    "\026\011\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab" +
    "\101\uffab\102\uffab\103\uffab\117\uffab\001\002\000\026\011" +
    "\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad\101\uffad" +
    "\102\uffad\103\uffad\117\uffad\001\002\000\022\045\uffa2\046" +
    "\uffa2\064\u01d7\074\uffa2\117\uffa2\120\uffa2\121\uffa2\122\uffa2" +
    "\001\002\000\022\045\u013d\046\u013c\065\uff9d\074\u0138\117" +
    "\u013e\120\u0140\121\u013f\122\u0139\001\002\000\026\011\uffac" +
    "\074\uffac\075\uffac\076\uffac\077\uffac\100\uffac\101\uffac\102" +
    "\uffac\103\uffac\117\uffac\001\002\000\010\013\uff9b\014\u01d2" +
    "\065\uff9b\001\002\000\004\065\u01d0\001\002\000\004\013" +
    "\u01d1\001\002\000\026\011\uffa0\074\uffa0\075\uffa0\076\uffa0" +
    "\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0\117\uffa0\001" +
    "\002\000\020\045\u013d\046\u013c\074\u0138\117\u013e\120\u0140" +
    "\121\u013f\122\u0139\001\002\000\006\013\uff9e\065\uff9e\001" +
    "\002\000\024\013\uff9d\045\u013d\046\u013c\065\uff9d\074\u0138" +
    "\117\u013e\120\u0140\121\u013f\122\u0139\001\002\000\006\013" +
    "\uff9c\065\uff9c\001\002\000\020\045\240\046\231\074\251" +
    "\117\u0126\120\244\121\230\122\253\001\002\000\014\045" +
    "\uff35\046\uff35\057\262\117\uff35\120\uff35\001\002\000\004" +
    "\065\u01d9\001\002\000\004\105\u01da\001\002\000\020\045" +
    "\240\046\231\074\251\117\u0126\120\244\121\230\122\253" +
    "\001\002\000\004\106\u01dc\001\002\000\020\045\240\046" +
    "\231\074\251\117\u0126\120\244\121\230\122\253\001\002" +
    "\000\004\013\u01de\001\002\000\026\011\uffaa\074\uffaa\075" +
    "\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa" +
    "\117\uffaa\001\002\000\004\013\u01e0\001\002\000\026\011" +
    "\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101\uffa1" +
    "\102\uffa1\103\uffa1\117\uffa1\001\002\000\006\044\u01cb\064" +
    "\u01cc\001\002\000\026\011\uffae\074\uffae\075\uffae\076\uffae" +
    "\077\uffae\100\uffae\101\uffae\102\uffae\103\uffae\117\uffae\001" +
    "\002\000\024\074\317\075\324\076\331\077\325\100\320" +
    "\101\330\102\322\103\326\117\323\001\002\000\026\011" +
    "\uffbb\074\317\075\324\076\331\077\325\100\320\101\330" +
    "\102\322\103\326\117\323\001\002\000\004\011\u01e6\001" +
    "\002\000\004\075\u01e7\001\002\000\004\064\u01e8\001\002" +
    "\000\014\045\uff35\046\uff35\057\262\117\uff35\120\uff35\001" +
    "\002\000\004\065\u01ea\001\002\000\004\013\u01eb\001\002" +
    "\000\026\011\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100" +
    "\uffb3\101\uffb3\102\uffb3\103\uffb3\117\uffb3\001\002\000\026" +
    "\011\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101" +
    "\uffaf\102\uffaf\103\uffaf\117\uffaf\001\002\000\004\117\u01ee" +
    "\001\002\000\004\044\u01ef\001\002\000\020\045\240\046" +
    "\231\074\251\117\u0126\120\244\121\230\122\253\001\002" +
    "\000\004\013\u01f1\001\002\000\026\011\uffb8\074\uffb8\075" +
    "\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8" +
    "\117\uffb8\001\002\000\004\117\u01f4\001\002\000\010\003" +
    "\uff85\013\uff85\106\uff85\001\002\000\054\003\uff70\013\uff70" +
    "\047\277\050\300\051\301\052\276\053\274\054\275\055" +
    "\272\056\302\060\u0137\061\u012f\062\u0132\063\u012c\064\u01f8" +
    "\066\u012b\067\u0135\070\u012d\071\u0129\072\u0131\106\uff70\001" +
    "\002\000\014\045\uff35\046\uff35\057\262\117\uff35\120\uff35" +
    "\001\002\000\014\064\uff73\065\uff73\074\uff73\117\uff73\120" +
    "\uff73\001\002\000\010\003\uff75\013\uff75\106\uff75\001\002" +
    "\000\022\045\u013d\046\u013c\065\u0144\074\u0138\117\u013e\120" +
    "\u0140\121\u013f\122\u0139\001\002\000\010\003\uff74\013\uff74" +
    "\106\uff74\001\002\000\014\064\u018a\065\u018b\074\uff5d\117" +
    "\uff5d\120\uff5d\001\002\000\010\074\u018c\117\u018e\120\u018d" +
    "\001\002\000\010\003\uff72\013\uff72\106\uff72\001\002\000" +
    "\010\003\uff71\013\uff71\106\uff71\001\002\000\004\011\u0212" +
    "\001\002\000\004\064\u0200\001\002\000\014\045\uff35\046" +
    "\uff35\057\262\117\uff35\120\uff35\001\002\000\004\065\uffc7" +
    "\001\002\000\004\065\u0203\001\002\000\004\010\uffc6\001" +
    "\002\000\004\010\u0205\001\002\000\024\074\317\075\324" +
    "\076\331\077\325\100\320\101\330\102\322\103\326\117" +
    "\323\001\002\000\026\011\uffbb\074\317\075\324\076\331" +
    "\077\325\100\320\101\330\102\322\103\326\117\323\001" +
    "\002\000\004\011\u0208\001\002\000\212\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\045\uffc0\046\uffc0\064" +
    "\uffc0\074\uffc0\075\uffc0\076\uffc0\101\uffc0\102\uffc0\103\uffc0" +
    "\104\u0209\114\uffc0\115\uffc0\116\uffc0\117\uffc0\120\uffc0\121" +
    "\uffc0\122\uffc0\123\uffc0\124\uffc0\125\uffc0\126\uffc0\127\uffc0" +
    "\130\uffc0\131\uffc0\132\uffc0\133\uffc0\134\uffc0\135\uffc0\136" +
    "\uffc0\137\uffc0\140\uffc0\141\uffc0\142\uffc0\143\uffc0\144\uffc0" +
    "\145\uffc0\146\uffc0\147\uffc0\150\uffc0\151\uffc0\152\uffc0\153" +
    "\uffc0\154\uffc0\155\uffc0\156\uffc0\157\uffc0\160\uffc0\161\uffc0" +
    "\162\uffc0\001\002\000\006\003\u020b\010\uffc3\001\002\000" +
    "\210\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\045\uffc5\046\uffc5\064\uffc5\074\uffc5\075\uffc5\076\uffc5\101" +
    "\uffc5\102\uffc5\103\uffc5\114\uffc5\115\uffc5\116\uffc5\117\uffc5" +
    "\120\uffc5\121\uffc5\122\uffc5\123\uffc5\124\uffc5\125\uffc5\126" +
    "\uffc5\127\uffc5\130\uffc5\131\uffc5\132\uffc5\133\uffc5\134\uffc5" +
    "\135\uffc5\136\uffc5\137\uffc5\140\uffc5\141\uffc5\142\uffc5\143" +
    "\uffc5\144\uffc5\145\uffc5\146\uffc5\147\uffc5\150\uffc5\151\uffc5" +
    "\152\uffc5\153\uffc5\154\uffc5\155\uffc5\156\uffc5\157\uffc5\160" +
    "\uffc5\161\uffc5\162\uffc5\001\002\000\004\011\u0211\001\002" +
    "\000\004\010\u020d\001\002\000\024\074\317\075\324\076" +
    "\331\077\325\100\320\101\330\102\322\103\326\117\323" +
    "\001\002\000\026\011\uffbb\074\317\075\324\076\331\077" +
    "\325\100\320\101\330\102\322\103\326\117\323\001\002" +
    "\000\004\011\u0210\001\002\000\210\015\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\045\uffc2\046\uffc2\064\uffc2" +
    "\074\uffc2\075\uffc2\076\uffc2\101\uffc2\102\uffc2\103\uffc2\114" +
    "\uffc2\115\uffc2\116\uffc2\117\uffc2\120\uffc2\121\uffc2\122\uffc2" +
    "\123\uffc2\124\uffc2\125\uffc2\126\uffc2\127\uffc2\130\uffc2\131" +
    "\uffc2\132\uffc2\133\uffc2\134\uffc2\135\uffc2\136\uffc2\137\uffc2" +
    "\140\uffc2\141\uffc2\142\uffc2\143\uffc2\144\uffc2\145\uffc2\146" +
    "\uffc2\147\uffc2\150\uffc2\151\uffc2\152\uffc2\153\uffc2\154\uffc2" +
    "\155\uffc2\156\uffc2\157\uffc2\160\uffc2\161\uffc2\162\uffc2\001" +
    "\002\000\210\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\045\uffc1\046\uffc1\064\uffc1\074\uffc1\075\uffc1\076" +
    "\uffc1\101\uffc1\102\uffc1\103\uffc1\114\uffc1\115\uffc1\116\uffc1" +
    "\117\uffc1\120\uffc1\121\uffc1\122\uffc1\123\uffc1\124\uffc1\125" +
    "\uffc1\126\uffc1\127\uffc1\130\uffc1\131\uffc1\132\uffc1\133\uffc1" +
    "\134\uffc1\135\uffc1\136\uffc1\137\uffc1\140\uffc1\141\uffc1\142" +
    "\uffc1\143\uffc1\144\uffc1\145\uffc1\146\uffc1\147\uffc1\150\uffc1" +
    "\151\uffc1\152\uffc1\153\uffc1\154\uffc1\155\uffc1\156\uffc1\157" +
    "\uffc1\160\uffc1\161\uffc1\162\uffc1\001\002\000\210\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\045\uffc4\046" +
    "\uffc4\064\uffc4\074\uffc4\075\uffc4\076\uffc4\101\uffc4\102\uffc4" +
    "\103\uffc4\114\uffc4\115\uffc4\116\uffc4\117\uffc4\120\uffc4\121" +
    "\uffc4\122\uffc4\123\uffc4\124\uffc4\125\uffc4\126\uffc4\127\uffc4" +
    "\130\uffc4\131\uffc4\132\uffc4\133\uffc4\134\uffc4\135\uffc4\136" +
    "\uffc4\137\uffc4\140\uffc4\141\uffc4\142\uffc4\143\uffc4\144\uffc4" +
    "\145\uffc4\146\uffc4\147\uffc4\150\uffc4\151\uffc4\152\uffc4\153" +
    "\uffc4\154\uffc4\155\uffc4\156\uffc4\157\uffc4\160\uffc4\161\uffc4" +
    "\162\uffc4\001\002\000\026\060\u019d\061\u0197\062\u0193\063" +
    "\u019b\065\u019e\066\u0195\067\u0194\070\u0191\071\u0198\072\u0199" +
    "\001\002\000\010\003\uff7e\013\uff7e\106\uff7e\001\002\000" +
    "\004\076\uffe8\001\002\000\010\003\uff81\013\uff81\106\uff81" +
    "\001\002\000\010\042\134\043\135\117\uff88\001\002\000" +
    "\004\117\u0219\001\002\000\006\013\u021c\044\u021b\001\002" +
    "\000\210\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\045\uffe6\046\uffe6\064\uffe6\074\uffe6\075\uffe6\076\uffe6" +
    "\101\uffe6\102\uffe6\103\uffe6\114\uffe6\115\uffe6\116\uffe6\117" +
    "\uffe6\120\uffe6\121\uffe6\122\uffe6\123\uffe6\124\uffe6\125\uffe6" +
    "\126\uffe6\127\uffe6\130\uffe6\131\uffe6\132\uffe6\133\uffe6\134" +
    "\uffe6\135\uffe6\136\uffe6\137\uffe6\140\uffe6\141\uffe6\142\uffe6" +
    "\143\uffe6\144\uffe6\145\uffe6\146\uffe6\147\uffe6\150\uffe6\151" +
    "\uffe6\152\uffe6\153\uffe6\154\uffe6\155\uffe6\156\uffe6\157\uffe6" +
    "\160\uffe6\161\uffe6\162\uffe6\001\002\000\022\045\240\046" +
    "\231\064\u0221\074\251\117\u0126\120\244\121\230\122\253" +
    "\001\002\000\210\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\045\uffdb\046\uffdb\064\uffdb\074\uffdb\075\uffdb" +
    "\076\uffdb\101\uffdb\102\uffdb\103\uffdb\114\uffdb\115\uffdb\116" +
    "\uffdb\117\uffdb\120\uffdb\121\uffdb\122\uffdb\123\uffdb\124\uffdb" +
    "\125\uffdb\126\uffdb\127\uffdb\130\uffdb\131\uffdb\132\uffdb\133" +
    "\uffdb\134\uffdb\135\uffdb\136\uffdb\137\uffdb\140\uffdb\141\uffdb" +
    "\142\uffdb\143\uffdb\144\uffdb\145\uffdb\146\uffdb\147\uffdb\150" +
    "\uffdb\151\uffdb\152\uffdb\153\uffdb\154\uffdb\155\uffdb\156\uffdb" +
    "\157\uffdb\160\uffdb\161\uffdb\162\uffdb\001\002\000\210\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\045\uffdc" +
    "\046\uffdc\064\uffdc\074\uffdc\075\uffdc\076\uffdc\101\uffdc\102" +
    "\uffdc\103\uffdc\114\uffdc\115\uffdc\116\uffdc\117\uffdc\120\uffdc" +
    "\121\uffdc\122\uffdc\123\uffdc\124\uffdc\125\uffdc\126\uffdc\127" +
    "\uffdc\130\uffdc\131\uffdc\132\uffdc\133\uffdc\134\uffdc\135\uffdc" +
    "\136\uffdc\137\uffdc\140\uffdc\141\uffdc\142\uffdc\143\uffdc\144" +
    "\uffdc\145\uffdc\146\uffdc\147\uffdc\150\uffdc\151\uffdc\152\uffdc" +
    "\153\uffdc\154\uffdc\155\uffdc\156\uffdc\157\uffdc\160\uffdc\161" +
    "\uffdc\162\uffdc\001\002\000\210\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\045\uffd9\046\uffd9\064\uffd9\074" +
    "\uffd9\075\uffd9\076\uffd9\101\uffd9\102\uffd9\103\uffd9\114\uffd9" +
    "\115\uffd9\116\uffd9\117\uffd9\120\uffd9\121\uffd9\122\uffd9\123" +
    "\uffd9\124\uffd9\125\uffd9\126\uffd9\127\uffd9\130\uffd9\131\uffd9" +
    "\132\uffd9\133\uffd9\134\uffd9\135\uffd9\136\uffd9\137\uffd9\140" +
    "\uffd9\141\uffd9\142\uffd9\143\uffd9\144\uffd9\145\uffd9\146\uffd9" +
    "\147\uffd9\150\uffd9\151\uffd9\152\uffd9\153\uffd9\154\uffd9\155" +
    "\uffd9\156\uffd9\157\uffd9\160\uffd9\161\uffd9\162\uffd9\001\002" +
    "\000\210\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\045\uffda\046\uffda\064\uffda\074\uffda\075\uffda\076\uffda" +
    "\101\uffda\102\uffda\103\uffda\114\uffda\115\uffda\116\uffda\117" +
    "\uffda\120\uffda\121\uffda\122\uffda\123\uffda\124\uffda\125\uffda" +
    "\126\uffda\127\uffda\130\uffda\131\uffda\132\uffda\133\uffda\134" +
    "\uffda\135\uffda\136\uffda\137\uffda\140\uffda\141\uffda\142\uffda" +
    "\143\uffda\144\uffda\145\uffda\146\uffda\147\uffda\150\uffda\151" +
    "\uffda\152\uffda\153\uffda\154\uffda\155\uffda\156\uffda\157\uffda" +
    "\160\uffda\161\uffda\162\uffda\001\002\000\004\013\u022d\001" +
    "\002\000\016\003\u0222\045\uff35\046\uff35\057\262\117\uff35" +
    "\120\uff35\001\002\000\004\013\u022c\001\002\000\004\065" +
    "\u0224\001\002\000\004\105\u0225\001\002\000\020\045\240" +
    "\046\231\074\251\117\u0126\120\244\121\230\122\253\001" +
    "\002\000\006\003\u0227\106\u0228\001\002\000\004\013\u022b" +
    "\001\002\000\020\045\240\046\231\074\251\117\u0126\120" +
    "\244\121\230\122\253\001\002\000\004\013\u022a\001\002" +
    "\000\210\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\045\uffbf\046\uffbf\064\uffbf\074\uffbf\075\uffbf\076\uffbf" +
    "\101\uffbf\102\uffbf\103\uffbf\114\uffbf\115\uffbf\116\uffbf\117" +
    "\uffbf\120\uffbf\121\uffbf\122\uffbf\123\uffbf\124\uffbf\125\uffbf" +
    "\126\uffbf\127\uffbf\130\uffbf\131\uffbf\132\uffbf\133\uffbf\134" +
    "\uffbf\135\uffbf\136\uffbf\137\uffbf\140\uffbf\141\uffbf\142\uffbf" +
    "\143\uffbf\144\uffbf\145\uffbf\146\uffbf\147\uffbf\150\uffbf\151" +
    "\uffbf\152\uffbf\153\uffbf\154\uffbf\155\uffbf\156\uffbf\157\uffbf" +
    "\160\uffbf\161\uffbf\162\uffbf\001\002\000\210\015\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\045\uffbd\046\uffbd" +
    "\064\uffbd\074\uffbd\075\uffbd\076\uffbd\101\uffbd\102\uffbd\103" +
    "\uffbd\114\uffbd\115\uffbd\116\uffbd\117\uffbd\120\uffbd\121\uffbd" +
    "\122\uffbd\123\uffbd\124\uffbd\125\uffbd\126\uffbd\127\uffbd\130" +
    "\uffbd\131\uffbd\132\uffbd\133\uffbd\134\uffbd\135\uffbd\136\uffbd" +
    "\137\uffbd\140\uffbd\141\uffbd\142\uffbd\143\uffbd\144\uffbd\145" +
    "\uffbd\146\uffbd\147\uffbd\150\uffbd\151\uffbd\152\uffbd\153\uffbd" +
    "\154\uffbd\155\uffbd\156\uffbd\157\uffbd\160\uffbd\161\uffbd\162" +
    "\uffbd\001\002\000\210\015\uffbe\016\uffbe\017\uffbe\020\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\045\uffbe\046\uffbe\064\uffbe\074\uffbe\075" +
    "\uffbe\076\uffbe\101\uffbe\102\uffbe\103\uffbe\114\uffbe\115\uffbe" +
    "\116\uffbe\117\uffbe\120\uffbe\121\uffbe\122\uffbe\123\uffbe\124" +
    "\uffbe\125\uffbe\126\uffbe\127\uffbe\130\uffbe\131\uffbe\132\uffbe" +
    "\133\uffbe\134\uffbe\135\uffbe\136\uffbe\137\uffbe\140\uffbe\141" +
    "\uffbe\142\uffbe\143\uffbe\144\uffbe\145\uffbe\146\uffbe\147\uffbe" +
    "\150\uffbe\151\uffbe\152\uffbe\153\uffbe\154\uffbe\155\uffbe\156" +
    "\uffbe\157\uffbe\160\uffbe\161\uffbe\162\uffbe\001\002\000\210" +
    "\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023" +
    "\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a" +
    "\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\045" +
    "\uff9a\046\uff9a\064\uff9a\074\uff9a\075\uff9a\076\uff9a\101\uff9a" +
    "\102\uff9a\103\uff9a\114\uff9a\115\uff9a\116\uff9a\117\uff9a\120" +
    "\uff9a\121\uff9a\122\uff9a\123\uff9a\124\uff9a\125\uff9a\126\uff9a" +
    "\127\uff9a\130\uff9a\131\uff9a\132\uff9a\133\uff9a\134\uff9a\135" +
    "\uff9a\136\uff9a\137\uff9a\140\uff9a\141\uff9a\142\uff9a\143\uff9a" +
    "\144\uff9a\145\uff9a\146\uff9a\147\uff9a\150\uff9a\151\uff9a\152" +
    "\uff9a\153\uff9a\154\uff9a\155\uff9a\156\uff9a\157\uff9a\160\uff9a" +
    "\161\uff9a\162\uff9a\001\002\000\004\013\u022f\001\002\000" +
    "\210\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\045\uffe0\046\uffe0\064\uffe0\074\uffe0\075\uffe0\076\uffe0\101" +
    "\uffe0\102\uffe0\103\uffe0\114\uffe0\115\uffe0\116\uffe0\117\uffe0" +
    "\120\uffe0\121\uffe0\122\uffe0\123\uffe0\124\uffe0\125\uffe0\126" +
    "\uffe0\127\uffe0\130\uffe0\131\uffe0\132\uffe0\133\uffe0\134\uffe0" +
    "\135\uffe0\136\uffe0\137\uffe0\140\uffe0\141\uffe0\142\uffe0\143" +
    "\uffe0\144\uffe0\145\uffe0\146\uffe0\147\uffe0\150\uffe0\151\uffe0" +
    "\152\uffe0\153\uffe0\154\uffe0\155\uffe0\156\uffe0\157\uffe0\160" +
    "\uffe0\161\uffe0\162\uffe0\001\002\000\024\074\317\075\324" +
    "\076\331\077\325\100\320\101\330\102\322\103\326\117" +
    "\323\001\002\000\026\011\uffbb\074\317\075\324\076\331" +
    "\077\325\100\320\101\330\102\322\103\326\117\323\001" +
    "\002\000\004\011\u0233\001\002\000\004\075\u0234\001\002" +
    "\000\004\064\u0235\001\002\000\014\045\uff35\046\uff35\057" +
    "\262\117\uff35\120\uff35\001\002\000\004\065\u0237\001\002" +
    "\000\004\013\u0238\001\002\000\210\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\045\uffc9\046\uffc9\064\uffc9" +
    "\074\uffc9\075\uffc9\076\uffc9\101\uffc9\102\uffc9\103\uffc9\114" +
    "\uffc9\115\uffc9\116\uffc9\117\uffc9\120\uffc9\121\uffc9\122\uffc9" +
    "\123\uffc9\124\uffc9\125\uffc9\126\uffc9\127\uffc9\130\uffc9\131" +
    "\uffc9\132\uffc9\133\uffc9\134\uffc9\135\uffc9\136\uffc9\137\uffc9" +
    "\140\uffc9\141\uffc9\142\uffc9\143\uffc9\144\uffc9\145\uffc9\146" +
    "\uffc9\147\uffc9\150\uffc9\151\uffc9\152\uffc9\153\uffc9\154\uffc9" +
    "\155\uffc9\156\uffc9\157\uffc9\160\uffc9\161\uffc9\162\uffc9\001" +
    "\002\000\010\003\uff80\013\uff80\106\uff80\001\002\000\004" +
    "\117\334\001\002\000\004\013\u023c\001\002\000\014\045" +
    "\uff35\046\uff35\057\262\117\uff35\120\uff35\001\002\000\004" +
    "\013\u023e\001\002\000\014\074\341\117\345\120\342\121" +
    "\350\122\346\001\002\000\004\065\u0240\001\002\000\004" +
    "\010\u0241\001\002\000\024\074\317\075\324\076\331\077" +
    "\325\100\320\101\330\102\322\103\326\117\323\001\002" +
    "\000\026\011\uffbb\074\317\075\324\076\331\077\325\100" +
    "\320\101\330\102\322\103\326\117\323\001\002\000\004" +
    "\011\u0244\001\002\000\210\015\uffca\016\uffca\017\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\045\uffca\046\uffca\064\uffca\074\uffca" +
    "\075\uffca\076\uffca\101\uffca\102\uffca\103\uffca\114\uffca\115" +
    "\uffca\116\uffca\117\uffca\120\uffca\121\uffca\122\uffca\123\uffca" +
    "\124\uffca\125\uffca\126\uffca\127\uffca\130\uffca\131\uffca\132" +
    "\uffca\133\uffca\134\uffca\135\uffca\136\uffca\137\uffca\140\uffca" +
    "\141\uffca\142\uffca\143\uffca\144\uffca\145\uffca\146\uffca\147" +
    "\uffca\150\uffca\151\uffca\152\uffca\153\uffca\154\uffca\155\uffca" +
    "\156\uffca\157\uffca\160\uffca\161\uffca\162\uffca\001\002\000" +
    "\020\045\240\046\231\074\251\117\u0126\120\244\121\230" +
    "\122\253\001\002\000\004\013\u0247\001\002\000\004\011" +
    "\u0248\001\002\000\006\011\ufff3\110\ufff3\001\002\000\004" +
    "\044\u024a\001\002\000\022\045\uffe3\046\uffe3\064\uffe3\074" +
    "\uffe3\117\uffe3\120\uffe3\121\uffe3\122\uffe3\001\002\000\022" +
    "\045\240\046\231\064\u0221\074\251\117\u0126\120\244\121" +
    "\230\122\253\001\002\000\210\015\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\045\uffdd\046\uffdd\064\uffdd\074" +
    "\uffdd\075\uffdd\076\uffdd\101\uffdd\102\uffdd\103\uffdd\114\uffdd" +
    "\115\uffdd\116\uffdd\117\uffdd\120\uffdd\121\uffdd\122\uffdd\123" +
    "\uffdd\124\uffdd\125\uffdd\126\uffdd\127\uffdd\130\uffdd\131\uffdd" +
    "\132\uffdd\133\uffdd\134\uffdd\135\uffdd\136\uffdd\137\uffdd\140" +
    "\uffdd\141\uffdd\142\uffdd\143\uffdd\144\uffdd\145\uffdd\146\uffdd" +
    "\147\uffdd\150\uffdd\151\uffdd\152\uffdd\153\uffdd\154\uffdd\155" +
    "\uffdd\156\uffdd\157\uffdd\160\uffdd\161\uffdd\162\uffdd\001\002" +
    "\000\210\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022" +
    "\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\045\uffde\046\uffde\064\uffde\074\uffde\075\uffde\076\uffde" +
    "\101\uffde\102\uffde\103\uffde\114\uffde\115\uffde\116\uffde\117" +
    "\uffde\120\uffde\121\uffde\122\uffde\123\uffde\124\uffde\125\uffde" +
    "\126\uffde\127\uffde\130\uffde\131\uffde\132\uffde\133\uffde\134" +
    "\uffde\135\uffde\136\uffde\137\uffde\140\uffde\141\uffde\142\uffde" +
    "\143\uffde\144\uffde\145\uffde\146\uffde\147\uffde\150\uffde\151" +
    "\uffde\152\uffde\153\uffde\154\uffde\155\uffde\156\uffde\157\uffde" +
    "\160\uffde\161\uffde\162\uffde\001\002\000\210\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\045\uffe2\046\uffe2" +
    "\064\uffe2\074\uffe2\075\uffe2\076\uffe2\101\uffe2\102\uffe2\103" +
    "\uffe2\114\uffe2\115\uffe2\116\uffe2\117\uffe2\120\uffe2\121\uffe2" +
    "\122\uffe2\123\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2\130" +
    "\uffe2\131\uffe2\132\uffe2\133\uffe2\134\uffe2\135\uffe2\136\uffe2" +
    "\137\uffe2\140\uffe2\141\uffe2\142\uffe2\143\uffe2\144\uffe2\145" +
    "\uffe2\146\uffe2\147\uffe2\150\uffe2\151\uffe2\152\uffe2\153\uffe2" +
    "\154\uffe2\155\uffe2\156\uffe2\157\uffe2\160\uffe2\161\uffe2\162" +
    "\uffe2\001\002\000\210\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\045\uffe1\046\uffe1\064\uffe1\074\uffe1\075" +
    "\uffe1\076\uffe1\101\uffe1\102\uffe1\103\uffe1\114\uffe1\115\uffe1" +
    "\116\uffe1\117\uffe1\120\uffe1\121\uffe1\122\uffe1\123\uffe1\124" +
    "\uffe1\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131\uffe1\132\uffe1" +
    "\133\uffe1\134\uffe1\135\uffe1\136\uffe1\137\uffe1\140\uffe1\141" +
    "\uffe1\142\uffe1\143\uffe1\144\uffe1\145\uffe1\146\uffe1\147\uffe1" +
    "\150\uffe1\151\uffe1\152\uffe1\153\uffe1\154\uffe1\155\uffe1\156" +
    "\uffe1\157\uffe1\160\uffe1\161\uffe1\162\uffe1\001\002\000\004" +
    "\117\u0251\001\002\000\006\014\204\065\ufff0\001\002\000" +
    "\004\065\ufff1\001\002\000\006\011\ufff2\110\ufff2\001\002" +
    "\000\004\011\ufff9\001\002\000\012\040\132\042\uff8b\043" +
    "\uff8b\117\uff8b\001\002\000\004\013\u0257\001\002\000\164" +
    "\011\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022" +
    "\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91" +
    "\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037" +
    "\uff91\107\uff91\110\uff91\114\uff91\115\uff91\116\uff91\123\uff91" +
    "\124\uff91\125\uff91\126\uff91\127\uff91\130\uff91\131\uff91\132" +
    "\uff91\133\uff91\134\uff91\135\uff91\136\uff91\137\uff91\140\uff91" +
    "\141\uff91\142\uff91\143\uff91\144\uff91\145\uff91\146\uff91\147" +
    "\uff91\150\uff91\151\uff91\152\uff91\153\uff91\154\uff91\155\uff91" +
    "\156\uff91\157\uff91\160\uff91\161\uff91\162\uff91\001\002\000" +
    "\010\042\134\043\135\117\uff88\001\002\000\004\117\uff94" +
    "\001\002\000\004\117\u025b\001\002\000\006\013\uff93\044" +
    "\uff93\001\002\000\006\013\u025f\044\u025d\001\002\000\020" +
    "\045\uff8e\046\uff8e\074\uff8e\117\uff8e\120\uff8e\121\uff8e\122" +
    "\uff8e\001\002\000\164\011\uff92\015\uff92\016\uff92\017\uff92" +
    "\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026" +
    "\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92" +
    "\035\uff92\036\uff92\037\uff92\107\uff92\110\uff92\114\uff92\115" +
    "\uff92\116\uff92\123\uff92\124\uff92\125\uff92\126\uff92\127\uff92" +
    "\130\uff92\131\uff92\132\uff92\133\uff92\134\uff92\135\uff92\136" +
    "\uff92\137\uff92\140\uff92\141\uff92\142\uff92\143\uff92\144\uff92" +
    "\145\uff92\146\uff92\147\uff92\150\uff92\151\uff92\152\uff92\153" +
    "\uff92\154\uff92\155\uff92\156\uff92\157\uff92\160\uff92\161\uff92" +
    "\162\uff92\001\002\000\164\011\uff90\015\uff90\016\uff90\017" +
    "\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90" +
    "\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034" +
    "\uff90\035\uff90\036\uff90\037\uff90\107\uff90\110\uff90\114\uff90" +
    "\115\uff90\116\uff90\123\uff90\124\uff90\125\uff90\126\uff90\127" +
    "\uff90\130\uff90\131\uff90\132\uff90\133\uff90\134\uff90\135\uff90" +
    "\136\uff90\137\uff90\140\uff90\141\uff90\142\uff90\143\uff90\144" +
    "\uff90\145\uff90\146\uff90\147\uff90\150\uff90\151\uff90\152\uff90" +
    "\153\uff90\154\uff90\155\uff90\156\uff90\157\uff90\160\uff90\161" +
    "\uff90\162\uff90\001\002\000\004\013\u0261\001\002\000\164" +
    "\011\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022" +
    "\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f" +
    "\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037" +
    "\uff8f\107\uff8f\110\uff8f\114\uff8f\115\uff8f\116\uff8f\123\uff8f" +
    "\124\uff8f\125\uff8f\126\uff8f\127\uff8f\130\uff8f\131\uff8f\132" +
    "\uff8f\133\uff8f\134\uff8f\135\uff8f\136\uff8f\137\uff8f\140\uff8f" +
    "\141\uff8f\142\uff8f\143\uff8f\144\uff8f\145\uff8f\146\uff8f\147" +
    "\uff8f\150\uff8f\151\uff8f\152\uff8f\153\uff8f\154\uff8f\155\uff8f" +
    "\156\uff8f\157\uff8f\160\uff8f\161\uff8f\162\uff8f\001\002\000" +
    "\020\045\240\046\231\074\251\117\u0126\120\244\121\230" +
    "\122\253\001\002\000\004\013\uff8d\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0261\000\006\002\004\140\003\001\001\000\004\003" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\065\005" +
    "\052\006\045\007\070\010\100\012\102\014\024\017\044" +
    "\050\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\162\u0254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\u0253\006" +
    "\045\007\070\012\102\014\024\017\044\050\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\004\153\005\052\006\045\007" +
    "\070\010\100\012\102\014\024\017\044\050\110\001\001" +
    "\000\002\001\001\000\006\007\152\012\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\122\007\070\012" +
    "\102\050\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\132\001\001\000\002\001\001\000" +
    "\004\016\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\140\051" +
    "\141\001\001\000\004\015\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\140\051\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\075\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\004\173\005\052\006\045\007" +
    "\070\010\100\012\102\014\024\017\044\050\110\001\001" +
    "\000\002\001\001\000\004\075\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\201" +
    "\001\001\000\002\001\001\000\004\055\204\001\001\000" +
    "\004\014\u024f\001\001\000\002\001\001\000\004\056\207" +
    "\001\001\000\002\001\001\000\004\057\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\011\246\014\235\021\222\032\240\034\244\042\236\044" +
    "\225\045\247\054\232\060\224\070\234\073\242\076\241" +
    "\001\001\000\002\001\001\000\006\141\u0248\166\u0127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\272\027\u0238\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\030\u022d\120\u01cd" +
    "\123\u0140\124\u0139\130\u0142\001\001\000\002\001\001\000" +
    "\004\015\u0216\001\001\000\002\001\001\000\006\025\272" +
    "\027\u0215\001\001\000\002\001\001\000\034\011\246\014" +
    "\235\021\222\032\240\034\244\042\236\044\225\045\247" +
    "\054\232\060\u0214\070\234\073\242\076\241\001\001\000" +
    "\002\001\001\000\004\167\u0212\001\001\000\002\001\001" +
    "\000\004\146\u01fe\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\u01f2\001\001\000\004\143\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\257\116\260\001\001\000\004" +
    "\144\312\001\001\000\004\117\265\001\001\000\002\001" +
    "\001\000\004\176\310\001\001\000\004\200\306\001\001" +
    "\000\004\177\304\001\001\000\002\001\001\000\004\175" +
    "\267\001\001\000\006\025\272\027\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\201\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\303\116\260\001\001\000\002\001\001" +
    "\000\006\025\272\027\305\001\001\000\002\001\001\000" +
    "\006\025\272\027\307\001\001\000\002\001\001\000\006" +
    "\025\272\027\311\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\145\314\001\001\000\002\001\001\000\006" +
    "\035\326\052\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\152\u01c5" +
    "\001\001\000\004\153\u01bc\001\001\000\002\001\001\000" +
    "\004\155\u01aa\001\001\000\010\035\353\041\u01a8\052\320" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\334\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\336\116\260\001\001\000\002\001" +
    "\001\000\010\101\346\104\343\105\342\001\001\000\004" +
    "\103\u011d\001\001\000\006\106\u011b\115\u0104\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\102\360\107\367" +
    "\115\364\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\035\352\052\320" +
    "\001\001\000\010\035\353\041\354\052\320\001\001\000" +
    "\010\035\353\041\356\052\320\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\111\u011a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\110" +
    "\u010d\001\001\000\004\111\u0100\001\001\000\006\106\u010c" +
    "\115\u0104\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\114\u0103\001\001\000\002\001\001\000\006\106\u0105" +
    "\115\u0104\001\001\000\004\111\u0106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\114\u010a\001\001\000\006\106\u010b\115\u0104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\113\u0112\001\001\000\002\001" +
    "\001\000\004\110\u0114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\113" +
    "\u0117\001\001\000\002\001\001\000\006\107\u0119\115\364" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\112\u0120" +
    "\115\u011f\001\001\000\004\111\u0123\001\001\000\002\001" +
    "\001\000\004\110\u0122\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\u0126\032\240\070\234\073\242\001" +
    "\001\000\004\166\u0127\001\001\000\002\001\001\000\012" +
    "\025\u0129\064\u0132\067\u012d\074\u0133\001\001\000\002\001" +
    "\001\000\006\024\u01a7\116\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\170\u0187\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\071\u0141\120\u013a\123\u0140\124\u0139" +
    "\130\u0142\001\001\000\002\001\001\000\004\122\u017c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\u0179" +
    "\001\001\000\006\131\u0176\132\u014d\001\001\000\006\131" +
    "\u0175\132\u014d\001\001\000\012\121\u016b\125\u016a\127\u016c" +
    "\132\u016d\001\001\000\002\001\001\000\006\131\u0147\132" +
    "\u014d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\133\u015a\136\u015e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\131\u0169\132" +
    "\u014d\001\001\000\002\001\001\000\006\131\u0165\132\u014d" +
    "\001\001\000\002\001\001\000\004\137\u0162\001\001\000" +
    "\004\136\u0160\001\001\000\006\131\u015f\132\u014d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\131\u0163\132\u014d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\131\u0168\132\u014d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\133\u0174\136\u015e\001\001\000\006\133\u0173\136\u015e" +
    "\001\001\000\002\001\001\000\006\133\u0170\136\u015e\001" +
    "\001\000\002\001\001\000\010\125\u0172\127\u016c\132\u016d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\071\u017a" +
    "\120\u013a\123\u0140\124\u0139\130\u0142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\126\u017e\127\u017f\132\u0180\001" +
    "\001\000\002\001\001\000\006\133\u0184\136\u015e\001\001" +
    "\000\006\133\u0183\136\u015e\001\001\000\006\133\u0182\136" +
    "\u015e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\025\u0129\067\u012d\074\u0186\001\001\000" +
    "\002\001\001\000\004\134\u0188\001\001\000\004\022\u018e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\172\u01a2\001\001\000\004\173\u018f\001\001" +
    "\000\002\001\001\000\010\023\u0191\026\u0199\135\u0195\001" +
    "\001\000\002\001\001\000\004\174\u019f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\071\u019e\120" +
    "\u013a\123\u0140\124\u0139\130\u0142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\134\u01a0\001" +
    "\001\000\004\022\u01a1\001\001\000\002\001\001\000\006" +
    "\023\u0191\026\u01a3\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\023\u0191\026\u0199\135\u01a6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\u01ac\116\260\001\001" +
    "\000\004\156\u01ad\001\001\000\002\001\001\000\004\157" +
    "\u01af\001\001\000\002\001\001\000\006\035\u01b1\052\320" +
    "\001\001\000\010\035\353\041\u01b2\052\320\001\001\000" +
    "\002\001\001\000\004\053\u01b4\001\001\000\002\001\001" +
    "\000\004\160\u01b6\001\001\000\002\001\001\000\006\035" +
    "\u01b8\052\320\001\001\000\010\035\353\041\u01b9\052\320" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\u01be\116\260\001\001" +
    "\000\002\001\001\000\004\154\u01c0\001\001\000\002\001" +
    "\001\000\006\035\u01c2\052\320\001\001\000\010\035\353" +
    "\041\u01c3\052\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\036\u01cc\037\u01c7\040\u01c8\062\u01c9\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\161\u01d5\001\001\000\014\030\u01ce" +
    "\120\u01cd\123\u0140\124\u0139\130\u0142\001\001\000\002\001" +
    "\001\000\004\031\u01d2\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\120\u01d3\123\u0140\124" +
    "\u0139\130\u0142\001\001\000\002\001\001\000\014\030\u01d4" +
    "\120\u01cd\123\u0140\124\u0139\130\u0142\001\001\000\002\001" +
    "\001\000\012\021\u01de\032\240\070\234\073\242\001\001" +
    "\000\006\024\u01d7\116\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\021\u01da\032\240\070\234\073\242" +
    "\001\001\000\002\001\001\000\012\021\u01dc\032\240\070" +
    "\234\073\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\036\u01cc\040" +
    "\u01c8\062\u01e1\001\001\000\002\001\001\000\006\035\u01e3" +
    "\052\320\001\001\000\010\035\353\041\u01e4\052\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\u01e8\116\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\021\u01ef\032\240\070" +
    "\234\073\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\025\u01f4\066" +
    "\u01f6\067\u01f5\001\001\000\006\024\u01fc\116\260\001\001" +
    "\000\004\171\u01f9\001\001\000\002\001\001\000\014\071" +
    "\u01f8\120\u013a\123\u0140\124\u0139\130\u0142\001\001\000\002" +
    "\001\001\000\004\134\u01fa\001\001\000\004\022\u01fb\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\u0200\116\260\001\001\000" +
    "\004\147\u0201\001\001\000\002\001\001\000\004\150\u0203" +
    "\001\001\000\002\001\001\000\006\035\u0205\052\320\001" +
    "\001\000\010\035\353\041\u0206\052\320\001\001\000\002" +
    "\001\001\000\004\046\u0209\001\001\000\004\151\u020b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\u020d\052\320\001\001\000\010\035\353\041" +
    "\u020e\052\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\u0191\026" +
    "\u0213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\u0217\001\001\000\002\001\001\000" +
    "\004\077\u0219\001\001\000\002\001\001\000\020\021\u021f" +
    "\032\240\047\u021d\061\u021e\070\234\073\242\100\u021c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\u0222\116" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\u0225\032\240\070\234\073\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\u0228" +
    "\032\240\070\234\073\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\u0230\052\320\001\001\000\010\035\353\041\u0231\052\320" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\u0235\116\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\u023a\001\001\000\002\001\001\000\006\024\u023c" +
    "\116\260\001\001\000\002\001\001\000\010\101\u023e\104" +
    "\343\105\342\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\u0241\052\320\001\001\000\010\035\353\041" +
    "\u0242\052\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\u0245\032\240\070\234\073\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\142\u024a\001\001\000\020\021\u021f\032" +
    "\240\047\u024b\061\u024c\063\u024d\070\234\073\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\u0251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u0257\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u0258\001\001\000\004\163\u0259\001\001\000" +
    "\002\001\001\000\004\164\u025b\001\001\000\006\020\u025f" +
    "\033\u025d\001\001\000\004\165\u0261\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\u0262\032\240\070\234\073\242\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static String nombreArchivo;
    public FileWriter myWriter;
    public int contador = 0;

    // lista donde se almacenan los errores sintácticos
    public static LinkedList<TError> TablaES = new LinkedList<TError>();
    public static LinkedList<Integer> listaParametros = new LinkedList<Integer>();
    public static LinkedList<RegistroSemantico> pilaSemantica = new LinkedList<RegistroSemantico>();
    public static LinkedList<Simbolo> tablaSimbolos = new LinkedList<Simbolo>();

    public void writeLine(final String pData, final int flag) throws IOException {
        if (flag == 0) {
            myWriter.write(pData + "\n");
        } else {
            myWriter.write(pData + " ");
        }
        myWriter.flush();
    }


    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        if(s.value != null){
            String lexema = s.value.toString();
            int fila = s.left;
            int columna = s.right;
            TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
            TablaES.add(datos);
            System.out.println("------ Recuperacion exitosa ------");
            System.out.println("\t\tLexema: "+lexema);
        }
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        if(s.value != null){
            String lexema = s.value.toString();
            int fila = s.left;
            int columna = s.right;
            TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
            TablaES.add(datos);
            System.out.println("------ Error Sintactico irrecuperable ------");
            System.out.println("\t\tLexema: "+lexema);
        }
    }

    /* Metodos para realizar las acciones semánticas*/

    public void recuerdoTipo(String pTipo){
        pilaSemantica.push(new RS_Tipo(pTipo));
    }

    public void recuerdoAccess(String pAcces){
        if(pAcces != null){
            pilaSemantica.push(new RS_ACCESS(pAcces));
        }
    }

    public void recuerdoID(String pIdent){
        pilaSemantica.push(new RS_IDENT(pIdent));
    }

    public void insertarTablaSimbolos(){

        RS_IDENT id = (RS_IDENT)pilaSemantica.pop();
        RegistroSemantico sig = pilaSemantica.pop();
        SimboloVariable var = new SimboloVariable();
        if (sig.valueType == RegistroSemantico.Value.TIPO){
            RS_Tipo tipo = (RS_Tipo) sig;
            var.nombre = id.ident;
            var.tipoSimbolo = "variable";
            var.acceso = "public";
            var.tipoVariable = tipo.tipo;
        } else {
            RS_ACCESS acc = (RS_ACCESS) sig;
            RS_Tipo tipo = (RS_Tipo)pilaSemantica.pop();

            var.nombre = id.ident;
            var.tipoSimbolo = "variable";
            var.acceso = acc.access;
            var.tipoVariable = tipo.tipo;
        }
        //var.printDatos();
        // verificar si ya el id esta en la pila
        boolean estaEnTabla = false;
        for(Simbolo sim : tablaSimbolos){
            if(sim.nombre.equals(var.nombre)){
                // Variable ya esta definida dar error
                //System.out.println("Ya esta en la tabla");
                estaEnTabla = true;
            }
        }

        if(estaEnTabla){
            // Agregar el error donde corresponde
        } else {
            tablaSimbolos.push(var);
        }

    }
    public void insertarTablaSimbolosAsignacion(){

        RS_IDENT id = (RS_IDENT)pilaSemantica.pop();
        RegistroSemantico sig = pilaSemantica.pop();
        SimboloVariable var = new SimboloVariable();

        if (sig.valueType == RegistroSemantico.Value.TIPO){
            RS_Tipo tipo = (RS_Tipo) sig;
            var.nombre = id.ident;
            var.tipoSimbolo = "variable";
            var.acceso = "public";
            var.tipoVariable = tipo.tipo;
        } else {
            RS_ACCESS acc = (RS_ACCESS) sig;
            RS_Tipo tipo = (RS_Tipo)pilaSemantica.pop();

            var.nombre = id.ident;
            var.tipoSimbolo = "variable";
            var.acceso = acc.access;
            var.tipoVariable = tipo.tipo;
        }
        //var.printDatos();
        // verificar si ya el id esta en la pila
        boolean estaEnTabla = false;
        for(Simbolo sim : tablaSimbolos){
            if(sim.nombre.equals(var.nombre)){
                // Variable ya esta definida dar error
                //System.out.println("Ya esta en la tabla");
                estaEnTabla = true;
            }
        }

        if(estaEnTabla){
            // Agregar el error donde corresponde
        } else {
            tablaSimbolos.push(var);
        }

    }

    public void recuerdaConstante(String pConst, String pTipo){
        RS_DO dop = new RS_DO(pTipo, pConst);
        pilaSemantica.push(dop);
    }

    public void recuerdaVariable(String pConst){
        RS_DO dop = new RS_DO("variable", pConst);
        pilaSemantica.push(dop);
    }

    public void recuerdaOperador(String pOperador){
        RS_Operador op = new RS_Operador(pOperador);
        pilaSemantica.push(op);
    }

    public void evalBinary(){

        for(RegistroSemantico r : pilaSemantica){
            r.printDatos();
        }
        RS_DO do_uno = (RS_DO) pilaSemantica.pop();
        RS_Operador do_op = (RS_Operador) pilaSemantica.pop();
        // El RS siguiente se obtiene después para evitar problemas de tipo
        // en caso de que el operador se igual ya que a la izq del igual
        // viene un RS_IDENT y no un RS_DO

        if(do_op.operador.equals("=")){
            // verificar que el tipo concuerde en ambos lados
            RegistroSemantico rs = pilaSemantica.pop();
            if(rs instanceof RS_IDENT){
                RS_IDENT do_dos = (RS_IDENT) rs;
                // mov dword [b], 5
                String codMov = "mov dword [";
                codMov = codMov.concat(do_dos.ident);
                codMov = codMov.concat("], ");
                codMov = codMov.concat(do_uno.valor);
                try{
                    writeLine(codMov, 0);
                } catch(IOException e){
                    e.printStackTrace();
                }

                pilaSemantica.push(do_dos);
                // dejar un RS_IDENT en la pila
            } else {
                RS_DO do_dos = (RS_DO) rs;
                // mov dword [b], 5
                String codMov = "mov dword [";
                codMov = codMov.concat(do_dos.valor);
                codMov = codMov.concat("], ");
                codMov = codMov.concat(do_uno.valor);
                try{
                    writeLine(codMov, 0);
                } catch(IOException e){
                    e.printStackTrace();
                }

            }

            // Generar un DO
            // hacer push del DO
        } else if(do_op.operador.equals("+")){

            // verificar que el tipo concuerde en ambos lados
            RS_DO do_dos = (RS_DO) pilaSemantica.pop();
            if(do_uno.tipo.equals("constante_numerico") & do_dos.tipo.equals("constante_numerico")){
                String resultado = String.valueOf(Integer.parseInt(do_uno.valor) + Integer.parseInt(do_dos.valor));
                RS_DO newDO = new RS_DO("constante_numerico", resultado);
                pilaSemantica.push(newDO);
            } else if(do_uno.tipo.equals("variable") & do_dos.tipo.equals("constante_numerico")){
                try{
                    // mov eax, dword [var]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(do_uno.valor);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // sub eax, num
                    String codResta = "add eax, ";
                    codResta = codResta.concat(do_dos.valor);
                    writeLine(codResta, 0);

                } catch (IOException e ){
                    e.printStackTrace();
                }
                // hago DO, variable, eax
                RS_DO newDO = new RS_DO("variable", "eax");
                pilaSemantica.push(newDO);

            } else if(do_uno.tipo.equals("constante_numerico") & do_dos.tipo.equals("variable")){
                try{
                    // mov eax, dword [var]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(do_dos.valor);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // sub eax, num
                    String codResta = "add eax, ";
                    codResta = codResta.concat(do_uno.valor);
                    writeLine(codResta, 0);

                } catch (IOException e ){
                    e.printStackTrace();
                }
                // hago DO, variable, eax
                RS_DO newDO = new RS_DO("variable", "eax");
                pilaSemantica.push(newDO);
            } else if(do_uno.tipo.equals("variable") & do_dos.tipo.equals("variable")){
                try{
                    // push ebx
                    writeLine("push ebx", 0);

                    // mov eax, dword [var]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(do_uno.valor);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // mov ebx, dword [var2]
                    codMov = "mov ebx, dword [";
                    codMov = codMov.concat(do_dos.valor);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // sub eax, num
                    String codResta = "add eax, ebx";
                    writeLine(codResta, 0);

                    writeLine("pop ebx", 0);

                } catch (IOException e ){
                    e.printStackTrace();
                }
                // hago DO, variable, eax
                RS_DO newDO = new RS_DO("variable", "eax");
                pilaSemantica.push(newDO);
            }else{
                // generar codigo asm de la operacion
                //Crear un registro DO
            }
            // Generar un DO
            // hacer push del DO
        } else if(do_op.operador.equals("-")){
            // verificar que el tipo concuerde en ambos lados
            RS_DO do_dos = (RS_DO) pilaSemantica.pop();
            if(do_uno.tipo.equals("constante_numerico") & do_dos.tipo.equals("constante_numerico")){
                String resultado = String.valueOf(Integer.parseInt(do_dos.valor) - Integer.parseInt(do_uno.valor));
                RS_DO newDO = new RS_DO("constante_numerico", resultado);
                pilaSemantica.push(newDO);
            } else if(do_uno.tipo.equals("variable") & do_dos.tipo.equals("constante_numerico")){
                try{
                    // mov eax, dword [var]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(do_uno.valor);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // sub eax, num
                    String codResta = "sub eax, ";
                    codResta = codResta.concat(do_dos.valor);
                    writeLine(codResta, 0);

                } catch (IOException e ){
                    e.printStackTrace();
                }
                // hago DO, variable, eax
                RS_DO newDO = new RS_DO("variable", "eax");
                pilaSemantica.push(newDO);

            } else if(do_uno.tipo.equals("constante_numerico") & do_dos.tipo.equals("variable")){
                try{
                    // mov eax, dword [var]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(do_dos.valor);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // sub eax, num
                    String codResta = "sub eax, ";
                    codResta = codResta.concat(do_uno.valor);
                    writeLine(codResta, 0);

                } catch (IOException e ){
                    e.printStackTrace();
                }
                // hago DO, variable, eax
                RS_DO newDO = new RS_DO("variable", "eax");
                pilaSemantica.push(newDO);
            } else if(do_uno.tipo.equals("variable") & do_dos.tipo.equals("variable")){
                try{
                    // push ebx
                    writeLine("push ebx", 0);

                    // mov eax, dword [var]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(do_uno.valor);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // mov ebx, dword [var2]
                    codMov = "mov ebx, dword [";
                    codMov = codMov.concat(do_dos.valor);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // sub eax, num
                    String codResta = "sub eax, ebx";
                    writeLine(codResta, 0);

                    writeLine("pop ebx", 0);

                } catch (IOException e ){
                    e.printStackTrace();
                }
                // hago DO, variable, eax
                RS_DO newDO = new RS_DO("variable", "eax");
                pilaSemantica.push(newDO);
            }else{
                // generar codigo asm de la operacion
                //Crear un registro DO
            }
            // Generar un DO
            // hacer push del DO
        } else if (do_op.operador.equals("<") || do_op.operador.equals("<=") || do_op.operador.equals(">") || do_op.operador.equals(">=") || do_op.operador.equals("==") || do_op.operador.equals("!=")) {
            RS_DO do_dos = (RS_DO) pilaSemantica.pop();
            if(do_uno.tipo.equals("constante_numerico") & do_dos.tipo.equals("constante_numerico")){
                String op = do_op.operador;

                try{

                    String codComparacion = "cmp ";
                    codComparacion = codComparacion.concat(do_uno.valor);
                    codComparacion = codComparacion.concat(", ");
                    codComparacion = codComparacion.concat(do_dos.valor);
                    writeLine(codComparacion, 0);
                    
                    String codCmp = "";
                    switch(op){
                        case "<":
                        writeLine("jl", 1);
                            break;
                        case "<=":
                        writeLine("jle", 1);
                            break;
                        case ">":
                        writeLine("jg", 1);
                            break;
                        case ">=":
                        writeLine("jge", 1);
                            break;
                        case "==":
                        writeLine("je", 1);
                            break;
                        case "!=":
                        writeLine("jne", 1);
                            break;
                    }
                } catch(IOException e){
                    e.printStackTrace();
                }
            }
            else if(do_uno.tipo.equals("constante_numerico") & do_dos.tipo.equals("variable")){
                // generar codigo asm de la operacion
                String nombreVar = do_dos.valor;
                int operando = Integer.parseInt(do_uno.valor);
                String op = do_op.operador;

                try{
                    // Para preservar eax
                    writeLine("push eax", 0);

                    // mov eax, dword [nombreVar]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(nombreVar);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    String codResta = "sub eax, ";
                    codResta = codResta.concat(do_uno.valor);
                    writeLine(codResta, 0);

                    String codComparacion = "cmp eax, ";
                    codComparacion = codComparacion.concat("0");
                    writeLine(codComparacion, 0);

                    writeLine("pop eax", 0);
                    
                    String codCmp = "";
                    switch(op){
                        case "<":
                        writeLine("jl", 1);
                            break;
                        case "<=":
                        writeLine("jle", 1);
                            break;
                        case ">":
                        writeLine("jg", 1);
                            break;
                        case ">=":
                        writeLine("jge", 1);
                            break;
                        case "==":
                        writeLine("je", 1);
                            break;
                        case "!=":
                        writeLine("jne", 1);
                            break;
                    }
                } catch(IOException e){
                    e.printStackTrace();
                }
                //Crear un registro DO
            }
            else if(do_uno.tipo.equals("variable") & do_dos.tipo.equals("constante_numerico")){
                // generar codigo asm de la operacion
                String nombreVar = do_uno.valor;
                // int operando = Integer.parseInt(do_dos.valor);
                String op = do_op.operador;

                try{
                    // push eax
                    writeLine("push eax", 0);

                    // mov eax, dword [nombreVar]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(nombreVar);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // sub eax, valor
                    String codResta = "sub eax, ";
                    codResta = codResta.concat(do_dos.valor);
                    writeLine(codResta, 0);

                    String codComparacion = "cmp eax, ";
                    codComparacion = codComparacion.concat("0");
                    writeLine(codComparacion, 0);
                    
                    writeLine("pop eax", 0);
                    
                    String codCmp = "";
                    switch(op){
                        case "<":
                        writeLine("jl", 1);
                            break;
                        case "<=":
                        writeLine("jle", 1);
                            break;
                        case ">":
                        writeLine("jg", 1);
                            break;
                        case ">=":
                        writeLine("jge", 1);
                            break;
                        case "==":
                        writeLine("je", 1);
                            break;
                        case "!=":
                        writeLine("jne", 1);
                            break;
                    }
                } catch(IOException e){
                    e.printStackTrace();
                }
                //Crear un registro DO
            }
            else if(do_uno.tipo.equals("variable") & do_dos.tipo.equals("variable")){
                // generar codigo asm de la operacion
                String nombreVarUno = do_uno.valor;
                String nombreVarDos = do_dos.valor;
                // int operando = Integer.parseInt(do_dos.valor);
                String op = do_op.operador;

                try{
                    writeLine("push eax", 0);
                    writeLine("push ebx", 0);

                    // mov eax, dword [nombreVarUno]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(nombreVarUno);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // mov ebx, dword [nombreVarDos]
                    codMov = "mov ebx, dword [";
                    codMov = codMov.concat(nombreVarDos);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // sub ebx, eax
                    String codResta = "sub ebx, eax";
                    writeLine(codResta, 0);

                    // cmp dword [nombreDos]
                    String codComparacion = "cmp ebx, 0";
                    writeLine(codComparacion, 0);

                    writeLine("pop ebx", 0);
                    writeLine("pop eax", 0);
                    
                    String codCmp = "";
                    switch(op){
                        case "<":
                        writeLine("jl", 1);
                            break;
                        case "<=":
                        writeLine("jle", 1);
                            break;
                        case ">":
                        writeLine("jg", 1);
                            break;
                        case ">=":
                        writeLine("jge", 1);
                            break;
                        case "==":
                        writeLine("je", 1);
                            break;
                        case "!=":
                        writeLine("jne", 1);
                            break;
                    }
                } catch(IOException e){
                    e.printStackTrace();
                }
                //Crear un registro DO
            }

        } else {
            // verificar que el tipo concuerde en ambos lados
            RS_DO do_dos = (RS_DO) pilaSemantica.pop();
            // Generar un DO
            // hacer push del DO
        }
    }

    public void startIf(){
        try{
            writeLine(";----------IF---------", 0);
        } catch(IOException e ){
            e.printStackTrace();
        }
        String elseLabel = "Else_label_";
        elseLabel = elseLabel.concat(String.valueOf(contador));

        String exitLabel = "Exit_label_";
        exitLabel = exitLabel.concat(String.valueOf(contador));

        RS_IF new_IF = new RS_IF(elseLabel, exitLabel);

        contador++;
        pilaSemantica.push(new_IF);
    }

    public void testIf(){
        RS_IF rs = (RS_IF) pilaSemantica.pop();

        String elseLabel = rs.else_label;
        try{
            writeLine(elseLabel, 0);
        } catch(IOException e){
            e.printStackTrace();
        }
        pilaSemantica.push(rs);
    }

    public void startElse(){
        RS_IF rs = (RS_IF) pilaSemantica.pop();
        String exitLabel = rs.exit_label;
        String elseLabel = rs.else_label;
        try{
            // jump exitLabel
            writeLine("jump", 1);
            writeLine(exitLabel, 0);
            // elseLabel:
            writeLine(elseLabel, 1);
            writeLine(":", 0);
        } catch(IOException e){
            e.printStackTrace();
        }
        pilaSemantica.push(rs);
        
    }

    public void endIf(){
        RS_IF rs = (RS_IF) pilaSemantica.pop();
        String exitLabel = rs.exit_label;
        try{
            // exitlabel:
            writeLine(exitLabel, 1);
            writeLine(":", 0);
            writeLine(";-------Fin if-------", 0);
        } catch(IOException e){
            e.printStackTrace();
        }
    }

    public void startWhile(){
        String WhileLabel = "While_label_";
        WhileLabel = WhileLabel.concat(String.valueOf(contador));

        String exitLabel = "While_exit_label_";
        exitLabel = exitLabel.concat(String.valueOf(contador));

        RS_WHILE new_while = new RS_WHILE(WhileLabel, exitLabel);

        try{
            writeLine(";----------While---------", 0);
            writeLine(WhileLabel, 1);
            writeLine(":", 0);
            
        } catch(IOException e ){
            e.printStackTrace();
        }

        contador++;
        pilaSemantica.push(new_while);
    }

    public void testWhile(){
        RS_WHILE rs = (RS_WHILE) pilaSemantica.pop();

        String whileLabel = rs.while_label;
        try{
            writeLine(whileLabel, 0);
        } catch(IOException e){
            e.printStackTrace();
        }
        pilaSemantica.push(rs);
    }

    public void endWhile(){

    }

    public void finArchivo(){
        try{
            writeLine("SECTION .bss", 0);
            for(Simbolo s : tablaSimbolos){
                
                if(s.tipoSimbolo.equals("variable")){
                    SimboloVariable var = (SimboloVariable) s;
                    writeLine(var.nombre, 1);
                    writeLine("resb", 1);
                    String tipo = var.tipoVariable;
                    switch(tipo){
                        case "int": 
                            writeLine("4", 0);
                            break;
                        case "string": 
                            writeLine("2", 0);
                            break;
                        case "uint":
                            writeLine("4", 0);
                            break;
                        case "bytes":
                            writeLine("1", 0);
                            break;
                        case "bytes1":
                            writeLine("1", 0);
                            break;
                        case "bytes2":
                            writeLine("2", 0);
                            break;
                        case "bytes3":
                            writeLine("3", 0);
                            break;

                        default:
                            break;
                    }
                }
            }
        } catch(IOException e ){
            e.printStackTrace();
        }
    }

    public void inicioArchivo(){
        try{
            writeLine("SECTION .text", 0);
            writeLine("global start", 0);
            writeLine("start:", 0);
        } catch(IOException e){
            e.printStackTrace();
        }
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              String RESULT =null;
inicioArchivo();
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_INICIO ::= NT$0 INICIO 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		finArchivo();
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= pragma solidity techo numero numero punto_coma contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO_S ::= contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY_CONTRACT ::= EN BODY_CONTRACT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_CONTRACT ::= BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY_CONTRACT_P ::= VAR_CONTRACT BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BODY_CONTRACT_P ::= BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY_CONTRACT_PP ::= STRUCTURE BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BODY_CONTRACT_PP ::= BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BODY_CONTRACT_PPP ::= FUNC BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BODY_CONTRACT_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNC ::= functionSoli ident O_Parent_R TIPO ident FUNC_PARAM C_Parent_R FUNC_MOD FUNC_RETURNS O_Parent_L CUERPO_M returnSoli EXP punto_coma C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNC ::= functionSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNC_PARAM ::= coma TIPO ident FUNC_PARAM 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNC_PARAM ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNC_MOD ::= payableSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNC_MOD ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNC_MOD ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNC_MOD ::= internalSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNC_MOD ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNC_RETURNS ::= returns O_Parent_R TIPO ident C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNC_RETURNS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_M ::= CUERPO_MA CUERPO_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO_MA ::= TIPO VAR_ARR VAR_ACCESS ident CUERPO_ASSIGN_F 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_MA",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO_MA ::= CUERPO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_MA",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$1 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaVariable(id);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",95, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$2 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaOperador(op_ig);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",96, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO ::= ident NT$1 igual NT$2 CUERPO_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPO ::= O_Parent_R FUNC_CALL_PARAMS punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO ::= STRU 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO_P ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_P ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO_ASSIGN_F ::= igual CUERPO_ASSIGN_FP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_F",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUERPO_ASSIGN_F ::= punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_F",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CUERPO_ASSIGN_FP ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_FP",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CUERPO_ASSIGN_FP ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_FP",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STRUCTURE ::= structSoli ident O_Parent_L TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STRUCTURE ::= structSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STRUCTURE ::= structSoli ident error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STRUCTURE_VAR ::= TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STRUCTURE_VAR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STRU ::= STRU_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STRU ::= STRU_FOR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STRU ::= STRU_DO_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STRU ::= STRU_IF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$3 ::= 
            {
              String RESULT =null;
 startWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",97, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
evalBinary();
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",98, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$5 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
 testWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",99, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STRU_WHILE ::= whileSoli NT$3 O_Parent_R OP_BOOL NT$4 C_Parent_R NT$5 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		 endWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STRU_WHILE ::= whileSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STRU_FOR ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma F_EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_FOR",32, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STRU_DO_WHILE ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_DO_WHILE",34, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$6 ::= 
            {
              String RESULT =null;
 startIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",100, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$7 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
evalBinary();
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",101, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
 testIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",102, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STRU_IF ::= ifSoli NT$6 O_Parent_R OP_BOOL NT$7 C_Parent_R NT$8 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",35, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // STRU_IF ::= ifSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",35, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$9 ::= 
            {
              String RESULT =null;
 startElse(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",103, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STRU_ELSE ::= elseSoli NT$9 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		 endIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STRU_ELSE ::= elseSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STRU_ELSE ::= 
            {
              String RESULT =null;
		 endIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STRU_IF_LINE ::= O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STRU_IF_LINE ::= O_Parent_R error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STRU_IF_LINE ::= O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BODY_SENT_M ::= BODY_SENT BODY_SENT_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",31, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BODY_SENT_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",31, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$10 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaVariable(id);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",104, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BODY_SENT ::= ident NT$10 BODY_SENT_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BODY_SENT ::= thisSoli punto ident igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$11 ::= 
            {
              String RESULT =null;
 startWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",105, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$12 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
 testWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",106, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BODY_SENT ::= whileSoli NT$11 O_Parent_R OP_BOOL C_Parent_R NT$12 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		 endWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BODY_SENT ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma F_EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BODY_SENT ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BODY_SENT ::= STRU_IF_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BODY_SENT ::= returnSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BODY_SENT ::= breakSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BODY_SENT ::= continueSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BODY_SENT_P ::= punto ident BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",29, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BODY_SENT_P ::= BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",29, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BODY_SENT_PP ::= BODY_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BODY_SENT_PP ::= BODY_FUN_CALL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // BODY_SENT_PP ::= igual O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$13 ::= 
            {
              String RESULT =null;
 startIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",107, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$14 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
evalBinary();
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",108, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$15 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
 testIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",109, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // STRU_IF_ELSE_IN ::= ifSoli NT$13 O_Parent_R OP_BOOL NT$14 C_Parent_R NT$15 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE_IN 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_ELSE_IN",40, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$16 ::= 
            {
              String RESULT =null;
 startElse(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",110, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // STRU_ELSE_IN ::= elseSoli NT$16 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		 endIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // STRU_ELSE_IN ::= 
            {
              String RESULT =null;
		 endIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$17 ::= 
            {
              String RESULT =null;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdaOperador(op_ig); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",111, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BODY_ASSIGN ::= igual NT$17 EXP punto_coma 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		evalBinary();
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_ASSIGN",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BODY_FUN_CALL ::= O_Parent_R FUNC_CALL_PARAMS C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_FUN_CALL",30, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FOR_VAR ::= ident igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FOR_VAR",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUNC_CALL_PARAMS ::= FS_EXP FUNC_CALL_PARAMS_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS",22, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUNC_CALL_PARAMS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS",22, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUNC_CALL_PARAMS_P ::= coma FS_EXP FUNC_CALL_PARAMS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS_P",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNC_CALL_PARAMS_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS_P",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ASSIGN_NOT_VAR ::= EXP punto_coma 
            {
              String RESULT =null;
		 evalBinary(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGN_NOT_VAR",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EN ::= enumSoli ident O_Parent_L ident EN_IDENT C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EN ::= enumSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EN_IDENT ::= coma ident EN_IDENT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EN_IDENT ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$18 ::= 
            {
              String RESULT =null;
		int inputTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int inputTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String inputTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdoTipo(inputTipo); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",112, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$19 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int inputTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int inputTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String inputTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int inputAccessleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int inputAccessright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String inputAccess = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdoAccess(inputAccess); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",113, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$20 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int inputTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).left;
		int inputTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).right;
		String inputTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).value;
		int inputAccessleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int inputAccessright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String inputAccess = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdoID(b); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$20",114, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VAR_CONTRACT ::= TIPO NT$18 VAR_ARR VAR_ACCESS NT$19 ident NT$20 VAR_CONTRACT_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int inputTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).left;
		int inputTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).right;
		String inputTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).value;
		int inputAccessleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).left;
		int inputAccessright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).right;
		String inputAccess = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VAR_CONTRACT ::= TIPO error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VAR_CONTRACT_P ::= punto_coma 
            {
              String RESULT =null;
		 insertarTablaSimbolos(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VAR_CONTRACT_P ::= VAR_CONTRACT_C punto_coma 
            {
              String RESULT =null;
		 insertarTablaSimbolosAsignacion(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$21 ::= 
            {
              String RESULT =null;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaOperador(op_ig);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$21",115, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VAR_CONTRACT_C ::= igual NT$21 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		evalBinary();
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_C",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VAR_ARR ::= O_Parent_C C_Parent_C 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VAR_ARR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VAR_ACCESS ::= publicSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VAR_ACCESS ::= privateSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // VAR_ACCESS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$22 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaVariable(id);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$22",116, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP ::= ident NT$22 EXP_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP ::= thisSoli EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXP ::= BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXP ::= ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXP ::= BOOL_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // BOOL_GATE ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // BOOL_GATE ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$23 ::= 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaConstante(num, "constante_numerico");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$23",117, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ARIT_GATE ::= numero NT$23 OP_ARIT_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_GATE",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ARIT_GATE ::= numero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		recuerdaConstante(num, "constante_numerico");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_GATE",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXP_P ::= punto ident EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXP_P ::= EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXP_P_S ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$24 ::= 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaOperador(op);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$24",118, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXP_P_S ::= OP_EXCL NT$24 PARENT_S OP_ARIT 
            {
              String RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXP_P_S ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXP_P_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXP_PP ::= punto ident EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PP",51, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXP_PPP ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$25 ::= 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaOperador(op);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$25",119, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXP_PPP ::= OP_EXCL NT$25 PARENT_S OP_ARIT 
            {
              String RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXP_PPP ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // FUNC_CALL_CASE ::= FS_EXP FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // FUNC_CALL_CASE ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // FUNC_CALL_CASE_P ::= coma FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // FUNC_CALL_CASE_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$26 ::= 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaConstante(num, "constante_numerico");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$26",120, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OP_ARIT ::= numero NT$26 OP_ARIT_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$27 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaVariable(id);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$27",121, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OP_ARIT ::= ident NT$27 OP_ARIT_A 
            {
              String RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OP_ARIT ::= thisSoli punto ident OP_ARIT_A 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OP_ARIT ::= numero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		recuerdaConstante(num, "constante_numerico"); evalBinary();
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OP_ARIT_A ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_A",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OP_ARIT_A ::= OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_A",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OP_ARIT_A ::= 
            {
              String RESULT =null;
		evalBinary();
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_A",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$28 ::= 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaOperador(op);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$28",122, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OP_ARIT_P ::= OP NT$28 PARENT_S OP_ARIT 
            {
              String RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OP_ARIT_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // PARENT_S ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PARENT_S",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // PARENT_S ::= O_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PARENT_S",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // PARENT_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PARENT_S",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // OP ::= mas 
            {
              String RESULT =null;
		int op_opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = op_op;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // OP ::= menos 
            {
              String RESULT =null;
		int op_opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = op_op;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // OP_EXCL ::= mas 
            {
              String RESULT =null;
		int op_opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = op_op;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OP_EXCL ::= menos 
            {
              String RESULT =null;
		int op_opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = op_op;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OP_EXCL ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OP_EXCL ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // OP_EXCL ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // OP_EXCL ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // OP_EXCL ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // OP_EXCL ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // OP_EXCL ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // OP_BOOL ::= NEGADO OP_BOOL_N 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NT$29 ::= 
            {
              String RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaConstante(bool, "constante_booleana");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$29",123, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // OP_BOOL_N ::= trueSoli NT$29 OP_BOOL_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NT$30 ::= 
            {
              String RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaConstante(bool, "constante_booleana");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$30",124, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // OP_BOOL_N ::= falseSoli NT$30 OP_BOOL_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$31 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdaVariable(id); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$31",125, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // OP_BOOL_N ::= ident NT$31 OP_BOOL_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // NT$32 ::= 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdaConstante(num, "constante_numerico"); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$32",126, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // OP_BOOL_N ::= numero NT$32 OP_BOOL_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // NT$33 ::= 
            {
              String RESULT =null;
		int op_bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdaOperador(op_b); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$33",127, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OP_BOOL_P ::= OP_OP_BOOL NT$33 OP_BOOL 
            {
              String RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int op_bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int op_bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String op_b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // OP_BOOL_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // OP_OP_BOOL ::= igual_igual 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OP_OP_BOOL ::= mayor_igual 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // OP_OP_BOOL ::= mayor 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // OP_OP_BOOL ::= menor_igual 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // OP_OP_BOOL ::= menor 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // OP_OP_BOOL ::= diferente 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // OP_OP_BOOL ::= op_or 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // OP_OP_BOOL ::= op_and 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // NEGADO ::= negacion 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NEGADO",76, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NEGADO ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NEGADO",76, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // F_EXP ::= ident F_EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",63, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // F_EXP ::= thisSoli F_EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",63, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // F_EXP ::= F_BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",63, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // F_EXP ::= F_ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",63, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // F_ARIT_GATE ::= numero F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_ARIT_GATE",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // F_EXP_P ::= punto ident F_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P",64, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // F_EXP_P ::= F_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P",64, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // F_EXP_P_S ::= O_Parent_R F_FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P_S",69, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // F_EXP_P_S ::= F_OP F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P_S",69, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // F_EXP_P_S ::= igual F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P_S",69, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // F_EXP_PP ::= punto ident F_EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // F_EXP_PPP ::= O_Parent_R F_FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PPP",72, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // F_EXP_PPP ::= F_OP F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PPP",72, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // F_EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PPP",72, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // F_FUNC_CALL_CASE ::= ident F_FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE",70, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // F_FUNC_CALL_CASE ::= thisSoli punto ident F_FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE",70, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // F_FUNC_CALL_CASE ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE",70, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // F_FUNC_CALL_CASE_P ::= coma F_FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE_P",73, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // F_FUNC_CALL_CASE_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE_P",73, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // F_OP_ARIT ::= numero F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT",71, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // F_OP_ARIT ::= ident F_OP_ARIT_Parent F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT",71, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // F_OP_ARIT ::= thisSoli punto ident F_OP_ARIT_Parent F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT",71, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // F_OP_ARIT_P ::= F_OP F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_P",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // F_OP_ARIT_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_P",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // F_OP_ARIT_Parent ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_Parent",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // F_OP_ARIT_Parent ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_Parent",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // F_OP ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // F_OP ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // F_OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // F_OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // F_OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // F_OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // F_OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // F_OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // F_OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // F_BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_BODY_LIT_TF",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // F_BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_BODY_LIT_TF",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // FS_EXP ::= ident FS_EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // FS_EXP ::= thisSoli FS_EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // FS_EXP ::= FS_BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // FS_EXP ::= FS_ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // FS_EXP ::= FS_BOOL_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // FS_BOOL_GATE ::= trueSoli FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_BOOL_GATE",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // FS_BOOL_GATE ::= falseSoli FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_BOOL_GATE",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // FS_ARIT_GATE ::= numero FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_ARIT_GATE",82, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // FS_EXP_P ::= punto ident FS_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P",79, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // FS_EXP_P ::= FS_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P",79, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // FS_EXP_P_S ::= O_Parent_R FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P_S",83, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // FS_EXP_P_S ::= FS_OP FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P_S",83, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // FS_EXP_P_S ::= FS_OP_OP_BOOL FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P_S",83, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // FS_EXP_P_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P_S",83, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // FS_EXP_PP ::= punto ident FS_EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PP",80, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // FS_EXP_PPP ::= O_Parent_R FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PPP",84, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // FS_EXP_PPP ::= FS_OP FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PPP",84, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // FS_EXP_PPP ::= FS_OP_OP_BOOL FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PPP",84, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // FS_EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PPP",84, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // FS_BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_BODY_LIT_TF",81, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // FS_BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_BODY_LIT_TF",81, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // FS_OP_BOOL ::= negacion FS_OP_BOOL_F 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // FS_OP_BOOL ::= FS_OP_BOOL_F 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // FS_OP_BOOL ::= trueSoli FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // FS_OP_BOOL ::= falseSoli FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // FS_OP_BOOL ::= numero FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // FS_OP_BOOL_F ::= ident PCLASS FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL_F",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // FS_OP_BOOL_F ::= thisSoli punto ident FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL_F",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // FS_OP_BOOL_P ::= FS_OP_OP_BOOL FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL_P",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // FS_OP_BOOL_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL_P",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // FS_OP_OP_BOOL ::= igual_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // FS_OP_OP_BOOL ::= mayor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // FS_OP_OP_BOOL ::= mayor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // FS_OP_OP_BOOL ::= menor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // FS_OP_OP_BOOL ::= menor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // FS_OP_OP_BOOL ::= diferente 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // FS_OP_OP_BOOL ::= op_or 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // FS_OP_OP_BOOL ::= op_and 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // FS_OP_OP_BOOL ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // FS_OP_OP_BOOL ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // FS_OP_OP_BOOL ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // FS_OP_OP_BOOL ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // FS_OP_OP_BOOL ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // FS_OP_OP_BOOL ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // FS_OP_OP_BOOL ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // FS_OP_OP_BOOL ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // FS_OP_OP_BOOL ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // PCLASS ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PCLASS",93, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // PCLASS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PCLASS",93, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // TIPO ::= bool 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // TIPO ::= byteSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // TIPO ::= bytes 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // TIPO ::= string 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // TIPO ::= uint 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // TIPO ::= uint_O 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // TIPO ::= uint_DS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000001(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // TIPO ::= uint_TD 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // TIPO ::= uint_SC 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // TIPO ::= uint_CVO 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // TIPO ::= uint_DCS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // TIPO ::= intSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // TIPO ::= int_O 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // TIPO ::= int_DS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // TIPO ::= int_TD 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // TIPO ::= int_SC 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // TIPO ::= int_CVO 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // TIPO ::= int_DCS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // TIPO ::= address 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // TIPO ::= address_payable 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // TIPO ::= charss 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // TIPO ::= ufixedSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // TIPO ::= B_I 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // TIPO ::= B_II 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // TIPO ::= B_III 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // TIPO ::= B_IV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // TIPO ::= B_V 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // TIPO ::= B_VI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // TIPO ::= B_VII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // TIPO ::= B_IIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // TIPO ::= B_IX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // TIPO ::= B_X 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // TIPO ::= B_XI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // TIPO ::= B_XII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // TIPO ::= B_XIII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // TIPO ::= B_XIV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // TIPO ::= B_XV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // TIPO ::= B_XVI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // TIPO ::= B_XVII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // TIPO ::= B_XIIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // TIPO ::= B_XIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // TIPO ::= B_XX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // TIPO ::= B_XXI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // TIPO ::= B_XXII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // TIPO ::= B_XXIII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // TIPO ::= B_XXIV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // TIPO ::= B_XXV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // TIPO ::= B_XXVI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // TIPO ::= B_XXVII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // TIPO ::= B_XXIIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // TIPO ::= B_XXIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // TIPO ::= B_XXX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // TIPO ::= B_XXXI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // TIPO ::= B_XXXII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$analisis_sintactico$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$analisis_sintactico$do_action_part00000001(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
