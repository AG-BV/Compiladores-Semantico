
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symb.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0152\000\002\002\004\000\002\002\016\000\002\074" +
    "\010\000\002\074\002\000\002\003\004\000\002\003\003" +
    "\000\002\004\004\000\002\004\003\000\002\005\004\000" +
    "\002\005\003\000\002\006\004\000\002\006\002\000\002" +
    "\011\021\000\002\011\005\000\002\054\006\000\002\054" +
    "\002\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\002\000\002\056\007\000" +
    "\002\056\002\000\002\057\004\000\002\057\002\000\002" +
    "\075\007\000\002\075\003\000\002\137\002\000\002\140" +
    "\002\000\002\053\007\000\002\053\004\000\002\053\005" +
    "\000\002\053\003\000\002\062\003\000\002\062\003\000" +
    "\002\076\004\000\002\076\003\000\002\077\003\000\002" +
    "\077\003\000\002\047\014\000\002\047\005\000\002\047" +
    "\006\000\002\050\010\000\002\050\002\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\141\002\000\002\142\002\000\002\033\014\000\002" +
    "\033\005\000\002\041\016\000\002\043\014\000\002\143" +
    "\002\000\002\144\002\000\002\044\015\000\002\044\005" +
    "\000\002\145\002\000\002\045\010\000\002\045\005\000" +
    "\002\045\002\000\002\046\012\000\002\046\005\000\002" +
    "\046\011\000\002\040\004\000\002\040\002\000\002\146" +
    "\002\000\002\034\005\000\002\034\010\000\002\147\002" +
    "\000\002\150\002\000\002\034\014\000\002\034\016\000" +
    "\002\034\014\000\002\034\003\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\036\005\000\002\036" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\013" +
    "\000\002\151\002\000\002\152\002\000\002\051\015\000" +
    "\002\153\002\000\002\052\010\000\002\052\002\000\002" +
    "\154\002\000\002\035\006\000\002\037\006\000\002\042" +
    "\005\000\002\027\004\000\002\027\002\000\002\030\005" +
    "\000\002\030\002\000\002\060\004\000\002\007\010\000" +
    "\002\007\005\000\002\012\005\000\002\012\002\000\002" +
    "\155\002\000\002\156\002\000\002\157\002\000\002\016" +
    "\012\000\002\016\005\000\002\032\003\000\002\032\004" +
    "\000\002\160\002\000\002\017\005\000\002\014\004\000" +
    "\002\014\002\000\002\015\003\000\002\015\003\000\002" +
    "\015\002\000\002\161\002\000\002\020\005\000\002\020" +
    "\004\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\067\004\000\002\067\004\000\002\162\002\000" +
    "\002\072\005\000\002\072\003\000\002\063\005\000\002" +
    "\063\003\000\002\073\004\000\002\073\005\000\002\073" +
    "\004\000\002\073\002\000\002\064\005\000\002\065\004" +
    "\000\002\163\002\000\002\065\006\000\002\065\004\000" +
    "\002\065\002\000\002\070\004\000\002\070\003\000\002" +
    "\071\004\000\002\071\003\000\002\021\004\000\002\164" +
    "\002\000\002\021\005\000\002\021\006\000\002\021\003" +
    "\000\002\134\004\000\002\134\003\000\002\134\002\000" +
    "\002\165\002\000\002\025\006\000\002\025\003\000\002" +
    "\133\003\000\002\133\003\000\002\133\002\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\066\003\000\002" +
    "\066\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\066\003\000\002\066\003\000\002\066\003" +
    "\000\002\066\003\000\002\023\004\000\002\116\004\000" +
    "\002\116\004\000\002\166\002\000\002\116\005\000\002" +
    "\167\002\000\002\116\005\000\002\170\002\000\002\026" +
    "\005\000\002\026\002\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\115\003\000\002\115\002\000\002\031\003\000\002\031" +
    "\003\000\002\100\004\000\002\100\004\000\002\100\003" +
    "\000\002\100\003\000\002\104\004\000\002\101\005\000" +
    "\002\101\003\000\002\106\004\000\002\106\004\000\002" +
    "\106\004\000\002\102\005\000\002\111\004\000\002\111" +
    "\004\000\002\111\002\000\002\107\004\000\002\107\006" +
    "\000\002\107\003\000\002\112\004\000\002\112\003\000" +
    "\002\110\004\000\002\110\005\000\002\110\007\000\002" +
    "\105\004\000\002\105\002\000\002\113\004\000\002\113" +
    "\002\000\002\114\003\000\002\114\003\000\002\114\003" +
    "\000\002\114\003\000\002\114\003\000\002\114\003\000" +
    "\002\114\003\000\002\114\003\000\002\114\003\000\002" +
    "\103\003\000\002\103\003\000\002\117\004\000\002\117" +
    "\004\000\002\117\003\000\002\117\003\000\002\117\003" +
    "\000\002\127\004\000\002\127\004\000\002\123\004\000" +
    "\002\120\005\000\002\120\003\000\002\124\004\000\002" +
    "\124\004\000\002\124\004\000\002\124\002\000\002\121" +
    "\005\000\002\125\004\000\002\125\004\000\002\125\004" +
    "\000\002\125\002\000\002\122\003\000\002\122\003\000" +
    "\002\132\004\000\002\132\003\000\002\132\004\000\002" +
    "\132\004\000\002\132\004\000\002\135\005\000\002\135" +
    "\006\000\002\130\004\000\002\130\002\000\002\131\003" +
    "\000\002\131\003\000\002\131\003\000\002\131\003\000" +
    "\002\131\003\000\002\131\003\000\002\131\003\000\002" +
    "\131\003\000\002\131\003\000\002\131\003\000\002\131" +
    "\003\000\002\131\003\000\002\131\003\000\002\131\003" +
    "\000\002\131\003\000\002\131\003\000\002\131\003\000" +
    "\002\136\004\000\002\136\002\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0258\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\006\010\001\002\000\004\120\011\001\002\000" +
    "\004\120\012\001\002\000\004\013\013\001\002\000\004" +
    "\007\014\001\002\000\004\117\015\001\002\000\004\010" +
    "\016\001\002\000\166\011\ufff6\012\073\015\020\016\022" +
    "\017\036\020\104\021\063\022\116\023\111\024\034\025" +
    "\105\026\106\027\027\030\031\031\075\032\065\033\115" +
    "\034\072\035\076\036\110\037\066\107\103\110\055\114" +
    "\062\115\042\116\113\123\070\124\061\125\112\126\046" +
    "\127\054\130\040\131\047\132\102\133\045\134\052\135" +
    "\071\136\032\137\025\140\017\141\057\142\114\143\074" +
    "\144\117\145\120\146\056\147\041\150\050\151\033\152" +
    "\037\153\026\154\030\155\100\156\021\157\035\160\024" +
    "\161\060\162\053\001\002\000\014\003\ufec2\040\ufec2\042" +
    "\ufec2\043\ufec2\117\ufec2\001\002\000\014\003\ufee5\040\ufee5" +
    "\042\ufee5\043\ufee5\117\ufee5\001\002\000\014\003\ufeb4\040" +
    "\ufeb4\042\ufeb4\043\ufeb4\117\ufeb4\001\002\000\014\003\ufee4" +
    "\040\ufee4\042\ufee4\043\ufee4\117\ufee4\001\002\000\014\003" +
    "\u024c\040\uff9a\042\uff9a\043\uff9a\117\uff9a\001\002\000\014" +
    "\003\ufeb2\040\ufeb2\042\ufeb2\043\ufeb2\117\ufeb2\001\002\000" +
    "\014\003\ufec3\040\ufec3\042\ufec3\043\ufec3\117\ufec3\001\002" +
    "\000\014\003\ufeb7\040\ufeb7\042\ufeb7\043\ufeb7\117\ufeb7\001" +
    "\002\000\014\003\ufeda\040\ufeda\042\ufeda\043\ufeda\117\ufeda" +
    "\001\002\000\014\003\ufeb6\040\ufeb6\042\ufeb6\043\ufeb6\117" +
    "\ufeb6\001\002\000\014\003\ufed9\040\ufed9\042\ufed9\043\ufed9" +
    "\117\ufed9\001\002\000\014\003\ufec4\040\ufec4\042\ufec4\043" +
    "\ufec4\117\ufec4\001\002\000\014\003\ufeb9\040\ufeb9\042\ufeb9" +
    "\043\ufeb9\117\ufeb9\001\002\000\014\003\ufedd\040\ufedd\042" +
    "\ufedd\043\ufedd\117\ufedd\001\002\000\014\003\ufeb3\040\ufeb3" +
    "\042\ufeb3\043\ufeb3\117\ufeb3\001\002\000\014\003\ufee3\040" +
    "\ufee3\042\ufee3\043\ufee3\117\ufee3\001\002\000\014\003\ufeb8" +
    "\040\ufeb8\042\ufeb8\043\ufeb8\117\ufeb8\001\002\000\014\003" +
    "\ufeca\040\ufeca\042\ufeca\043\ufeca\117\ufeca\001\002\000\014" +
    "\003\ufebb\040\ufebb\042\ufebb\043\ufebb\117\ufebb\001\002\000" +
    "\014\003\ufee2\040\ufee2\042\ufee2\043\ufee2\117\ufee2\001\002" +
    "\000\164\011\ufff6\015\020\016\022\017\036\020\104\021" +
    "\063\022\116\023\111\024\034\025\105\026\106\027\027" +
    "\030\031\031\075\032\065\033\115\034\072\035\076\036" +
    "\110\037\066\107\103\110\055\114\062\115\042\116\113" +
    "\123\070\124\061\125\112\126\046\127\054\130\040\131" +
    "\047\132\102\133\045\134\052\135\071\136\032\137\025" +
    "\140\017\141\057\142\114\143\074\144\117\145\120\146" +
    "\056\147\041\150\050\151\033\152\037\153\026\154\030" +
    "\155\100\156\021\157\035\160\024\161\060\162\053\001" +
    "\002\000\004\011\ufffa\001\002\000\014\003\ufec7\040\ufec7" +
    "\042\ufec7\043\ufec7\117\ufec7\001\002\000\014\003\ufecc\040" +
    "\ufecc\042\ufecc\043\ufecc\117\ufecc\001\002\000\014\003\ufec9" +
    "\040\ufec9\042\ufec9\043\ufec9\117\ufec9\001\002\000\014\003" +
    "\ufeba\040\ufeba\042\ufeba\043\ufeba\117\ufeba\001\002\000\004" +
    "\011\ufffc\001\002\000\014\003\ufec6\040\ufec6\042\ufec6\043" +
    "\ufec6\117\ufec6\001\002\000\014\003\ufeb0\040\ufeb0\042\ufeb0" +
    "\043\ufeb0\117\ufeb0\001\002\000\014\003\ufecb\040\ufecb\042" +
    "\ufecb\043\ufecb\117\ufecb\001\002\000\006\003\175\117\176" +
    "\001\002\000\014\003\ufebc\040\ufebc\042\ufebc\043\ufebc\117" +
    "\ufebc\001\002\000\014\003\ufec1\040\ufec1\042\ufec1\043\ufec1" +
    "\117\ufec1\001\002\000\014\003\ufeb1\040\ufeb1\042\ufeb1\043" +
    "\ufeb1\117\ufeb1\001\002\000\014\003\ufece\040\ufece\042\ufece" +
    "\043\ufece\117\ufece\001\002\000\014\003\ufed1\040\ufed1\042" +
    "\ufed1\043\ufed1\117\ufed1\001\002\000\014\003\ufee0\040\ufee0" +
    "\042\ufee0\043\ufee0\117\ufee0\001\002\000\004\011\165\001" +
    "\002\000\014\003\ufed7\040\ufed7\042\ufed7\043\ufed7\117\ufed7" +
    "\001\002\000\014\003\ufed2\040\ufed2\042\ufed2\043\ufed2\117" +
    "\ufed2\001\002\000\004\011\ufff8\001\002\000\014\003\ufecf" +
    "\040\ufecf\042\ufecf\043\ufecf\117\ufecf\001\002\000\014\003" +
    "\ufec5\040\ufec5\042\ufec5\043\ufec5\117\ufec5\001\002\000\014" +
    "\003\ufed5\040\ufed5\042\ufed5\043\ufed5\117\ufed5\001\002\000" +
    "\006\003\153\117\154\001\002\000\014\003\ufebf\040\ufebf" +
    "\042\ufebf\043\ufebf\117\ufebf\001\002\000\014\003\ufed8\040" +
    "\ufed8\042\ufed8\043\ufed8\117\ufed8\001\002\000\014\003\ufed4" +
    "\040\ufed4\042\ufed4\043\ufed4\117\ufed4\001\002\000\166\011" +
    "\ufff6\012\073\015\020\016\022\017\036\020\104\021\063" +
    "\022\116\023\111\024\034\025\105\026\106\027\027\030" +
    "\031\031\075\032\065\033\115\034\072\035\076\036\110" +
    "\037\066\107\103\110\055\114\062\115\042\116\113\123" +
    "\070\124\061\125\112\126\046\127\054\130\040\131\047" +
    "\132\102\133\045\134\052\135\071\136\032\137\025\140" +
    "\017\141\057\142\114\143\074\144\117\145\120\146\056" +
    "\147\041\150\050\151\033\152\037\153\026\154\030\155" +
    "\100\156\021\157\035\160\024\161\060\162\053\001\002" +
    "\000\014\003\ufeb5\040\ufeb5\042\ufeb5\043\ufeb5\117\ufeb5\001" +
    "\002\000\006\011\ufff6\110\055\001\002\000\014\003\ufec8" +
    "\040\ufec8\042\ufec8\043\ufec8\117\ufec8\001\002\000\006\003" +
    "\122\117\123\001\002\000\014\003\ufee1\040\ufee1\042\ufee1" +
    "\043\ufee1\117\ufee1\001\002\000\014\003\ufedc\040\ufedc\042" +
    "\ufedc\043\ufedc\117\ufedc\001\002\000\014\003\ufedb\040\ufedb" +
    "\042\ufedb\043\ufedb\117\ufedb\001\002\000\010\011\ufff6\107" +
    "\103\110\055\001\002\000\014\003\ufed3\040\ufed3\042\ufed3" +
    "\043\ufed3\117\ufed3\001\002\000\014\003\ufede\040\ufede\042" +
    "\ufede\043\ufede\117\ufede\001\002\000\014\003\ufecd\040\ufecd" +
    "\042\ufecd\043\ufecd\117\ufecd\001\002\000\014\003\ufed0\040" +
    "\ufed0\042\ufed0\043\ufed0\117\ufed0\001\002\000\014\003\ufec0" +
    "\040\ufec0\042\ufec0\043\ufec0\117\ufec0\001\002\000\014\003" +
    "\ufed6\040\ufed6\042\ufed6\043\ufed6\117\ufed6\001\002\000\014" +
    "\003\ufedf\040\ufedf\042\ufedf\043\ufedf\117\ufedf\001\002\000" +
    "\014\003\ufebe\040\ufebe\042\ufebe\043\ufebe\117\ufebe\001\002" +
    "\000\014\003\ufebd\040\ufebd\042\ufebd\043\ufebd\117\ufebd\001" +
    "\002\000\004\011\ufff9\001\002\000\004\011\150\001\002" +
    "\000\006\003\125\010\124\001\002\000\156\015\020\016" +
    "\022\017\036\020\104\021\063\022\116\023\111\024\034" +
    "\025\105\026\106\027\027\030\031\031\075\032\065\033" +
    "\115\034\072\035\076\036\110\037\066\114\062\115\042" +
    "\116\113\123\070\124\061\125\112\126\046\127\054\130" +
    "\040\131\047\132\102\133\045\134\052\135\071\136\032" +
    "\137\025\140\017\141\057\142\114\143\074\144\117\145" +
    "\120\146\056\147\041\150\050\151\033\152\037\153\026" +
    "\154\030\155\100\156\021\157\035\160\024\161\060\162" +
    "\053\001\002\000\004\011\126\001\002\000\010\011\uffd8" +
    "\107\uffd8\110\uffd8\001\002\000\012\040\130\042\uff90\043" +
    "\uff90\117\uff90\001\002\000\004\041\147\001\002\000\010" +
    "\042\132\043\133\117\uff8d\001\002\000\004\117\uff8f\001" +
    "\002\000\004\117\uff8e\001\002\000\004\117\135\001\002" +
    "\000\004\013\136\001\002\000\160\011\uffd6\015\020\016" +
    "\022\017\036\020\104\021\063\022\116\023\111\024\034" +
    "\025\105\026\106\027\027\030\031\031\075\032\065\033" +
    "\115\034\072\035\076\036\110\037\066\114\062\115\042" +
    "\116\113\123\070\124\061\125\112\126\046\127\054\130" +
    "\040\131\047\132\102\133\045\134\052\135\071\136\032" +
    "\137\025\140\017\141\057\142\114\143\074\144\117\145" +
    "\120\146\056\147\041\150\050\151\033\152\037\153\026" +
    "\154\030\155\100\156\021\157\035\160\024\161\060\162" +
    "\053\001\002\000\012\040\130\042\uff90\043\uff90\117\uff90" +
    "\001\002\000\004\011\141\001\002\000\010\011\uffda\107" +
    "\uffda\110\uffda\001\002\000\010\042\132\043\133\117\uff8d" +
    "\001\002\000\004\117\144\001\002\000\004\013\145\001" +
    "\002\000\160\011\uffd6\015\020\016\022\017\036\020\104" +
    "\021\063\022\116\023\111\024\034\025\105\026\106\027" +
    "\027\030\031\031\075\032\065\033\115\034\072\035\076" +
    "\036\110\037\066\114\062\115\042\116\113\123\070\124" +
    "\061\125\112\126\046\127\054\130\040\131\047\132\102" +
    "\133\045\134\052\135\071\136\032\137\025\140\017\141" +
    "\057\142\114\143\074\144\117\145\120\146\056\147\041" +
    "\150\050\151\033\152\037\153\026\154\030\155\100\156" +
    "\021\157\035\160\024\161\060\162\053\001\002\000\004" +
    "\011\uffd7\001\002\000\010\042\uff91\043\uff91\117\uff91\001" +
    "\002\000\010\011\uffd9\107\uffd9\110\uffd9\001\002\000\004" +
    "\011\ufff7\001\002\000\004\011\ufffd\001\002\000\004\011" +
    "\164\001\002\000\004\010\155\001\002\000\004\117\156" +
    "\001\002\000\006\011\uff9b\014\157\001\002\000\004\117" +
    "\162\001\002\000\004\011\161\001\002\000\166\011\uff9e" +
    "\012\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\107\uff9e\110\uff9e\114\uff9e\115\uff9e\116\uff9e\123\uff9e" +
    "\124\uff9e\125\uff9e\126\uff9e\127\uff9e\130\uff9e\131\uff9e\132" +
    "\uff9e\133\uff9e\134\uff9e\135\uff9e\136\uff9e\137\uff9e\140\uff9e" +
    "\141\uff9e\142\uff9e\143\uff9e\144\uff9e\145\uff9e\146\uff9e\147" +
    "\uff9e\150\uff9e\151\uff9e\152\uff9e\153\uff9e\154\uff9e\155\uff9e" +
    "\156\uff9e\157\uff9e\160\uff9e\161\uff9e\162\uff9e\001\002\000" +
    "\006\011\uff9b\014\157\001\002\000\004\011\uff9c\001\002" +
    "\000\166\011\uff9d\012\uff9d\015\uff9d\016\uff9d\017\uff9d\020" +
    "\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d" +
    "\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035" +
    "\uff9d\036\uff9d\037\uff9d\107\uff9d\110\uff9d\114\uff9d\115\uff9d" +
    "\116\uff9d\123\uff9d\124\uff9d\125\uff9d\126\uff9d\127\uff9d\130" +
    "\uff9d\131\uff9d\132\uff9d\133\uff9d\134\uff9d\135\uff9d\136\uff9d" +
    "\137\uff9d\140\uff9d\141\uff9d\142\uff9d\143\uff9d\144\uff9d\145" +
    "\uff9d\146\uff9d\147\uff9d\150\uff9d\151\uff9d\152\uff9d\153\uff9d" +
    "\154\uff9d\155\uff9d\156\uff9d\157\uff9d\160\uff9d\161\uff9d\162" +
    "\uff9d\001\002\000\006\002\ufffe\007\167\001\002\000\004" +
    "\002\000\001\002\000\004\117\170\001\002\000\004\010" +
    "\171\001\002\000\166\011\ufff6\012\073\015\020\016\022" +
    "\017\036\020\104\021\063\022\116\023\111\024\034\025" +
    "\105\026\106\027\027\030\031\031\075\032\065\033\115" +
    "\034\072\035\076\036\110\037\066\107\103\110\055\114" +
    "\062\115\042\116\113\123\070\124\061\125\112\126\046" +
    "\127\054\130\040\131\047\132\102\133\045\134\052\135" +
    "\071\136\032\137\025\140\017\141\057\142\114\143\074" +
    "\144\117\145\120\146\056\147\041\150\050\151\033\152" +
    "\037\153\026\154\030\155\100\156\021\157\035\160\024" +
    "\161\060\162\053\001\002\000\004\011\173\001\002\000" +
    "\006\002\ufffe\007\167\001\002\000\004\002\uffff\001\002" +
    "\000\004\011\u024a\001\002\000\004\064\177\001\002\000" +
    "\156\015\020\016\022\017\036\020\104\021\063\022\116" +
    "\023\111\024\034\025\105\026\106\027\027\030\031\031" +
    "\075\032\065\033\115\034\072\035\076\036\110\037\066" +
    "\114\062\115\042\116\113\123\070\124\061\125\112\126" +
    "\046\127\054\130\040\131\047\132\102\133\045\134\052" +
    "\135\071\136\032\137\025\140\017\141\057\142\114\143" +
    "\074\144\117\145\120\146\056\147\041\150\050\151\033" +
    "\152\037\153\026\154\030\155\100\156\021\157\035\160" +
    "\024\161\060\162\053\001\002\000\004\117\201\001\002" +
    "\000\006\014\202\065\ufff2\001\002\000\156\015\020\016" +
    "\022\017\036\020\104\021\063\022\116\023\111\024\034" +
    "\025\105\026\106\027\027\030\031\031\075\032\065\033" +
    "\115\034\072\035\076\036\110\037\066\114\062\115\042" +
    "\116\113\123\070\124\061\125\112\126\046\127\054\130" +
    "\040\131\047\132\102\133\045\134\052\135\071\136\032" +
    "\137\025\140\017\141\057\142\114\143\074\144\117\145" +
    "\120\146\056\147\041\150\050\151\033\152\037\153\026" +
    "\154\030\155\100\156\021\157\035\160\024\161\060\162" +
    "\053\001\002\000\004\065\204\001\002\000\016\010\uffed" +
    "\042\205\043\207\111\211\112\210\113\uffed\001\002\000" +
    "\006\010\uffef\113\uffef\001\002\000\006\010\uffeb\113\213" +
    "\001\002\000\006\010\ufff0\113\ufff0\001\002\000\006\010" +
    "\uffee\113\uffee\001\002\000\006\010\ufff1\113\ufff1\001\002" +
    "\000\004\010\220\001\002\000\004\064\214\001\002\000" +
    "\156\015\020\016\022\017\036\020\104\021\063\022\116" +
    "\023\111\024\034\025\105\026\106\027\027\030\031\031" +
    "\075\032\065\033\115\034\072\035\076\036\110\037\066" +
    "\114\062\115\042\116\113\123\070\124\061\125\112\126" +
    "\046\127\054\130\040\131\047\132\102\133\045\134\052" +
    "\135\071\136\032\137\025\140\017\141\057\142\114\143" +
    "\074\144\117\145\120\146\056\147\041\150\050\151\033" +
    "\152\037\153\026\154\030\155\100\156\021\157\035\160" +
    "\024\161\060\162\053\001\002\000\004\117\216\001\002" +
    "\000\004\065\217\001\002\000\004\010\uffec\001\002\000" +
    "\210\015\020\016\022\017\036\020\104\021\063\022\116" +
    "\023\111\024\034\025\105\026\106\027\027\030\031\031" +
    "\075\032\065\033\115\034\072\035\076\036\110\037\066" +
    "\045\236\046\227\064\232\074\247\075\250\076\uffe9\101" +
    "\225\102\230\103\244\114\062\115\042\116\113\117\222" +
    "\120\242\121\226\122\251\123\070\124\061\125\112\126" +
    "\046\127\054\130\040\131\047\132\102\133\045\134\052" +
    "\135\071\136\032\137\025\140\017\141\057\142\114\143" +
    "\074\144\117\145\120\146\056\147\041\150\050\151\033" +
    "\152\037\153\026\154\030\155\100\156\021\157\035\160" +
    "\024\161\060\162\053\001\002\000\004\013\u0246\001\002" +
    "\000\054\013\uff8c\044\uffe6\047\uff8c\050\uff8c\051\uff8c\052" +
    "\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\060\uff8c\061\uff8c" +
    "\062\uff8c\063\uff8c\064\uff8c\066\uff8c\067\uff8c\070\uff8c\071" +
    "\uff8c\072\uff8c\073\uff8c\001\002\000\004\076\u023c\001\002" +
    "\000\210\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\045\uffd3\046\uffd3\064\uffd3\074\uffd3\075\uffd3\076\uffd3" +
    "\101\uffd3\102\uffd3\103\uffd3\114\uffd3\115\uffd3\116\uffd3\117" +
    "\uffd3\120\uffd3\121\uffd3\122\uffd3\123\uffd3\124\uffd3\125\uffd3" +
    "\126\uffd3\127\uffd3\130\uffd3\131\uffd3\132\uffd3\133\uffd3\134" +
    "\uffd3\135\uffd3\136\uffd3\137\uffd3\140\uffd3\141\uffd3\142\uffd3" +
    "\143\uffd3\144\uffd3\145\uffd3\146\uffd3\147\uffd3\150\uffd3\151" +
    "\uffd3\152\uffd3\153\uffd3\154\uffd3\155\uffd3\156\uffd3\157\uffd3" +
    "\160\uffd3\161\uffd3\162\uffd3\001\002\000\004\064\u0231\001" +
    "\002\000\010\003\uff3d\013\uff3d\106\uff3d\001\002\000\030" +
    "\003\uff48\013\uff48\047\274\050\275\051\276\052\273\053" +
    "\271\054\272\055\267\056\277\106\uff48\001\002\000\004" +
    "\010\u0227\001\002\000\210\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\045\uffe7\046\uffe7\064\uffe7\074\uffe7" +
    "\075\uffe7\076\uffe7\101\uffe7\102\uffe7\103\uffe7\114\uffe7\115" +
    "\uffe7\116\uffe7\117\uffe7\120\uffe7\121\uffe7\122\uffe7\123\uffe7" +
    "\124\uffe7\125\uffe7\126\uffe7\127\uffe7\130\uffe7\131\uffe7\132" +
    "\uffe7\133\uffe7\134\uffe7\135\uffe7\136\uffe7\137\uffe7\140\uffe7" +
    "\141\uffe7\142\uffe7\143\uffe7\144\uffe7\145\uffe7\146\uffe7\147" +
    "\uffe7\150\uffe7\151\uffe7\152\uffe7\153\uffe7\154\uffe7\155\uffe7" +
    "\156\uffe7\157\uffe7\160\uffe7\161\uffe7\162\uffe7\001\002\000" +
    "\022\013\uffa2\045\u0138\046\u0137\074\u0133\117\u0139\120\u013b" +
    "\121\u013a\122\u0134\001\002\000\010\003\uff87\013\uff87\106" +
    "\uff87\001\002\000\012\040\130\042\uff90\043\uff90\117\uff90" +
    "\001\002\000\210\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\045\uffd4\046\uffd4\064\uffd4\074\uffd4\075\uffd4" +
    "\076\uffd4\101\uffd4\102\uffd4\103\uffd4\114\uffd4\115\uffd4\116" +
    "\uffd4\117\uffd4\120\uffd4\121\uffd4\122\uffd4\123\uffd4\124\uffd4" +
    "\125\uffd4\126\uffd4\127\uffd4\130\uffd4\131\uffd4\132\uffd4\133" +
    "\uffd4\134\uffd4\135\uffd4\136\uffd4\137\uffd4\140\uffd4\141\uffd4" +
    "\142\uffd4\143\uffd4\144\uffd4\145\uffd4\146\uffd4\147\uffd4\150" +
    "\uffd4\151\uffd4\152\uffd4\153\uffd4\154\uffd4\155\uffd4\156\uffd4" +
    "\157\uffd4\160\uffd4\161\uffd4\162\uffd4\001\002\000\030\003" +
    "\uff48\013\uff48\047\274\050\275\051\276\052\273\053\271" +
    "\054\272\055\267\056\277\106\uff48\001\002\000\010\003" +
    "\uff89\013\uff89\106\uff89\001\002\000\010\003\uff88\013\uff88" +
    "\106\uff88\001\002\000\210\015\020\016\022\017\036\020" +
    "\104\021\063\022\116\023\111\024\034\025\105\026\106" +
    "\027\027\030\031\031\075\032\065\033\115\034\072\035" +
    "\076\036\110\037\066\045\236\046\227\064\232\074\247" +
    "\075\250\076\uffe9\101\225\102\230\103\244\114\062\115" +
    "\042\116\113\117\222\120\242\121\226\122\251\123\070" +
    "\124\061\125\112\126\046\127\054\130\040\131\047\132" +
    "\102\133\045\134\052\135\071\136\032\137\025\140\017" +
    "\141\057\142\114\143\074\144\117\145\120\146\056\147" +
    "\041\150\050\151\033\152\037\153\026\154\030\155\100" +
    "\156\021\157\035\160\024\161\060\162\053\001\002\000" +
    "\034\003\uff82\013\uff82\060\uff84\061\uff84\062\uff84\063\uff84" +
    "\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84\106" +
    "\uff82\001\002\000\210\015\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\045\uffd5\046\uffd5\064\uffd5\074\uffd5\075" +
    "\uffd5\076\uffd5\101\uffd5\102\uffd5\103\uffd5\114\uffd5\115\uffd5" +
    "\116\uffd5\117\uffd5\120\uffd5\121\uffd5\122\uffd5\123\uffd5\124" +
    "\uffd5\125\uffd5\126\uffd5\127\uffd5\130\uffd5\131\uffd5\132\uffd5" +
    "\133\uffd5\134\uffd5\135\uffd5\136\uffd5\137\uffd5\140\uffd5\141" +
    "\uffd5\142\uffd5\143\uffd5\144\uffd5\145\uffd5\146\uffd5\147\uffd5" +
    "\150\uffd5\151\uffd5\152\uffd5\153\uffd5\154\uffd5\155\uffd5\156" +
    "\uffd5\157\uffd5\160\uffd5\161\uffd5\162\uffd5\001\002\000\006" +
    "\003\u01f6\064\uffcb\001\002\000\210\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\045\uffe1\046\uffe1\064\uffe1" +
    "\074\uffe1\075\uffe1\076\uffe1\101\uffe1\102\uffe1\103\uffe1\114" +
    "\uffe1\115\uffe1\116\uffe1\117\uffe1\120\uffe1\121\uffe1\122\uffe1" +
    "\123\uffe1\124\uffe1\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131" +
    "\uffe1\132\uffe1\133\uffe1\134\uffe1\135\uffe1\136\uffe1\137\uffe1" +
    "\140\uffe1\141\uffe1\142\uffe1\143\uffe1\144\uffe1\145\uffe1\146" +
    "\uffe1\147\uffe1\150\uffe1\151\uffe1\152\uffe1\153\uffe1\154\uffe1" +
    "\155\uffe1\156\uffe1\157\uffe1\160\uffe1\161\uffe1\162\uffe1\001" +
    "\002\000\210\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\045\uffd2\046\uffd2\064\uffd2\074\uffd2\075\uffd2\076" +
    "\uffd2\101\uffd2\102\uffd2\103\uffd2\114\uffd2\115\uffd2\116\uffd2" +
    "\117\uffd2\120\uffd2\121\uffd2\122\uffd2\123\uffd2\124\uffd2\125" +
    "\uffd2\126\uffd2\127\uffd2\130\uffd2\131\uffd2\132\uffd2\133\uffd2" +
    "\134\uffd2\135\uffd2\136\uffd2\137\uffd2\140\uffd2\141\uffd2\142" +
    "\uffd2\143\uffd2\144\uffd2\145\uffd2\146\uffd2\147\uffd2\150\uffd2" +
    "\151\uffd2\152\uffd2\153\uffd2\154\uffd2\155\uffd2\156\uffd2\157" +
    "\uffd2\160\uffd2\161\uffd2\162\uffd2\001\002\000\004\073\u01ea" +
    "\001\002\000\006\003\253\064\uffd1\001\002\000\010\003" +
    "\uff3c\013\uff3c\106\uff3c\001\002\000\004\064\255\001\002" +
    "\000\004\011\254\001\002\000\210\015\uffce\016\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\045\uffce\046\uffce\064\uffce" +
    "\074\uffce\075\uffce\076\uffce\101\uffce\102\uffce\103\uffce\114" +
    "\uffce\115\uffce\116\uffce\117\uffce\120\uffce\121\uffce\122\uffce" +
    "\123\uffce\124\uffce\125\uffce\126\uffce\127\uffce\130\uffce\131" +
    "\uffce\132\uffce\133\uffce\134\uffce\135\uffce\136\uffce\137\uffce" +
    "\140\uffce\141\uffce\142\uffce\143\uffce\144\uffce\145\uffce\146" +
    "\uffce\147\uffce\150\uffce\151\uffce\152\uffce\153\uffce\154\uffce" +
    "\155\uffce\156\uffce\157\uffce\160\uffce\161\uffce\162\uffce\001" +
    "\002\000\014\045\uff3e\046\uff3e\057\260\117\uff3e\120\uff3e" +
    "\001\002\000\004\065\307\001\002\000\012\045\265\046" +
    "\261\117\263\120\262\001\002\000\012\045\uff3f\046\uff3f" +
    "\117\uff3f\120\uff3f\001\002\000\032\003\uff48\013\uff48\047" +
    "\274\050\275\051\276\052\273\053\271\054\272\055\267" +
    "\056\277\065\uff48\106\uff48\001\002\000\032\003\uff4c\013" +
    "\uff4c\047\uff4c\050\uff4c\051\uff4c\052\uff4c\053\uff4c\054\uff4c" +
    "\055\uff4c\056\uff4c\065\uff4c\106\uff4c\001\002\000\032\003" +
    "\uff4e\013\uff4e\047\uff4e\050\uff4e\051\uff4e\052\uff4e\053\uff4e" +
    "\054\uff4e\055\uff4e\056\uff4e\065\uff4e\106\uff4e\001\002\000" +
    "\012\003\uff51\013\uff51\065\uff51\106\uff51\001\002\000\032" +
    "\003\uff48\013\uff48\047\274\050\275\051\276\052\273\053" +
    "\271\054\272\055\267\056\277\065\uff48\106\uff48\001\002" +
    "\000\012\003\uff50\013\uff50\065\uff50\106\uff50\001\002\000" +
    "\014\045\uff41\046\uff41\057\uff41\117\uff41\120\uff41\001\002" +
    "\000\014\045\uff4a\046\uff4a\057\uff4a\117\uff4a\120\uff4a\001" +
    "\002\000\014\045\uff43\046\uff43\057\uff43\117\uff43\120\uff43" +
    "\001\002\000\014\045\uff42\046\uff42\057\uff42\117\uff42\120" +
    "\uff42\001\002\000\014\045\uff44\046\uff44\057\uff44\117\uff44" +
    "\120\uff44\001\002\000\014\045\uff47\046\uff47\057\uff47\117" +
    "\uff47\120\uff47\001\002\000\014\045\uff46\046\uff46\057\uff46" +
    "\117\uff46\120\uff46\001\002\000\014\045\uff45\046\uff45\057" +
    "\uff45\117\uff45\120\uff45\001\002\000\014\045\uff40\046\uff40" +
    "\057\uff40\117\uff40\120\uff40\001\002\000\014\045\uff3e\046" +
    "\uff3e\057\260\117\uff3e\120\uff3e\001\002\000\012\003\uff49" +
    "\013\uff49\065\uff49\106\uff49\001\002\000\032\003\uff48\013" +
    "\uff48\047\274\050\275\051\276\052\273\053\271\054\272" +
    "\055\267\056\277\065\uff48\106\uff48\001\002\000\012\003" +
    "\uff4d\013\uff4d\065\uff4d\106\uff4d\001\002\000\032\003\uff48" +
    "\013\uff48\047\274\050\275\051\276\052\273\053\271\054" +
    "\272\055\267\056\277\065\uff48\106\uff48\001\002\000\012" +
    "\003\uff4b\013\uff4b\065\uff4b\106\uff4b\001\002\000\012\003" +
    "\uff4f\013\uff4f\065\uff4f\106\uff4f\001\002\000\004\010\uffd0" +
    "\001\002\000\004\010\311\001\002\000\024\074\312\075" +
    "\317\076\324\077\320\100\313\101\323\102\315\103\321" +
    "\117\316\001\002\000\004\073\u01e5\001\002\000\004\013" +
    "\u01e4\001\002\000\026\011\uffb6\074\uffb6\075\uffb6\076\uffb6" +
    "\077\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\117\uffb6\001" +
    "\002\000\004\010\u01db\001\002\000\010\044\uffbe\064\uffbe" +
    "\073\uffbe\001\002\000\004\064\uffbb\001\002\000\004\013" +
    "\u01b4\001\002\000\004\064\uffad\001\002\000\026\011\uffbf" +
    "\074\312\075\317\076\324\077\320\100\313\101\323\102" +
    "\315\103\321\117\316\001\002\000\004\064\326\001\002" +
    "\000\004\013\325\001\002\000\026\011\uffb5\074\uffb5\075" +
    "\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5" +
    "\117\uffb5\001\002\000\004\117\327\001\002\000\004\044" +
    "\u0120\001\002\000\004\013\331\001\002\000\014\045\uff3e" +
    "\046\uff3e\057\260\117\uff3e\120\uff3e\001\002\000\004\013" +
    "\333\001\002\000\014\074\334\117\337\120\335\121\343" +
    "\122\342\001\002\000\004\073\u0118\001\002\000\026\060" +
    "\370\061\361\062\354\063\366\065\uff24\066\357\067\356" +
    "\070\353\071\364\072\365\001\002\000\004\065\uff38\001" +
    "\002\000\032\044\371\060\370\061\361\062\354\063\366" +
    "\064\367\066\357\067\356\070\353\071\364\072\365\073" +
    "\362\001\002\000\004\065\uff39\001\002\000\004\065\344" +
    "\001\002\000\004\065\uff17\001\002\000\004\065\uff18\001" +
    "\002\000\004\010\345\001\002\000\024\074\312\075\317" +
    "\076\324\077\320\100\313\101\323\102\315\103\321\117" +
    "\316\001\002\000\026\011\uffbf\074\312\075\317\076\324" +
    "\077\320\100\313\101\323\102\315\103\321\117\316\001" +
    "\002\000\026\011\uffbf\074\312\075\317\076\324\077\320" +
    "\100\313\101\323\102\315\103\321\117\316\001\002\000" +
    "\004\011\351\001\002\000\026\011\uffb8\074\uffb8\075\uffb8" +
    "\076\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\117" +
    "\uffb8\001\002\000\004\011\uffc0\001\002\000\010\074\uff1b" +
    "\117\uff1b\120\uff1b\001\002\000\010\074\uff1f\117\uff1f\120" +
    "\uff1f\001\002\000\004\065\uff3b\001\002\000\010\074\uff1c" +
    "\117\uff1c\120\uff1c\001\002\000\010\074\uff1d\117\uff1d\120" +
    "\uff1d\001\002\000\010\074\372\117\375\120\373\001\002" +
    "\000\010\074\uff20\117\uff20\120\uff20\001\002\000\004\117" +
    "\u0114\001\002\000\004\065\uff35\001\002\000\010\074\uff1a" +
    "\117\uff1a\120\uff1a\001\002\000\010\074\uff19\117\uff19\120" +
    "\uff19\001\002\000\010\074\uff1e\117\uff1e\120\uff1e\001\002" +
    "\000\010\065\u010c\074\u010a\117\u010b\001\002\000\010\074" +
    "\uff21\117\uff21\120\uff21\001\002\000\010\074\372\117\375" +
    "\120\373\001\002\000\004\073\u0105\001\002\000\026\060" +
    "\370\061\361\062\354\063\366\065\uff24\066\357\067\356" +
    "\070\353\071\364\072\365\001\002\000\004\065\uff32\001" +
    "\002\000\030\060\uff22\061\uff22\062\uff22\063\uff22\065\uff22" +
    "\066\uff22\067\uff22\070\uff22\071\uff22\072\uff22\073\376\001" +
    "\002\000\004\117\u0103\001\002\000\026\060\370\061\361" +
    "\062\354\063\366\065\uff24\066\357\067\356\070\353\071" +
    "\364\072\365\001\002\000\010\074\372\117\375\120\373" +
    "\001\002\000\004\065\uff27\001\002\000\004\065\uff25\001" +
    "\002\000\026\060\uff23\061\uff23\062\uff23\063\uff23\065\uff23" +
    "\066\uff23\067\uff23\070\uff23\071\uff23\072\uff23\001\002\000" +
    "\004\065\uff28\001\002\000\004\117\u0106\001\002\000\030" +
    "\060\uff22\061\uff22\062\uff22\063\uff22\065\uff22\066\uff22\067" +
    "\uff22\070\uff22\071\uff22\072\uff22\073\376\001\002\000\026" +
    "\060\370\061\361\062\354\063\366\065\uff24\066\357\067" +
    "\356\070\353\071\364\072\365\001\002\000\004\065\uff26" +
    "\001\002\000\004\065\uff34\001\002\000\004\073\u0111\001" +
    "\002\000\006\014\u010d\065\u010f\001\002\000\004\065\uff2b" +
    "\001\002\000\010\065\u010c\074\u010a\117\u010b\001\002\000" +
    "\004\065\uff2d\001\002\000\004\065\uff29\001\002\000\004" +
    "\065\uff2a\001\002\000\004\117\u0112\001\002\000\006\014" +
    "\u010d\065\u010f\001\002\000\004\065\uff2c\001\002\000\030" +
    "\044\371\060\370\061\361\062\354\063\366\064\367\066" +
    "\357\067\356\070\353\071\364\072\365\001\002\000\004" +
    "\065\uff36\001\002\000\004\065\uff33\001\002\000\004\065" +
    "\uff37\001\002\000\004\117\u011a\001\002\000\004\065\uff3a" +
    "\001\002\000\030\060\370\061\361\062\354\063\366\064" +
    "\u011d\065\uff2e\066\357\067\356\070\353\071\364\072\365" +
    "\001\002\000\010\074\372\117\375\120\373\001\002\000" +
    "\004\065\uff31\001\002\000\010\065\u010c\074\u010a\117\u010b" +
    "\001\002\000\004\065\uff30\001\002\000\004\065\uff2f\001" +
    "\002\000\020\045\236\046\227\074\247\117\u0121\120\242" +
    "\121\226\122\251\001\002\000\056\003\uff8c\013\uff8c\047" +
    "\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c" +
    "\056\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\066" +
    "\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\106\uff8c" +
    "\001\002\000\004\013\uffa4\001\002\000\056\003\uff7c\013" +
    "\uff7c\047\274\050\275\051\276\052\273\053\271\054\272" +
    "\055\267\056\277\060\u0132\061\u012a\062\u012d\063\u0126\064" +
    "\u0131\066\u0127\067\u0130\070\u0128\071\u0124\072\u012c\073\u012b" +
    "\106\uff7c\001\002\000\014\064\uff53\065\uff53\074\uff53\117" +
    "\uff53\120\uff53\001\002\000\014\045\uff3e\046\uff3e\057\260" +
    "\117\uff3e\120\uff3e\001\002\000\014\064\uff57\065\uff57\074" +
    "\uff57\117\uff57\120\uff57\001\002\000\014\064\uff56\065\uff56" +
    "\074\uff56\117\uff56\120\uff56\001\002\000\014\064\uff54\065" +
    "\uff54\074\uff54\117\uff54\120\uff54\001\002\000\014\064\u0184" +
    "\065\u0185\074\uff64\117\uff64\120\uff64\001\002\000\014\064" +
    "\uff59\065\uff59\074\uff59\117\uff59\120\uff59\001\002\000\004" +
    "\117\u0181\001\002\000\014\064\uff52\065\uff52\074\uff52\117" +
    "\uff52\120\uff52\001\002\000\014\064\uff58\065\uff58\074\uff58" +
    "\117\uff58\120\uff58\001\002\000\010\003\uff8b\013\uff8b\106" +
    "\uff8b\001\002\000\010\003\uff80\013\uff80\106\uff80\001\002" +
    "\000\014\064\uff55\065\uff55\074\uff55\117\uff55\120\uff55\001" +
    "\002\000\022\045\u0138\046\u0137\065\u013f\074\u0133\117\u0139" +
    "\120\u013b\121\u013a\122\u0134\001\002\000\014\064\uff5a\065" +
    "\uff5a\074\uff5a\117\uff5a\120\uff5a\001\002\000\004\073\u0177" +
    "\001\002\000\026\013\uff02\014\uff02\045\uff02\046\uff02\065" +
    "\uff02\074\uff02\117\uff02\120\uff02\121\uff02\122\uff02\001\002" +
    "\000\026\013\uff13\014\uff13\045\uff13\046\uff13\065\uff13\074" +
    "\uff13\117\uff13\120\uff13\121\uff13\122\uff13\001\002\000\006" +
    "\014\u0173\065\u0174\001\002\000\070\013\ufef9\014\ufef9\045" +
    "\ufef9\046\ufef9\047\u0144\050\u0140\051\u0152\052\u0149\053\u014b" +
    "\054\u0151\055\u0142\056\u014f\060\u0150\061\u014a\062\u014d\063" +
    "\u0146\065\ufef9\066\u0145\067\u014e\070\u0147\071\u0141\072\u014c" +
    "\074\ufef9\117\ufef9\120\ufef9\121\ufef9\122\ufef9\001\002\000" +
    "\070\013\ufef9\014\ufef9\045\ufef9\046\ufef9\047\u0144\050\u0140" +
    "\051\u0152\052\u0149\053\u014b\054\u0151\055\u0142\056\u014f\060" +
    "\u0150\061\u014a\062\u014d\063\u0146\065\ufef9\066\u0145\067\u014e" +
    "\070\u0147\071\u0141\072\u014c\074\ufef9\117\ufef9\120\ufef9\121" +
    "\ufef9\122\ufef9\001\002\000\074\013\uff09\014\uff09\045\uff09" +
    "\046\uff09\047\u0144\050\u0140\051\u0152\052\u0149\053\u014b\054" +
    "\u0151\055\u0142\056\u014f\060\u0150\061\u014a\062\u014d\063\u0146" +
    "\064\u016b\065\uff09\066\u0145\067\u014e\070\u0147\071\u0141\072" +
    "\u014c\073\u016a\074\uff09\117\uff09\120\uff09\121\uff09\122\uff09" +
    "\001\002\000\026\013\uff03\014\uff03\045\uff03\046\uff03\065" +
    "\uff03\074\uff03\117\uff03\120\uff03\121\uff03\122\uff03\001\002" +
    "\000\070\013\ufef9\014\ufef9\045\ufef9\046\ufef9\047\u0144\050" +
    "\u0140\051\u0152\052\u0149\053\u014b\054\u0151\055\u0142\056\u014f" +
    "\060\u0150\061\u014a\062\u014d\063\u0146\065\ufef9\066\u0145\067" +
    "\u014e\070\u0147\071\u0141\072\u014c\074\ufef9\117\ufef9\120\ufef9" +
    "\121\ufef9\122\ufef9\001\002\000\026\013\uff14\014\uff14\045" +
    "\uff14\046\uff14\065\uff14\074\uff14\117\uff14\120\uff14\121\uff14" +
    "\122\uff14\001\002\000\026\013\uff12\014\uff12\045\uff12\046" +
    "\uff12\065\uff12\074\uff12\117\uff12\120\uff12\121\uff12\122\uff12" +
    "\001\002\000\010\003\uff7f\013\uff7f\106\uff7f\001\002\000" +
    "\010\003\uff74\013\uff74\106\uff74\001\002\000\016\045\ufef7" +
    "\046\ufef7\057\ufef7\074\ufef7\117\ufef7\120\ufef7\001\002\000" +
    "\016\045\ufee9\046\ufee9\057\ufee9\074\ufee9\117\ufee9\120\ufee9" +
    "\001\002\000\016\045\ufef2\046\ufef2\057\ufef2\074\ufef2\117" +
    "\ufef2\120\ufef2\001\002\000\026\013\uff0f\014\uff0f\045\uff0f" +
    "\046\uff0f\065\uff0f\074\uff0f\117\uff0f\120\uff0f\121\uff0f\122" +
    "\uff0f\001\002\000\016\045\ufef8\046\ufef8\057\ufef8\074\ufef8" +
    "\117\ufef8\120\ufef8\001\002\000\016\045\ufeec\046\ufeec\057" +
    "\ufeec\074\ufeec\117\ufeec\120\ufeec\001\002\000\016\045\ufeed" +
    "\046\ufeed\057\ufeed\074\ufeed\117\ufeed\120\ufeed\001\002\000" +
    "\016\045\ufeea\046\ufeea\057\ufeea\074\ufeea\117\ufeea\120\ufeea" +
    "\001\002\000\016\045\u015a\046\u0153\057\u0158\074\u0154\117" +
    "\u0157\120\u0155\001\002\000\016\045\ufef5\046\ufef5\057\ufef5" +
    "\074\ufef5\117\ufef5\120\ufef5\001\002\000\016\045\ufeef\046" +
    "\ufeef\057\ufeef\074\ufeef\117\ufeef\120\ufeef\001\002\000\016" +
    "\045\ufef4\046\ufef4\057\ufef4\074\ufef4\117\ufef4\120\ufef4\001" +
    "\002\000\016\045\ufee8\046\ufee8\057\ufee8\074\ufee8\117\ufee8" +
    "\120\ufee8\001\002\000\016\045\ufeee\046\ufeee\057\ufeee\074" +
    "\ufeee\117\ufeee\120\ufeee\001\002\000\016\045\ufeeb\046\ufeeb" +
    "\057\ufeeb\074\ufeeb\117\ufeeb\120\ufeeb\001\002\000\016\045" +
    "\ufef1\046\ufef1\057\ufef1\074\ufef1\117\ufef1\120\ufef1\001\002" +
    "\000\016\045\ufef0\046\ufef0\057\ufef0\074\ufef0\117\ufef0\120" +
    "\ufef0\001\002\000\016\045\ufef3\046\ufef3\057\ufef3\074\ufef3" +
    "\117\ufef3\120\ufef3\001\002\000\016\045\ufef6\046\ufef6\057" +
    "\ufef6\074\ufef6\117\ufef6\120\ufef6\001\002\000\070\013\ufef9" +
    "\014\ufef9\045\ufef9\046\ufef9\047\u0144\050\u0140\051\u0152\052" +
    "\u0149\053\u014b\054\u0151\055\u0142\056\u014f\060\u0150\061\u014a" +
    "\062\u014d\063\u0146\065\ufef9\066\u0145\067\u014e\070\u0147\071" +
    "\u0141\072\u014c\074\ufef9\117\ufef9\120\ufef9\121\ufef9\122\ufef9" +
    "\001\002\000\004\073\u0162\001\002\000\070\013\ufef9\014" +
    "\ufef9\045\ufef9\046\ufef9\047\u0144\050\u0140\051\u0152\052\u0149" +
    "\053\u014b\054\u0151\055\u0142\056\u014f\060\u0150\061\u014a\062" +
    "\u014d\063\u0146\065\ufef9\066\u0145\067\u014e\070\u0147\071\u0141" +
    "\072\u014c\074\ufef9\117\ufef9\120\ufef9\121\ufef9\122\ufef9\001" +
    "\002\000\026\013\ufefa\014\ufefa\045\ufefa\046\ufefa\065\ufefa" +
    "\074\ufefa\117\ufefa\120\ufefa\121\ufefa\122\ufefa\001\002\000" +
    "\072\013\ufee6\014\ufee6\045\ufee6\046\ufee6\047\ufee6\050\ufee6" +
    "\051\ufee6\052\ufee6\053\ufee6\054\ufee6\055\ufee6\056\ufee6\060" +
    "\ufee6\061\ufee6\062\ufee6\063\ufee6\065\ufee6\066\ufee6\067\ufee6" +
    "\070\ufee6\071\ufee6\072\ufee6\073\u015d\074\ufee6\117\ufee6\120" +
    "\ufee6\121\ufee6\122\ufee6\001\002\000\006\074\u0154\117\u0157" +
    "\001\002\000\026\013\uff00\014\uff00\045\uff00\046\uff00\065" +
    "\uff00\074\uff00\117\uff00\120\uff00\121\uff00\122\uff00\001\002" +
    "\000\070\013\ufef9\014\ufef9\045\ufef9\046\ufef9\047\u0144\050" +
    "\u0140\051\u0152\052\u0149\053\u014b\054\u0151\055\u0142\056\u014f" +
    "\060\u0150\061\u014a\062\u014d\063\u0146\065\ufef9\066\u0145\067" +
    "\u014e\070\u0147\071\u0141\072\u014c\074\ufef9\117\ufef9\120\ufef9" +
    "\121\ufef9\122\ufef9\001\002\000\026\013\ufeff\014\ufeff\045" +
    "\ufeff\046\ufeff\065\ufeff\074\ufeff\117\ufeff\120\ufeff\121\ufeff" +
    "\122\ufeff\001\002\000\026\013\uff01\014\uff01\045\uff01\046" +
    "\uff01\065\uff01\074\uff01\117\uff01\120\uff01\121\uff01\122\uff01" +
    "\001\002\000\004\117\u0160\001\002\000\070\013\ufef9\014" +
    "\ufef9\045\ufef9\046\ufef9\047\u0144\050\u0140\051\u0152\052\u0149" +
    "\053\u014b\054\u0151\055\u0142\056\u014f\060\u0150\061\u014a\062" +
    "\u014d\063\u0146\065\ufef9\066\u0145\067\u014e\070\u0147\071\u0141" +
    "\072\u014c\074\ufef9\117\ufef9\120\ufef9\121\ufef9\122\ufef9\001" +
    "\002\000\026\013\ufefc\014\ufefc\045\ufefc\046\ufefc\065\ufefc" +
    "\074\ufefc\117\ufefc\120\ufefc\121\ufefc\122\ufefc\001\002\000" +
    "\070\013\ufee7\014\ufee7\045\ufee7\046\ufee7\047\ufee7\050\ufee7" +
    "\051\ufee7\052\ufee7\053\ufee7\054\ufee7\055\ufee7\056\ufee7\060" +
    "\ufee7\061\ufee7\062\ufee7\063\ufee7\065\ufee7\066\ufee7\067\ufee7" +
    "\070\ufee7\071\ufee7\072\ufee7\074\ufee7\117\ufee7\120\ufee7\121" +
    "\ufee7\122\ufee7\001\002\000\026\013\ufefd\014\ufefd\045\ufefd" +
    "\046\ufefd\065\ufefd\074\ufefd\117\ufefd\120\ufefd\121\ufefd\122" +
    "\ufefd\001\002\000\004\117\u0163\001\002\000\070\013\ufef9" +
    "\014\ufef9\045\ufef9\046\ufef9\047\u0144\050\u0140\051\u0152\052" +
    "\u0149\053\u014b\054\u0151\055\u0142\056\u014f\060\u0150\061\u014a" +
    "\062\u014d\063\u0146\065\ufef9\066\u0145\067\u014e\070\u0147\071" +
    "\u0141\072\u014c\074\ufef9\117\ufef9\120\ufef9\121\ufef9\122\ufef9" +
    "\001\002\000\026\013\ufefb\014\ufefb\045\ufefb\046\ufefb\065" +
    "\ufefb\074\ufefb\117\ufefb\120\ufefb\121\ufefb\122\ufefb\001\002" +
    "\000\026\013\ufefe\014\ufefe\045\ufefe\046\ufefe\065\ufefe\074" +
    "\ufefe\117\ufefe\120\ufefe\121\ufefe\122\ufefe\001\002\000\026" +
    "\013\uff0d\014\uff0d\045\uff0d\046\uff0d\065\uff0d\074\uff0d\117" +
    "\uff0d\120\uff0d\121\uff0d\122\uff0d\001\002\000\026\013\uff16" +
    "\014\uff16\045\uff16\046\uff16\065\uff16\074\uff16\117\uff16\120" +
    "\uff16\121\uff16\122\uff16\001\002\000\016\045\u015a\046\u0153" +
    "\057\u0158\074\u0154\117\u0157\120\u0155\001\002\000\016\045" +
    "\u015a\046\u0153\057\u0158\074\u0154\117\u0157\120\u0155\001\002" +
    "\000\004\117\u016d\001\002\000\016\045\u015a\046\u0153\057" +
    "\u0158\074\u0154\117\u0157\120\u0155\001\002\000\026\013\uff0c" +
    "\014\uff0c\045\uff0c\046\uff0c\065\uff0c\074\uff0c\117\uff0c\120" +
    "\uff0c\121\uff0c\122\uff0c\001\002\000\072\013\uff09\014\uff09" +
    "\045\uff09\046\uff09\047\u0144\050\u0140\051\u0152\052\u0149\053" +
    "\u014b\054\u0151\055\u0142\056\u014f\060\u0150\061\u014a\062\u014d" +
    "\063\u0146\064\u016b\065\uff09\066\u0145\067\u014e\070\u0147\071" +
    "\u0141\072\u014c\074\uff09\117\uff09\120\uff09\121\uff09\122\uff09" +
    "\001\002\000\026\013\uff0e\014\uff0e\045\uff0e\046\uff0e\065" +
    "\uff0e\074\uff0e\117\uff0e\120\uff0e\121\uff0e\122\uff0e\001\002" +
    "\000\026\013\uff0a\014\uff0a\045\uff0a\046\uff0a\065\uff0a\074" +
    "\uff0a\117\uff0a\120\uff0a\121\uff0a\122\uff0a\001\002\000\026" +
    "\013\uff0b\014\uff0b\045\uff0b\046\uff0b\065\uff0b\074\uff0b\117" +
    "\uff0b\120\uff0b\121\uff0b\122\uff0b\001\002\000\026\013\uff11" +
    "\014\uff11\045\uff11\046\uff11\065\uff11\074\uff11\117\uff11\120" +
    "\uff11\121\uff11\122\uff11\001\002\000\026\013\uff10\014\uff10" +
    "\045\uff10\046\uff10\065\uff10\074\uff10\117\uff10\120\uff10\121" +
    "\uff10\122\uff10\001\002\000\022\045\u0138\046\u0137\065\u013f" +
    "\074\u0133\117\u0139\120\u013b\121\u013a\122\u0134\001\002\000" +
    "\010\003\uff72\013\uff72\106\uff72\001\002\000\010\003\uff75" +
    "\013\uff75\106\uff75\001\002\000\010\003\uff73\013\uff73\106" +
    "\uff73\001\002\000\004\117\u0179\001\002\000\026\013\uff15" +
    "\014\uff15\045\uff15\046\uff15\065\uff15\074\uff15\117\uff15\120" +
    "\uff15\121\uff15\122\uff15\001\002\000\072\013\uff04\014\uff04" +
    "\045\uff04\046\uff04\047\u0144\050\u0140\051\u0152\052\u0149\053" +
    "\u014b\054\u0151\055\u0142\056\u014f\060\u0150\061\u014a\062\u014d" +
    "\063\u0146\064\u017d\065\uff04\066\u0145\067\u014e\070\u0147\071" +
    "\u0141\072\u014c\074\uff04\117\uff04\120\uff04\121\uff04\122\uff04" +
    "\001\002\000\026\013\uff08\014\uff08\045\uff08\046\uff08\065" +
    "\uff08\074\uff08\117\uff08\120\uff08\121\uff08\122\uff08\001\002" +
    "\000\016\045\u015a\046\u0153\057\u0158\074\u0154\117\u0157\120" +
    "\u0155\001\002\000\016\045\u015a\046\u0153\057\u0158\074\u0154" +
    "\117\u0157\120\u0155\001\002\000\016\045\u015a\046\u0153\057" +
    "\u0158\074\u0154\117\u0157\120\u0155\001\002\000\026\013\uff07" +
    "\014\uff07\045\uff07\046\uff07\065\uff07\074\uff07\117\uff07\120" +
    "\uff07\121\uff07\122\uff07\001\002\000\026\013\uff05\014\uff05" +
    "\045\uff05\046\uff05\065\uff05\074\uff05\117\uff05\120\uff05\121" +
    "\uff05\122\uff05\001\002\000\026\013\uff06\014\uff06\045\uff06" +
    "\046\uff06\065\uff06\074\uff06\117\uff06\120\uff06\121\uff06\122" +
    "\uff06\001\002\000\054\003\uff7c\013\uff7c\047\274\050\275" +
    "\051\276\052\273\053\271\054\272\055\267\056\277\060" +
    "\u0132\061\u012a\062\u012d\063\u0126\064\u0131\066\u0127\067\u0130" +
    "\070\u0128\071\u0124\072\u012c\106\uff7c\001\002\000\010\003" +
    "\uff81\013\uff81\106\uff81\001\002\000\010\074\u0186\117\u0188" +
    "\120\u0187\001\002\000\010\074\uff65\117\uff65\120\uff65\001" +
    "\002\000\010\074\uff66\117\uff66\120\uff66\001\002\000\004" +
    "\073\u019e\001\002\000\034\003\uff6d\013\uff6d\060\u0197\061" +
    "\u0191\062\u018d\063\u0194\065\u0198\066\u018f\067\u018e\070\u018b" +
    "\071\u0192\072\u0193\106\uff6d\001\002\000\036\003\uff70\013" +
    "\uff70\060\uff70\061\uff70\062\uff70\063\uff70\064\uff70\065\uff70" +
    "\066\uff70\067\uff70\070\uff70\071\uff70\072\uff70\106\uff70\001" +
    "\002\000\010\003\uff7e\013\uff7e\106\uff7e\001\002\000\036" +
    "\003\uff6a\013\uff6a\060\u0197\061\u0191\062\u018d\063\u0194\064" +
    "\u0196\065\u0198\066\u018f\067\u018e\070\u018b\071\u0192\072\u0193" +
    "\106\uff6a\001\002\000\014\064\uff5d\065\uff5d\074\uff5d\117" +
    "\uff5d\120\uff5d\001\002\000\014\064\uff69\065\uff69\074\uff69" +
    "\117\uff69\120\uff69\001\002\000\014\064\uff61\065\uff61\074" +
    "\uff61\117\uff61\120\uff61\001\002\000\014\064\uff5e\065\uff5e" +
    "\074\uff5e\117\uff5e\120\uff5e\001\002\000\014\064\uff5f\065" +
    "\uff5f\074\uff5f\117\uff5f\120\uff5f\001\002\000\010\003\uff6f" +
    "\013\uff6f\106\uff6f\001\002\000\014\064\uff62\065\uff62\074" +
    "\uff62\117\uff62\120\uff62\001\002\000\014\064\uff5c\065\uff5c" +
    "\074\uff5c\117\uff5c\120\uff5c\001\002\000\014\064\uff5b\065" +
    "\uff5b\074\uff5b\117\uff5b\120\uff5b\001\002\000\014\064\uff60" +
    "\065\uff60\074\uff60\117\uff60\120\uff60\001\002\000\010\003" +
    "\uff6b\013\uff6b\106\uff6b\001\002\000\022\045\u0138\046\u0137" +
    "\065\u013f\074\u0133\117\u0139\120\u013b\121\u013a\122\u0134\001" +
    "\002\000\014\064\uff63\065\uff63\074\uff63\117\uff63\120\uff63" +
    "\001\002\000\010\003\uff67\013\uff67\106\uff67\001\002\000" +
    "\010\003\uff6c\013\uff6c\106\uff6c\001\002\000\014\064\u0184" +
    "\065\u0185\074\uff64\117\uff64\120\uff64\001\002\000\010\074" +
    "\u0186\117\u0188\120\u0187\001\002\000\010\003\uff68\013\uff68" +
    "\106\uff68\001\002\000\010\003\uff71\013\uff71\106\uff71\001" +
    "\002\000\004\117\u019f\001\002\000\036\003\uff6a\013\uff6a" +
    "\060\u0197\061\u0191\062\u018d\063\u0194\064\u0196\065\u0198\066" +
    "\u018f\067\u018e\070\u018b\071\u0192\072\u0193\106\uff6a\001\002" +
    "\000\010\003\uff6e\013\uff6e\106\uff6e\001\002\000\010\003" +
    "\uff7d\013\uff7d\106\uff7d\001\002\000\004\011\u01a3\001\002" +
    "\000\210\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\045\uffcf\046\uffcf\064\uffcf\074\uffcf\075\uffcf\076\uffcf" +
    "\101\uffcf\102\uffcf\103\uffcf\114\uffcf\115\uffcf\116\uffcf\117" +
    "\uffcf\120\uffcf\121\uffcf\122\uffcf\123\uffcf\124\uffcf\125\uffcf" +
    "\126\uffcf\127\uffcf\130\uffcf\131\uffcf\132\uffcf\133\uffcf\134" +
    "\uffcf\135\uffcf\136\uffcf\137\uffcf\140\uffcf\141\uffcf\142\uffcf" +
    "\143\uffcf\144\uffcf\145\uffcf\146\uffcf\147\uffcf\150\uffcf\151" +
    "\uffcf\152\uffcf\153\uffcf\154\uffcf\155\uffcf\156\uffcf\157\uffcf" +
    "\160\uffcf\161\uffcf\162\uffcf\001\002\000\004\064\u01a5\001" +
    "\002\000\014\045\uff3e\046\uff3e\057\260\117\uff3e\120\uff3e" +
    "\001\002\000\004\065\u01a7\001\002\000\004\010\uffac\001" +
    "\002\000\004\010\u01a9\001\002\000\024\074\312\075\317" +
    "\076\324\077\320\100\313\101\323\102\315\103\321\117" +
    "\316\001\002\000\026\011\uffbf\074\312\075\317\076\324" +
    "\077\320\100\313\101\323\102\315\103\321\117\316\001" +
    "\002\000\004\011\u01ac\001\002\000\030\011\uffa8\074\uffa8" +
    "\075\uffa8\076\uffa8\077\uffa8\100\uffa8\101\uffa8\102\uffa8\103" +
    "\uffa8\104\u01ae\117\uffa8\001\002\000\026\011\uffab\074\uffab" +
    "\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab\102\uffab\103" +
    "\uffab\117\uffab\001\002\000\004\010\uffaa\001\002\000\004" +
    "\010\u01b0\001\002\000\024\074\312\075\317\076\324\077" +
    "\320\100\313\101\323\102\315\103\321\117\316\001\002" +
    "\000\026\011\uffbf\074\312\075\317\076\324\077\320\100" +
    "\313\101\323\102\315\103\321\117\316\001\002\000\004" +
    "\011\u01b3\001\002\000\026\011\uffa9\074\uffa9\075\uffa9\076" +
    "\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\103\uffa9\117\uffa9" +
    "\001\002\000\026\011\uffb4\074\uffb4\075\uffb4\076\uffb4\077" +
    "\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\117\uffb4\001\002" +
    "\000\004\064\u01b6\001\002\000\014\045\uff3e\046\uff3e\057" +
    "\260\117\uff3e\120\uff3e\001\002\000\004\065\u01b8\001\002" +
    "\000\004\010\uffba\001\002\000\004\010\u01ba\001\002\000" +
    "\024\074\312\075\317\076\324\077\320\100\313\101\323" +
    "\102\315\103\321\117\316\001\002\000\026\011\uffbf\074" +
    "\312\075\317\076\324\077\320\100\313\101\323\102\315" +
    "\103\321\117\316\001\002\000\004\011\u01bd\001\002\000" +
    "\026\011\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9" +
    "\101\uffb9\102\uffb9\103\uffb9\117\uffb9\001\002\000\010\044" +
    "\u01c2\064\u01c4\073\u01bf\001\002\000\004\117\u01d9\001\002" +
    "\000\026\011\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100" +
    "\uffbd\101\uffbd\102\uffbd\103\uffbd\117\uffbd\001\002\000\026" +
    "\011\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101" +
    "\uffb1\102\uffb1\103\uffb1\117\uffb1\001\002\000\022\045\uffa7" +
    "\046\uffa7\064\u01ce\074\uffa7\117\uffa7\120\uffa7\121\uffa7\122" +
    "\uffa7\001\002\000\026\011\uffaf\074\uffaf\075\uffaf\076\uffaf" +
    "\077\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf\117\uffaf\001" +
    "\002\000\022\045\u0138\046\u0137\065\uffa2\074\u0133\117\u0139" +
    "\120\u013b\121\u013a\122\u0134\001\002\000\026\011\uffb0\074" +
    "\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0" +
    "\103\uffb0\117\uffb0\001\002\000\010\013\uffa0\014\u01ca\065" +
    "\uffa0\001\002\000\004\065\u01c8\001\002\000\004\013\u01c9" +
    "\001\002\000\026\011\uffa5\074\uffa5\075\uffa5\076\uffa5\077" +
    "\uffa5\100\uffa5\101\uffa5\102\uffa5\103\uffa5\117\uffa5\001\002" +
    "\000\020\045\u0138\046\u0137\074\u0133\117\u0139\120\u013b\121" +
    "\u013a\122\u0134\001\002\000\006\013\uffa3\065\uffa3\001\002" +
    "\000\024\013\uffa2\045\u0138\046\u0137\065\uffa2\074\u0133\117" +
    "\u0139\120\u013b\121\u013a\122\u0134\001\002\000\006\013\uffa1" +
    "\065\uffa1\001\002\000\014\045\uff3e\046\uff3e\057\260\117" +
    "\uff3e\120\uff3e\001\002\000\020\045\236\046\227\074\247" +
    "\117\u0121\120\242\121\226\122\251\001\002\000\004\013" +
    "\u01d1\001\002\000\026\011\uffa6\074\uffa6\075\uffa6\076\uffa6" +
    "\077\uffa6\100\uffa6\101\uffa6\102\uffa6\103\uffa6\117\uffa6\001" +
    "\002\000\004\065\u01d3\001\002\000\004\105\u01d4\001\002" +
    "\000\020\045\236\046\227\074\247\117\u0121\120\242\121" +
    "\226\122\251\001\002\000\004\106\u01d6\001\002\000\020" +
    "\045\236\046\227\074\247\117\u0121\120\242\121\226\122" +
    "\251\001\002\000\004\013\u01d8\001\002\000\026\011\uffae" +
    "\074\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae\102" +
    "\uffae\103\uffae\117\uffae\001\002\000\006\044\u01c2\064\u01c4" +
    "\001\002\000\026\011\uffb2\074\uffb2\075\uffb2\076\uffb2\077" +
    "\uffb2\100\uffb2\101\uffb2\102\uffb2\103\uffb2\117\uffb2\001\002" +
    "\000\024\074\312\075\317\076\324\077\320\100\313\101" +
    "\323\102\315\103\321\117\316\001\002\000\026\011\uffbf" +
    "\074\312\075\317\076\324\077\320\100\313\101\323\102" +
    "\315\103\321\117\316\001\002\000\004\011\u01de\001\002" +
    "\000\004\075\u01df\001\002\000\004\064\u01e0\001\002\000" +
    "\014\045\uff3e\046\uff3e\057\260\117\uff3e\120\uff3e\001\002" +
    "\000\004\065\u01e2\001\002\000\004\013\u01e3\001\002\000" +
    "\026\011\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7" +
    "\101\uffb7\102\uffb7\103\uffb7\117\uffb7\001\002\000\026\011" +
    "\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3" +
    "\102\uffb3\103\uffb3\117\uffb3\001\002\000\004\117\u01e6\001" +
    "\002\000\004\044\u01e7\001\002\000\020\045\236\046\227" +
    "\074\247\117\u0121\120\242\121\226\122\251\001\002\000" +
    "\004\013\u01e9\001\002\000\026\011\uffbc\074\uffbc\075\uffbc" +
    "\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\117" +
    "\uffbc\001\002\000\004\117\u01ec\001\002\000\010\003\uff8a" +
    "\013\uff8a\106\uff8a\001\002\000\054\003\uff76\013\uff76\047" +
    "\274\050\275\051\276\052\273\053\271\054\272\055\267" +
    "\056\277\060\u0132\061\u012a\062\u012d\063\u0126\064\u01f0\066" +
    "\u0127\067\u0130\070\u0128\071\u0124\072\u012c\106\uff76\001\002" +
    "\000\014\045\uff3e\046\uff3e\057\260\117\uff3e\120\uff3e\001" +
    "\002\000\014\064\uff79\065\uff79\074\uff79\117\uff79\120\uff79" +
    "\001\002\000\010\003\uff7b\013\uff7b\106\uff7b\001\002\000" +
    "\022\045\u0138\046\u0137\065\u013f\074\u0133\117\u0139\120\u013b" +
    "\121\u013a\122\u0134\001\002\000\010\003\uff7a\013\uff7a\106" +
    "\uff7a\001\002\000\014\064\u0184\065\u0185\074\uff64\117\uff64" +
    "\120\uff64\001\002\000\010\074\u0186\117\u0188\120\u0187\001" +
    "\002\000\010\003\uff78\013\uff78\106\uff78\001\002\000\010" +
    "\003\uff77\013\uff77\106\uff77\001\002\000\004\011\u0209\001" +
    "\002\000\004\064\u01f8\001\002\000\014\045\uff3e\046\uff3e" +
    "\057\260\117\uff3e\120\uff3e\001\002\000\004\065\u01fa\001" +
    "\002\000\004\010\uffca\001\002\000\004\010\u01fc\001\002" +
    "\000\024\074\312\075\317\076\324\077\320\100\313\101" +
    "\323\102\315\103\321\117\316\001\002\000\026\011\uffbf" +
    "\074\312\075\317\076\324\077\320\100\313\101\323\102" +
    "\315\103\321\117\316\001\002\000\004\011\u01ff\001\002" +
    "\000\212\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\045\uffc4\046\uffc4\064\uffc4\074\uffc4\075\uffc4\076\uffc4" +
    "\101\uffc4\102\uffc4\103\uffc4\104\u0200\114\uffc4\115\uffc4\116" +
    "\uffc4\117\uffc4\120\uffc4\121\uffc4\122\uffc4\123\uffc4\124\uffc4" +
    "\125\uffc4\126\uffc4\127\uffc4\130\uffc4\131\uffc4\132\uffc4\133" +
    "\uffc4\134\uffc4\135\uffc4\136\uffc4\137\uffc4\140\uffc4\141\uffc4" +
    "\142\uffc4\143\uffc4\144\uffc4\145\uffc4\146\uffc4\147\uffc4\150" +
    "\uffc4\151\uffc4\152\uffc4\153\uffc4\154\uffc4\155\uffc4\156\uffc4" +
    "\157\uffc4\160\uffc4\161\uffc4\162\uffc4\001\002\000\006\003" +
    "\u0202\010\uffc7\001\002\000\210\015\uffc9\016\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\045\uffc9\046\uffc9\064\uffc9\074" +
    "\uffc9\075\uffc9\076\uffc9\101\uffc9\102\uffc9\103\uffc9\114\uffc9" +
    "\115\uffc9\116\uffc9\117\uffc9\120\uffc9\121\uffc9\122\uffc9\123" +
    "\uffc9\124\uffc9\125\uffc9\126\uffc9\127\uffc9\130\uffc9\131\uffc9" +
    "\132\uffc9\133\uffc9\134\uffc9\135\uffc9\136\uffc9\137\uffc9\140" +
    "\uffc9\141\uffc9\142\uffc9\143\uffc9\144\uffc9\145\uffc9\146\uffc9" +
    "\147\uffc9\150\uffc9\151\uffc9\152\uffc9\153\uffc9\154\uffc9\155" +
    "\uffc9\156\uffc9\157\uffc9\160\uffc9\161\uffc9\162\uffc9\001\002" +
    "\000\004\011\u0208\001\002\000\004\010\u0204\001\002\000" +
    "\024\074\312\075\317\076\324\077\320\100\313\101\323" +
    "\102\315\103\321\117\316\001\002\000\026\011\uffbf\074" +
    "\312\075\317\076\324\077\320\100\313\101\323\102\315" +
    "\103\321\117\316\001\002\000\004\011\u0207\001\002\000" +
    "\210\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\045\uffc6\046\uffc6\064\uffc6\074\uffc6\075\uffc6\076\uffc6\101" +
    "\uffc6\102\uffc6\103\uffc6\114\uffc6\115\uffc6\116\uffc6\117\uffc6" +
    "\120\uffc6\121\uffc6\122\uffc6\123\uffc6\124\uffc6\125\uffc6\126" +
    "\uffc6\127\uffc6\130\uffc6\131\uffc6\132\uffc6\133\uffc6\134\uffc6" +
    "\135\uffc6\136\uffc6\137\uffc6\140\uffc6\141\uffc6\142\uffc6\143" +
    "\uffc6\144\uffc6\145\uffc6\146\uffc6\147\uffc6\150\uffc6\151\uffc6" +
    "\152\uffc6\153\uffc6\154\uffc6\155\uffc6\156\uffc6\157\uffc6\160" +
    "\uffc6\161\uffc6\162\uffc6\001\002\000\210\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\037\uffc5\045\uffc5\046\uffc5\064" +
    "\uffc5\074\uffc5\075\uffc5\076\uffc5\101\uffc5\102\uffc5\103\uffc5" +
    "\114\uffc5\115\uffc5\116\uffc5\117\uffc5\120\uffc5\121\uffc5\122" +
    "\uffc5\123\uffc5\124\uffc5\125\uffc5\126\uffc5\127\uffc5\130\uffc5" +
    "\131\uffc5\132\uffc5\133\uffc5\134\uffc5\135\uffc5\136\uffc5\137" +
    "\uffc5\140\uffc5\141\uffc5\142\uffc5\143\uffc5\144\uffc5\145\uffc5" +
    "\146\uffc5\147\uffc5\150\uffc5\151\uffc5\152\uffc5\153\uffc5\154" +
    "\uffc5\155\uffc5\156\uffc5\157\uffc5\160\uffc5\161\uffc5\162\uffc5" +
    "\001\002\000\210\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\045\uffc8\046\uffc8\064\uffc8\074\uffc8\075\uffc8" +
    "\076\uffc8\101\uffc8\102\uffc8\103\uffc8\114\uffc8\115\uffc8\116" +
    "\uffc8\117\uffc8\120\uffc8\121\uffc8\122\uffc8\123\uffc8\124\uffc8" +
    "\125\uffc8\126\uffc8\127\uffc8\130\uffc8\131\uffc8\132\uffc8\133" +
    "\uffc8\134\uffc8\135\uffc8\136\uffc8\137\uffc8\140\uffc8\141\uffc8" +
    "\142\uffc8\143\uffc8\144\uffc8\145\uffc8\146\uffc8\147\uffc8\150" +
    "\uffc8\151\uffc8\152\uffc8\153\uffc8\154\uffc8\155\uffc8\156\uffc8" +
    "\157\uffc8\160\uffc8\161\uffc8\162\uffc8\001\002\000\026\060" +
    "\u0197\061\u0191\062\u018d\063\u0194\065\u0198\066\u018f\067\u018e" +
    "\070\u018b\071\u0192\072\u0193\001\002\000\010\003\uff83\013" +
    "\uff83\106\uff83\001\002\000\004\076\uffea\001\002\000\010" +
    "\003\uff86\013\uff86\106\uff86\001\002\000\010\042\132\043" +
    "\133\117\uff8d\001\002\000\004\117\u0210\001\002\000\006" +
    "\013\u0213\044\u0212\001\002\000\210\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\045\uffe8\046\uffe8\064\uffe8" +
    "\074\uffe8\075\uffe8\076\uffe8\101\uffe8\102\uffe8\103\uffe8\114" +
    "\uffe8\115\uffe8\116\uffe8\117\uffe8\120\uffe8\121\uffe8\122\uffe8" +
    "\123\uffe8\124\uffe8\125\uffe8\126\uffe8\127\uffe8\130\uffe8\131" +
    "\uffe8\132\uffe8\133\uffe8\134\uffe8\135\uffe8\136\uffe8\137\uffe8" +
    "\140\uffe8\141\uffe8\142\uffe8\143\uffe8\144\uffe8\145\uffe8\146" +
    "\uffe8\147\uffe8\150\uffe8\151\uffe8\152\uffe8\153\uffe8\154\uffe8" +
    "\155\uffe8\156\uffe8\157\uffe8\160\uffe8\161\uffe8\162\uffe8\001" +
    "\002\000\022\045\236\046\227\064\u0218\074\247\117\u0121" +
    "\120\242\121\226\122\251\001\002\000\210\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\045\uffdd\046\uffdd" +
    "\064\uffdd\074\uffdd\075\uffdd\076\uffdd\101\uffdd\102\uffdd\103" +
    "\uffdd\114\uffdd\115\uffdd\116\uffdd\117\uffdd\120\uffdd\121\uffdd" +
    "\122\uffdd\123\uffdd\124\uffdd\125\uffdd\126\uffdd\127\uffdd\130" +
    "\uffdd\131\uffdd\132\uffdd\133\uffdd\134\uffdd\135\uffdd\136\uffdd" +
    "\137\uffdd\140\uffdd\141\uffdd\142\uffdd\143\uffdd\144\uffdd\145" +
    "\uffdd\146\uffdd\147\uffdd\150\uffdd\151\uffdd\152\uffdd\153\uffdd" +
    "\154\uffdd\155\uffdd\156\uffdd\157\uffdd\160\uffdd\161\uffdd\162" +
    "\uffdd\001\002\000\210\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\045\uffde\046\uffde\064\uffde\074\uffde\075" +
    "\uffde\076\uffde\101\uffde\102\uffde\103\uffde\114\uffde\115\uffde" +
    "\116\uffde\117\uffde\120\uffde\121\uffde\122\uffde\123\uffde\124" +
    "\uffde\125\uffde\126\uffde\127\uffde\130\uffde\131\uffde\132\uffde" +
    "\133\uffde\134\uffde\135\uffde\136\uffde\137\uffde\140\uffde\141" +
    "\uffde\142\uffde\143\uffde\144\uffde\145\uffde\146\uffde\147\uffde" +
    "\150\uffde\151\uffde\152\uffde\153\uffde\154\uffde\155\uffde\156" +
    "\uffde\157\uffde\160\uffde\161\uffde\162\uffde\001\002\000\210" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\045" +
    "\uffdb\046\uffdb\064\uffdb\074\uffdb\075\uffdb\076\uffdb\101\uffdb" +
    "\102\uffdb\103\uffdb\114\uffdb\115\uffdb\116\uffdb\117\uffdb\120" +
    "\uffdb\121\uffdb\122\uffdb\123\uffdb\124\uffdb\125\uffdb\126\uffdb" +
    "\127\uffdb\130\uffdb\131\uffdb\132\uffdb\133\uffdb\134\uffdb\135" +
    "\uffdb\136\uffdb\137\uffdb\140\uffdb\141\uffdb\142\uffdb\143\uffdb" +
    "\144\uffdb\145\uffdb\146\uffdb\147\uffdb\150\uffdb\151\uffdb\152" +
    "\uffdb\153\uffdb\154\uffdb\155\uffdb\156\uffdb\157\uffdb\160\uffdb" +
    "\161\uffdb\162\uffdb\001\002\000\210\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\045\uffdc\046\uffdc\064\uffdc" +
    "\074\uffdc\075\uffdc\076\uffdc\101\uffdc\102\uffdc\103\uffdc\114" +
    "\uffdc\115\uffdc\116\uffdc\117\uffdc\120\uffdc\121\uffdc\122\uffdc" +
    "\123\uffdc\124\uffdc\125\uffdc\126\uffdc\127\uffdc\130\uffdc\131" +
    "\uffdc\132\uffdc\133\uffdc\134\uffdc\135\uffdc\136\uffdc\137\uffdc" +
    "\140\uffdc\141\uffdc\142\uffdc\143\uffdc\144\uffdc\145\uffdc\146" +
    "\uffdc\147\uffdc\150\uffdc\151\uffdc\152\uffdc\153\uffdc\154\uffdc" +
    "\155\uffdc\156\uffdc\157\uffdc\160\uffdc\161\uffdc\162\uffdc\001" +
    "\002\000\004\013\u0224\001\002\000\016\003\u0219\045\uff3e" +
    "\046\uff3e\057\260\117\uff3e\120\uff3e\001\002\000\004\013" +
    "\u0223\001\002\000\004\065\u021b\001\002\000\004\105\u021c" +
    "\001\002\000\020\045\236\046\227\074\247\117\u0121\120" +
    "\242\121\226\122\251\001\002\000\006\003\u021e\106\u021f" +
    "\001\002\000\004\013\u0222\001\002\000\020\045\236\046" +
    "\227\074\247\117\u0121\120\242\121\226\122\251\001\002" +
    "\000\004\013\u0221\001\002\000\210\015\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\037\uffc3\045\uffc3\046\uffc3\064\uffc3" +
    "\074\uffc3\075\uffc3\076\uffc3\101\uffc3\102\uffc3\103\uffc3\114" +
    "\uffc3\115\uffc3\116\uffc3\117\uffc3\120\uffc3\121\uffc3\122\uffc3" +
    "\123\uffc3\124\uffc3\125\uffc3\126\uffc3\127\uffc3\130\uffc3\131" +
    "\uffc3\132\uffc3\133\uffc3\134\uffc3\135\uffc3\136\uffc3\137\uffc3" +
    "\140\uffc3\141\uffc3\142\uffc3\143\uffc3\144\uffc3\145\uffc3\146" +
    "\uffc3\147\uffc3\150\uffc3\151\uffc3\152\uffc3\153\uffc3\154\uffc3" +
    "\155\uffc3\156\uffc3\157\uffc3\160\uffc3\161\uffc3\162\uffc3\001" +
    "\002\000\210\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\045\uffc1\046\uffc1\064\uffc1\074\uffc1\075\uffc1\076" +
    "\uffc1\101\uffc1\102\uffc1\103\uffc1\114\uffc1\115\uffc1\116\uffc1" +
    "\117\uffc1\120\uffc1\121\uffc1\122\uffc1\123\uffc1\124\uffc1\125" +
    "\uffc1\126\uffc1\127\uffc1\130\uffc1\131\uffc1\132\uffc1\133\uffc1" +
    "\134\uffc1\135\uffc1\136\uffc1\137\uffc1\140\uffc1\141\uffc1\142" +
    "\uffc1\143\uffc1\144\uffc1\145\uffc1\146\uffc1\147\uffc1\150\uffc1" +
    "\151\uffc1\152\uffc1\153\uffc1\154\uffc1\155\uffc1\156\uffc1\157" +
    "\uffc1\160\uffc1\161\uffc1\162\uffc1\001\002\000\210\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\045\uffc2\046" +
    "\uffc2\064\uffc2\074\uffc2\075\uffc2\076\uffc2\101\uffc2\102\uffc2" +
    "\103\uffc2\114\uffc2\115\uffc2\116\uffc2\117\uffc2\120\uffc2\121" +
    "\uffc2\122\uffc2\123\uffc2\124\uffc2\125\uffc2\126\uffc2\127\uffc2" +
    "\130\uffc2\131\uffc2\132\uffc2\133\uffc2\134\uffc2\135\uffc2\136" +
    "\uffc2\137\uffc2\140\uffc2\141\uffc2\142\uffc2\143\uffc2\144\uffc2" +
    "\145\uffc2\146\uffc2\147\uffc2\150\uffc2\151\uffc2\152\uffc2\153" +
    "\uffc2\154\uffc2\155\uffc2\156\uffc2\157\uffc2\160\uffc2\161\uffc2" +
    "\162\uffc2\001\002\000\210\015\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f" +
    "\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\045\uff9f\046\uff9f\064\uff9f\074\uff9f" +
    "\075\uff9f\076\uff9f\101\uff9f\102\uff9f\103\uff9f\114\uff9f\115" +
    "\uff9f\116\uff9f\117\uff9f\120\uff9f\121\uff9f\122\uff9f\123\uff9f" +
    "\124\uff9f\125\uff9f\126\uff9f\127\uff9f\130\uff9f\131\uff9f\132" +
    "\uff9f\133\uff9f\134\uff9f\135\uff9f\136\uff9f\137\uff9f\140\uff9f" +
    "\141\uff9f\142\uff9f\143\uff9f\144\uff9f\145\uff9f\146\uff9f\147" +
    "\uff9f\150\uff9f\151\uff9f\152\uff9f\153\uff9f\154\uff9f\155\uff9f" +
    "\156\uff9f\157\uff9f\160\uff9f\161\uff9f\162\uff9f\001\002\000" +
    "\004\013\u0226\001\002\000\210\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\045\uffe2\046\uffe2\064\uffe2\074" +
    "\uffe2\075\uffe2\076\uffe2\101\uffe2\102\uffe2\103\uffe2\114\uffe2" +
    "\115\uffe2\116\uffe2\117\uffe2\120\uffe2\121\uffe2\122\uffe2\123" +
    "\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2\130\uffe2\131\uffe2" +
    "\132\uffe2\133\uffe2\134\uffe2\135\uffe2\136\uffe2\137\uffe2\140" +
    "\uffe2\141\uffe2\142\uffe2\143\uffe2\144\uffe2\145\uffe2\146\uffe2" +
    "\147\uffe2\150\uffe2\151\uffe2\152\uffe2\153\uffe2\154\uffe2\155" +
    "\uffe2\156\uffe2\157\uffe2\160\uffe2\161\uffe2\162\uffe2\001\002" +
    "\000\024\074\312\075\317\076\324\077\320\100\313\101" +
    "\323\102\315\103\321\117\316\001\002\000\026\011\uffbf" +
    "\074\312\075\317\076\324\077\320\100\313\101\323\102" +
    "\315\103\321\117\316\001\002\000\004\011\u022a\001\002" +
    "\000\004\075\u022b\001\002\000\004\064\u022c\001\002\000" +
    "\014\045\uff3e\046\uff3e\057\260\117\uff3e\120\uff3e\001\002" +
    "\000\004\065\u022e\001\002\000\004\013\u022f\001\002\000" +
    "\210\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\045\uffcc\046\uffcc\064\uffcc\074\uffcc\075\uffcc\076\uffcc\101" +
    "\uffcc\102\uffcc\103\uffcc\114\uffcc\115\uffcc\116\uffcc\117\uffcc" +
    "\120\uffcc\121\uffcc\122\uffcc\123\uffcc\124\uffcc\125\uffcc\126" +
    "\uffcc\127\uffcc\130\uffcc\131\uffcc\132\uffcc\133\uffcc\134\uffcc" +
    "\135\uffcc\136\uffcc\137\uffcc\140\uffcc\141\uffcc\142\uffcc\143" +
    "\uffcc\144\uffcc\145\uffcc\146\uffcc\147\uffcc\150\uffcc\151\uffcc" +
    "\152\uffcc\153\uffcc\154\uffcc\155\uffcc\156\uffcc\157\uffcc\160" +
    "\uffcc\161\uffcc\162\uffcc\001\002\000\010\003\uff85\013\uff85" +
    "\106\uff85\001\002\000\004\117\327\001\002\000\004\013" +
    "\u0233\001\002\000\014\045\uff3e\046\uff3e\057\260\117\uff3e" +
    "\120\uff3e\001\002\000\004\013\u0235\001\002\000\014\074" +
    "\334\117\337\120\335\121\343\122\342\001\002\000\004" +
    "\065\u0237\001\002\000\004\010\u0238\001\002\000\024\074" +
    "\312\075\317\076\324\077\320\100\313\101\323\102\315" +
    "\103\321\117\316\001\002\000\026\011\uffbf\074\312\075" +
    "\317\076\324\077\320\100\313\101\323\102\315\103\321" +
    "\117\316\001\002\000\004\011\u023b\001\002\000\210\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\045\uffcd" +
    "\046\uffcd\064\uffcd\074\uffcd\075\uffcd\076\uffcd\101\uffcd\102" +
    "\uffcd\103\uffcd\114\uffcd\115\uffcd\116\uffcd\117\uffcd\120\uffcd" +
    "\121\uffcd\122\uffcd\123\uffcd\124\uffcd\125\uffcd\126\uffcd\127" +
    "\uffcd\130\uffcd\131\uffcd\132\uffcd\133\uffcd\134\uffcd\135\uffcd" +
    "\136\uffcd\137\uffcd\140\uffcd\141\uffcd\142\uffcd\143\uffcd\144" +
    "\uffcd\145\uffcd\146\uffcd\147\uffcd\150\uffcd\151\uffcd\152\uffcd" +
    "\153\uffcd\154\uffcd\155\uffcd\156\uffcd\157\uffcd\160\uffcd\161" +
    "\uffcd\162\uffcd\001\002\000\020\045\236\046\227\074\247" +
    "\117\u0121\120\242\121\226\122\251\001\002\000\004\013" +
    "\u023e\001\002\000\004\011\u023f\001\002\000\006\011\ufff5" +
    "\110\ufff5\001\002\000\004\044\u0241\001\002\000\022\045" +
    "\uffe5\046\uffe5\064\uffe5\074\uffe5\117\uffe5\120\uffe5\121\uffe5" +
    "\122\uffe5\001\002\000\022\045\236\046\227\064\u0218\074" +
    "\247\117\u0121\120\242\121\226\122\251\001\002\000\210" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\045" +
    "\uffdf\046\uffdf\064\uffdf\074\uffdf\075\uffdf\076\uffdf\101\uffdf" +
    "\102\uffdf\103\uffdf\114\uffdf\115\uffdf\116\uffdf\117\uffdf\120" +
    "\uffdf\121\uffdf\122\uffdf\123\uffdf\124\uffdf\125\uffdf\126\uffdf" +
    "\127\uffdf\130\uffdf\131\uffdf\132\uffdf\133\uffdf\134\uffdf\135" +
    "\uffdf\136\uffdf\137\uffdf\140\uffdf\141\uffdf\142\uffdf\143\uffdf" +
    "\144\uffdf\145\uffdf\146\uffdf\147\uffdf\150\uffdf\151\uffdf\152" +
    "\uffdf\153\uffdf\154\uffdf\155\uffdf\156\uffdf\157\uffdf\160\uffdf" +
    "\161\uffdf\162\uffdf\001\002\000\210\015\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\045\uffe0\046\uffe0\064\uffe0" +
    "\074\uffe0\075\uffe0\076\uffe0\101\uffe0\102\uffe0\103\uffe0\114" +
    "\uffe0\115\uffe0\116\uffe0\117\uffe0\120\uffe0\121\uffe0\122\uffe0" +
    "\123\uffe0\124\uffe0\125\uffe0\126\uffe0\127\uffe0\130\uffe0\131" +
    "\uffe0\132\uffe0\133\uffe0\134\uffe0\135\uffe0\136\uffe0\137\uffe0" +
    "\140\uffe0\141\uffe0\142\uffe0\143\uffe0\144\uffe0\145\uffe0\146" +
    "\uffe0\147\uffe0\150\uffe0\151\uffe0\152\uffe0\153\uffe0\154\uffe0" +
    "\155\uffe0\156\uffe0\157\uffe0\160\uffe0\161\uffe0\162\uffe0\001" +
    "\002\000\210\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\045\uffe4\046\uffe4\064\uffe4\074\uffe4\075\uffe4\076" +
    "\uffe4\101\uffe4\102\uffe4\103\uffe4\114\uffe4\115\uffe4\116\uffe4" +
    "\117\uffe4\120\uffe4\121\uffe4\122\uffe4\123\uffe4\124\uffe4\125" +
    "\uffe4\126\uffe4\127\uffe4\130\uffe4\131\uffe4\132\uffe4\133\uffe4" +
    "\134\uffe4\135\uffe4\136\uffe4\137\uffe4\140\uffe4\141\uffe4\142" +
    "\uffe4\143\uffe4\144\uffe4\145\uffe4\146\uffe4\147\uffe4\150\uffe4" +
    "\151\uffe4\152\uffe4\153\uffe4\154\uffe4\155\uffe4\156\uffe4\157" +
    "\uffe4\160\uffe4\161\uffe4\162\uffe4\001\002\000\210\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\045\uffe3\046" +
    "\uffe3\064\uffe3\074\uffe3\075\uffe3\076\uffe3\101\uffe3\102\uffe3" +
    "\103\uffe3\114\uffe3\115\uffe3\116\uffe3\117\uffe3\120\uffe3\121" +
    "\uffe3\122\uffe3\123\uffe3\124\uffe3\125\uffe3\126\uffe3\127\uffe3" +
    "\130\uffe3\131\uffe3\132\uffe3\133\uffe3\134\uffe3\135\uffe3\136" +
    "\uffe3\137\uffe3\140\uffe3\141\uffe3\142\uffe3\143\uffe3\144\uffe3" +
    "\145\uffe3\146\uffe3\147\uffe3\150\uffe3\151\uffe3\152\uffe3\153" +
    "\uffe3\154\uffe3\155\uffe3\156\uffe3\157\uffe3\160\uffe3\161\uffe3" +
    "\162\uffe3\001\002\000\004\117\u0248\001\002\000\006\014" +
    "\202\065\ufff2\001\002\000\004\065\ufff3\001\002\000\006" +
    "\011\ufff4\110\ufff4\001\002\000\004\011\ufffb\001\002\000" +
    "\004\013\u025a\001\002\000\012\040\130\042\uff90\043\uff90" +
    "\117\uff90\001\002\000\010\042\132\043\133\117\uff8d\001" +
    "\002\000\004\117\uff99\001\002\000\004\117\u0251\001\002" +
    "\000\006\013\uff98\044\uff98\001\002\000\006\013\u0255\044" +
    "\u0253\001\002\000\020\045\uff93\046\uff93\074\uff93\117\uff93" +
    "\120\uff93\121\uff93\122\uff93\001\002\000\164\011\uff97\015" +
    "\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97" +
    "\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032" +
    "\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\107\uff97" +
    "\110\uff97\114\uff97\115\uff97\116\uff97\123\uff97\124\uff97\125" +
    "\uff97\126\uff97\127\uff97\130\uff97\131\uff97\132\uff97\133\uff97" +
    "\134\uff97\135\uff97\136\uff97\137\uff97\140\uff97\141\uff97\142" +
    "\uff97\143\uff97\144\uff97\145\uff97\146\uff97\147\uff97\150\uff97" +
    "\151\uff97\152\uff97\153\uff97\154\uff97\155\uff97\156\uff97\157" +
    "\uff97\160\uff97\161\uff97\162\uff97\001\002\000\164\011\uff95" +
    "\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023" +
    "\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95" +
    "\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\107" +
    "\uff95\110\uff95\114\uff95\115\uff95\116\uff95\123\uff95\124\uff95" +
    "\125\uff95\126\uff95\127\uff95\130\uff95\131\uff95\132\uff95\133" +
    "\uff95\134\uff95\135\uff95\136\uff95\137\uff95\140\uff95\141\uff95" +
    "\142\uff95\143\uff95\144\uff95\145\uff95\146\uff95\147\uff95\150" +
    "\uff95\151\uff95\152\uff95\153\uff95\154\uff95\155\uff95\156\uff95" +
    "\157\uff95\160\uff95\161\uff95\162\uff95\001\002\000\004\013" +
    "\u0257\001\002\000\164\011\uff94\015\uff94\016\uff94\017\uff94" +
    "\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026" +
    "\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94" +
    "\035\uff94\036\uff94\037\uff94\107\uff94\110\uff94\114\uff94\115" +
    "\uff94\116\uff94\123\uff94\124\uff94\125\uff94\126\uff94\127\uff94" +
    "\130\uff94\131\uff94\132\uff94\133\uff94\134\uff94\135\uff94\136" +
    "\uff94\137\uff94\140\uff94\141\uff94\142\uff94\143\uff94\144\uff94" +
    "\145\uff94\146\uff94\147\uff94\150\uff94\151\uff94\152\uff94\153" +
    "\uff94\154\uff94\155\uff94\156\uff94\157\uff94\160\uff94\161\uff94" +
    "\162\uff94\001\002\000\020\045\236\046\227\074\247\117" +
    "\u0121\120\242\121\226\122\251\001\002\000\004\013\uff92" +
    "\001\002\000\164\011\uff96\015\uff96\016\uff96\017\uff96\020" +
    "\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96" +
    "\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035" +
    "\uff96\036\uff96\037\uff96\107\uff96\110\uff96\114\uff96\115\uff96" +
    "\116\uff96\123\uff96\124\uff96\125\uff96\126\uff96\127\uff96\130" +
    "\uff96\131\uff96\132\uff96\133\uff96\134\uff96\135\uff96\136\uff96" +
    "\137\uff96\140\uff96\141\uff96\142\uff96\143\uff96\144\uff96\145" +
    "\uff96\146\uff96\147\uff96\150\uff96\151\uff96\152\uff96\153\uff96" +
    "\154\uff96\155\uff96\156\uff96\157\uff96\160\uff96\161\uff96\162" +
    "\uff96\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0258\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\063" +
    "\004\050\005\043\006\066\007\076\011\100\013\022\016" +
    "\042\047\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\155\u024c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\u024a" +
    "\005\043\006\066\011\100\013\022\016\042\047\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\151\004\050\005\043" +
    "\006\066\007\076\011\100\013\022\016\042\047\106\001" +
    "\001\000\002\001\001\000\006\006\150\011\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\120\006\066" +
    "\011\100\047\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\130\001\001\000\002\001\001" +
    "\000\004\015\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\136" +
    "\050\137\001\001\000\004\014\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\136\050\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\171\004\050\005\043" +
    "\006\066\007\076\011\100\013\022\016\042\047\106\001" +
    "\001\000\002\001\001\000\004\074\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\177\001\001\000\002\001\001\000\004\054\202\001\001" +
    "\000\004\013\u0246\001\001\000\002\001\001\000\004\055" +
    "\205\001\001\000\002\001\001\000\004\056\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\010\244\013\233\020\220\031\236\033\242\041\234" +
    "\043\223\044\245\053\230\057\222\067\232\072\237\075" +
    "\240\001\001\000\002\001\001\000\006\137\u023f\161\u0122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\267\026\u022f\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\027\u0224\117" +
    "\u01c5\122\u013b\123\u0134\127\u013c\001\001\000\002\001\001" +
    "\000\004\014\u020d\001\001\000\002\001\001\000\006\024" +
    "\267\026\u020c\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\010\244\013\233\020\220\031\236\033\242\041" +
    "\234\043\223\044\245\053\230\057\u020b\067\232\072\237" +
    "\075\240\001\001\000\004\162\u0209\001\001\000\002\001" +
    "\001\000\004\143\u01f6\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\u01ea\001\001\000\004\141\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\255\115\256\001\001\000" +
    "\002\001\001\000\004\116\263\001\001\000\002\001\001" +
    "\000\006\024\267\026\305\001\001\000\004\167\303\001" +
    "\001\000\004\166\301\001\001\000\002\001\001\000\006" +
    "\024\267\026\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\170\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\300" +
    "\115\256\001\001\000\002\001\001\000\006\024\267\026" +
    "\302\001\001\000\002\001\001\000\006\024\267\026\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\142" +
    "\307\001\001\000\002\001\001\000\006\034\321\051\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\146\u01bd\001\001\000\004" +
    "\147\u01b4\001\001\000\002\001\001\000\004\151\u01a3\001" +
    "\001\000\010\034\346\040\u01a1\051\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\327\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\331\115\256\001\001\000\002\001\001\000\010\100" +
    "\340\103\337\104\335\001\001\000\004\102\u0118\001\001" +
    "\000\006\105\u0116\114\377\001\001\000\002\001\001\000" +
    "\010\101\354\106\362\114\357\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\345\051\313\001\001\000\010" +
    "\034\346\040\347\051\313\001\001\000\010\034\346\040" +
    "\351\051\313\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\110\u0115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\107\u0108\001\001\000\002\001\001\000" +
    "\004\110\373\001\001\000\002\001\001\000\006\105\u0103" +
    "\114\377\001\001\000\002\001\001\000\004\113\376\001" +
    "\001\000\002\001\001\000\006\105\u0100\114\377\001\001" +
    "\000\004\110\u0101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\113\u0106\001\001\000\006\105\u0107\114\377\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\112\u010d\001\001\000\002\001\001\000\004\107" +
    "\u010f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\112\u0112\001\001\000" +
    "\002\001\001\000\006\106\u0114\114\357\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\111\u011b\114\u011a\001\001" +
    "\000\004\110\u011e\001\001\000\002\001\001\000\004\107" +
    "\u011d\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\u0121\031\236\067\232\072\237\001\001\000\004\161" +
    "\u0122\001\001\000\002\001\001\000\012\024\u0124\063\u012d" +
    "\066\u0128\073\u012e\001\001\000\002\001\001\000\006\023" +
    "\u01a0\115\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\133\u0182\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\070\u013d\117\u0135\122\u013b\123\u0134\127\u013c\001\001" +
    "\000\002\001\001\000\004\121\u0177\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\071\u0174\001\001\000\006" +
    "\130\u0171\131\u0147\001\001\000\006\130\u0170\131\u0147\001" +
    "\001\000\012\120\u0166\124\u0165\126\u0167\131\u0168\001\001" +
    "\000\002\001\001\000\006\130\u0142\131\u0147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\132\u0155\135" +
    "\u0158\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\130\u0164\131\u0147\001\001\000" +
    "\002\001\001\000\006\130\u0160\131\u0147\001\001\000\002" +
    "\001\001\000\004\136\u015d\001\001\000\004\135\u015b\001" +
    "\001\000\002\001\001\000\006\130\u015a\131\u0147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\130\u015e\131\u0147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\130" +
    "\u0163\131\u0147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\132\u016f\135" +
    "\u0158\001\001\000\006\132\u016e\135\u0158\001\001\000\002" +
    "\001\001\000\006\132\u016b\135\u0158\001\001\000\002\001" +
    "\001\000\010\124\u016d\126\u0167\131\u0168\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\070\u0175\117\u0135\122\u013b" +
    "\123\u0134\127\u013c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\125\u0179\126\u017a\131\u017b\001\001\000\002\001" +
    "\001\000\006\132\u017f\135\u0158\001\001\000\006\132\u017e" +
    "\135\u0158\001\001\000\006\132\u017d\135\u0158\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\024\u0124\066\u0128\073\u0181\001\001\000\002\001\001\000" +
    "\004\021\u0188\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\u018b\025\u019c\001\001\000" +
    "\004\164\u0189\001\001\000\002\001\001\000\010\022\u018b" +
    "\025\u0194\134\u018f\001\001\000\002\001\001\000\004\165" +
    "\u0199\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\070\u0198\117\u0135\122\u013b\123\u0134\127\u013c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\133\u019a\001\001\000\004\021\u019b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\u018b\025\u0194\134\u019f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\u01a5\115\256\001\001\000\002\001" +
    "\001\000\004\152\u01a7\001\001\000\002\001\001\000\006" +
    "\034\u01a9\051\313\001\001\000\010\034\346\040\u01aa\051" +
    "\313\001\001\000\002\001\001\000\004\052\u01ac\001\001" +
    "\000\002\001\001\000\004\153\u01ae\001\001\000\002\001" +
    "\001\000\006\034\u01b0\051\313\001\001\000\010\034\346" +
    "\040\u01b1\051\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\u01b6" +
    "\115\256\001\001\000\002\001\001\000\004\150\u01b8\001" +
    "\001\000\002\001\001\000\006\034\u01ba\051\313\001\001" +
    "\000\010\034\346\040\u01bb\051\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\035\u01c4\036\u01bf\037\u01c2" +
    "\061\u01c0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\154\u01ce\001\001\000\002\001\001" +
    "\000\014\027\u01c6\117\u01c5\122\u013b\123\u0134\127\u013c\001" +
    "\001\000\002\001\001\000\004\030\u01ca\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\117" +
    "\u01cb\122\u013b\123\u0134\127\u013c\001\001\000\002\001\001" +
    "\000\014\027\u01cc\117\u01c5\122\u013b\123\u0134\127\u013c\001" +
    "\001\000\002\001\001\000\006\023\u01d1\115\256\001\001" +
    "\000\012\020\u01cf\031\236\067\232\072\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\u01d4\031\236\067\232\072\237\001" +
    "\001\000\002\001\001\000\012\020\u01d6\031\236\067\232" +
    "\072\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\035\u01c4\037\u01c2\061\u01d9\001\001\000\002\001\001" +
    "\000\006\034\u01db\051\313\001\001\000\010\034\346\040" +
    "\u01dc\051\313\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\u01e0\115\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\u01e7\031\236\067\232\072\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\u01ec\065\u01ee\066\u01ed\001\001\000\006\023\u01f4" +
    "\115\256\001\001\000\004\163\u01f1\001\001\000\002\001" +
    "\001\000\014\070\u01f0\117\u0135\122\u013b\123\u0134\127\u013c" +
    "\001\001\000\002\001\001\000\004\133\u01f2\001\001\000" +
    "\004\021\u01f3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\u01f8\115" +
    "\256\001\001\000\002\001\001\000\004\144\u01fa\001\001" +
    "\000\002\001\001\000\006\034\u01fc\051\313\001\001\000" +
    "\010\034\346\040\u01fd\051\313\001\001\000\002\001\001" +
    "\000\004\045\u0200\001\001\000\004\145\u0202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\u0204\051\313\001\001\000\010\034\346\040\u0205\051" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\u018b\025\u020a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u020e\001\001\000\002\001\001\000\004\076" +
    "\u0210\001\001\000\002\001\001\000\020\020\u0216\031\236" +
    "\046\u0214\060\u0215\067\232\072\237\077\u0213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\u0219\115\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\020\u021c\031\236\067\232\072\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\u021f\031\236" +
    "\067\232\072\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\u0227\051" +
    "\313\001\001\000\010\034\346\040\u0228\051\313\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\u022c\115\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\u0231\001\001\000\002\001\001\000\006\023\u0233\115\256" +
    "\001\001\000\002\001\001\000\010\100\u0235\103\337\104" +
    "\335\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\u0238\051\313\001\001\000\010\034\346\040\u0239\051" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\u023c\031\236\067\232\072\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\140\u0241\001\001\000\020\020\u0216\031\236\046" +
    "\u0242\060\u0243\062\u0244\067\232\072\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\u0248\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u024d\001\001\000\004\015\u024e\001\001" +
    "\000\004\156\u024f\001\001\000\002\001\001\000\004\157" +
    "\u0251\001\001\000\006\017\u0255\032\u0253\001\001\000\004" +
    "\160\u0257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\u0258\031\236" +
    "\067\232\072\237\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";

    // lista donde se almacenan los errores sintácticos
    public static LinkedList<TError> TablaES = new LinkedList<TError>();
    public static LinkedList<Integer> listaParametros = new LinkedList<Integer>();
    public static LinkedList<RegistroSemantico> pilaSemantica = new LinkedList<RegistroSemantico>();
    public static LinkedList<Simbolo> tablaSimbolos = new LinkedList<Simbolo>();

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        if(s.value != null){
            String lexema = s.value.toString();
            int fila = s.left;
            int columna = s.right;
            TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
            TablaES.add(datos);
            System.out.println("------ Recuperacion exitosa ------");
            System.out.println("\t\tLexema: "+lexema);
        }
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        if(s.value != null){
            String lexema = s.value.toString();
            int fila = s.left;
            int columna = s.right;
            TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
            TablaES.add(datos);
            System.out.println("------ Error Sintactico irrecuperable ------");
            System.out.println("\t\tLexema: "+lexema);
        }
    }

    /* Metodos para realizar las acciones semánticas*/

    public void recuerdoTipo(String pTipo){
        pilaSemantica.push(new RS_Tipo(pTipo));
    }

    public void recuerdoAccess(String pAcces){
        if(pAcces != null){
            pilaSemantica.push(new RS_ACCESS(pAcces));
        }
    }

    public void recuerdoID(String pIdent){
        pilaSemantica.push(new RS_IDENT(pIdent));
    }

    public void insertarTablaSimbolos(){

        RS_IDENT id = (RS_IDENT)pilaSemantica.pop();
        RegistroSemantico sig = pilaSemantica.pop();
        SimboloVariable var = new SimboloVariable();
        if (sig.valueType == RegistroSemantico.Value.TIPO){
            RS_Tipo tipo = (RS_Tipo) sig;
            var.nombre = id.ident;
            var.tipoSimbolo = "variable";
            var.acceso = "public";
            var.tipoVariable = tipo.tipo;
        } else {
            RS_ACCESS acc = (RS_ACCESS) sig;
            RS_Tipo tipo = (RS_Tipo)pilaSemantica.pop();

            var.nombre = id.ident;
            var.tipoSimbolo = "variable";
            var.acceso = acc.access;
            var.tipoVariable = tipo.tipo;
        }
        //var.printDatos();
        // verificar si ya el id esta en la pila
        boolean estaEnTabla = false;
        for(Simbolo sim : tablaSimbolos){
            if(sim.nombre.equals(var.nombre)){
                // Variable ya esta definida dar error
                //System.out.println("Ya esta en la tabla");
                estaEnTabla = true;
            }
        }

        if(estaEnTabla){
            // Agregar el error donde corresponde
        } else {
            tablaSimbolos.push(var);
        }

    }
    public void insertarTablaSimbolosAsignacion(){

        RS_DO dop = (RS_DO)pilaSemantica.pop();
        RS_IDENT id = (RS_IDENT)pilaSemantica.pop();
        RegistroSemantico sig = pilaSemantica.pop();
        SimboloVariable var = new SimboloVariable();

        if (sig.valueType == RegistroSemantico.Value.TIPO){
            RS_Tipo tipo = (RS_Tipo) sig;
            var.nombre = id.ident;
            var.tipoSimbolo = "variable";
            var.acceso = "public";
            var.tipoVariable = tipo.tipo;
        } else {
            RS_ACCESS acc = (RS_ACCESS) sig;
            RS_Tipo tipo = (RS_Tipo)pilaSemantica.pop();

            var.nombre = id.ident;
            var.tipoSimbolo = "variable";
            var.acceso = acc.access;
            var.tipoVariable = tipo.tipo;
        }
        //var.printDatos();
        // verificar si ya el id esta en la pila
        boolean estaEnTabla = false;
        for(Simbolo sim : tablaSimbolos){
            if(sim.nombre.equals(var.nombre)){
                // Variable ya esta definida dar error
                //System.out.println("Ya esta en la tabla");
                estaEnTabla = true;
            }
        }

        if(estaEnTabla){
            // Agregar el error donde corresponde
        } else {
            tablaSimbolos.push(var);
        }

    }

    public void recuerdaConstante(String pConst, String pTipo){
        RS_DO dop = new RS_DO(pTipo, pConst);
        pilaSemantica.push(dop);
    }

    public void recuerdaVariable(String pConst){
        RS_DO dop = new RS_DO("variable", pConst);
        pilaSemantica.push(dop);
    }

    public void recuerdaOperador(String pOperador){
        RS_Operador op = new RS_Operador(pOperador);
        pilaSemantica.push(op);
    }

    public void evalBinary(){

        RS_DO do_uno = (RS_DO) pilaSemantica.pop();
        RS_Operador do_op = (RS_Operador) pilaSemantica.pop();
        // El RS siguiente se obtiene después para evitar problemas de tipo
        // en caso de que el operador se igual ya que a la izq del igual
        // viene un RS_IDENT y no un RS_DO

        if(do_op.operador.equals("=")){
            // verificar que el tipo concuerde en ambos lados
            RS_IDENT do_dos = (RS_IDENT) pilaSemantica.pop();



            // Generar un DO
            // hacer push del DO
        } else if(do_op.operador.equals("+")){
            // verificar que el tipo concuerde en ambos lados
            RS_DO do_dos = (RS_DO) pilaSemantica.pop();
            if(do_uno.tipo.equals("constante_numerico") & do_dos.tipo.equals("constante_numerico")){
                String resultado = String.valueOf(Integer.parseInt(do_uno.valor) + Integer.parseInt(do_dos.valor));
                RS_DO newDO = new RS_DO("constante_numerico", resultado);
                pilaSemantica.push(newDO);
            }
            else{
                // generar codigo asm de la operacion
                //Crear un registro DO
            }
            // Generar un DO
            // hacer push del DO
        } else if(do_op.operador.equals("-")){
            // verificar que el tipo concuerde en ambos lados
            RS_DO do_dos = (RS_DO) pilaSemantica.pop();
            if(do_uno.tipo.equals("constante_numerico") & do_dos.tipo.equals("constante_numerico")){
                String resultado = String.valueOf(Integer.parseInt(do_uno.valor) - Integer.parseInt(do_dos.valor));
                RS_DO newDO = new RS_DO("constante_numerico", resultado);
                pilaSemantica.push(newDO);
            }
            else{
                // generar codigo asm de la operacion
                //Crear un registro DO
            }
            // Generar un DO
            // hacer push del DO
        } else {
            // verificar que el tipo concuerde en ambos lados
            RS_DO do_dos = (RS_DO) pilaSemantica.pop();
            // Generar un DO
            // hacer push del DO
        }
    }

    public void startIf(){
        RS_IF new_IF = new RS_IF("Else_label:", "Exit_label:");
        pilaSemantica.push(new_IF);
    }

    public void testIf(){

    }

    public void startElse(){

    }

    public void endIf(){

    }

    public void startWhile(){

    }

    public void testWhile(){

    }

    public void endWhile(){

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= pragma solidity techo numero numero punto_coma contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_S ::= contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY_CONTRACT ::= EN BODY_CONTRACT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY_CONTRACT ::= BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY_CONTRACT_P ::= VAR_CONTRACT BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_CONTRACT_P ::= BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY_CONTRACT_PP ::= STRUCTURE BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BODY_CONTRACT_PP ::= BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY_CONTRACT_PPP ::= FUNC BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BODY_CONTRACT_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNC ::= functionSoli ident O_Parent_R TIPO ident FUNC_PARAM C_Parent_R FUNC_MOD FUNC_RETURNS O_Parent_L CUERPO_M returnSoli EXP punto_coma C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNC ::= functionSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNC_PARAM ::= coma TIPO ident FUNC_PARAM 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNC_PARAM ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNC_MOD ::= payableSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNC_MOD ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNC_MOD ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNC_MOD ::= internalSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNC_MOD ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNC_RETURNS ::= returns O_Parent_R TIPO ident C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNC_RETURNS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_M ::= CUERPO_MA CUERPO_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_MA ::= TIPO VAR_ARR VAR_ACCESS ident CUERPO_ASSIGN_F 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_MA",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_MA ::= CUERPO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_MA",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$0 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaVariable(id);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",93, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$1 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaOperador(op_ig);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO ::= ident NT$0 igual NT$1 CUERPO_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO ::= O_Parent_R FUNC_CALL_PARAMS punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO ::= STRU 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPO_P ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO_P ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO_ASSIGN_F ::= igual CUERPO_ASSIGN_FP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_F",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_ASSIGN_F ::= punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_F",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO_ASSIGN_FP ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_FP",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUERPO_ASSIGN_FP ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_FP",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STRUCTURE ::= structSoli ident O_Parent_L TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STRUCTURE ::= structSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STRUCTURE ::= structSoli ident error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STRUCTURE_VAR ::= TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STRUCTURE_VAR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STRU ::= STRU_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STRU ::= STRU_FOR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STRU ::= STRU_DO_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STRU ::= STRU_IF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$2 ::= 
            {
              String RESULT =null;
 startWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",95, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$3 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
 testWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",96, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STRU_WHILE ::= whileSoli NT$2 O_Parent_R OP_BOOL C_Parent_R NT$3 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		 endWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STRU_WHILE ::= whileSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STRU_FOR ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma F_EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_FOR",31, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STRU_DO_WHILE ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_DO_WHILE",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$4 ::= 
            {
              String RESULT =null;
 startIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",97, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$5 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
 testIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",98, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STRU_IF ::= ifSoli NT$4 O_Parent_R OP_BOOL C_Parent_R NT$5 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",34, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STRU_IF ::= ifSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",34, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$6 ::= 
            {
              String RESULT =null;
 startElse(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",99, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STRU_ELSE ::= elseSoli NT$6 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		 endIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",35, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STRU_ELSE ::= elseSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",35, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // STRU_ELSE ::= 
            {
              String RESULT =null;
		 endIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",35, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STRU_IF_LINE ::= O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STRU_IF_LINE ::= O_Parent_R error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STRU_IF_LINE ::= O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BODY_SENT_M ::= BODY_SENT BODY_SENT_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",30, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BODY_SENT_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",30, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$7 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaVariable(id);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",100, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BODY_SENT ::= ident NT$7 BODY_SENT_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BODY_SENT ::= thisSoli punto ident igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$8 ::= 
            {
              String RESULT =null;
 startWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",101, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$9 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
 testWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",102, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BODY_SENT ::= whileSoli NT$8 O_Parent_R OP_BOOL C_Parent_R NT$9 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		 endWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BODY_SENT ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma F_EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BODY_SENT ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BODY_SENT ::= STRU_IF_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BODY_SENT ::= returnSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BODY_SENT ::= breakSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BODY_SENT ::= continueSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BODY_SENT_P ::= punto ident BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BODY_SENT_P ::= BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BODY_SENT_PP ::= BODY_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BODY_SENT_PP ::= BODY_FUN_CALL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BODY_SENT_PP ::= igual O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$10 ::= 
            {
              String RESULT =null;
 startIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",103, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$11 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
 testIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",104, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // STRU_IF_ELSE_IN ::= ifSoli NT$10 O_Parent_R OP_BOOL C_Parent_R NT$11 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE_IN 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_ELSE_IN",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$12 ::= 
            {
              String RESULT =null;
 startElse(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",105, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // STRU_ELSE_IN ::= elseSoli NT$12 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		 endIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",40, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // STRU_ELSE_IN ::= 
            {
              String RESULT =null;
		 endIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",40, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$13 ::= 
            {
              String RESULT =null;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdaOperador(op_ig); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",106, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BODY_ASSIGN ::= igual NT$13 EXP punto_coma 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		evalBinary();
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_ASSIGN",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BODY_FUN_CALL ::= O_Parent_R FUNC_CALL_PARAMS C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_FUN_CALL",29, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FOR_VAR ::= ident igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FOR_VAR",32, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FUNC_CALL_PARAMS ::= FS_EXP FUNC_CALL_PARAMS_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FUNC_CALL_PARAMS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FUNC_CALL_PARAMS_P ::= coma FS_EXP FUNC_CALL_PARAMS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS_P",22, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FUNC_CALL_PARAMS_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS_P",22, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ASSIGN_NOT_VAR ::= EXP punto_coma 
            {
              String RESULT =null;
		 evalBinary(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGN_NOT_VAR",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EN ::= enumSoli ident O_Parent_L ident EN_IDENT C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EN ::= enumSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EN_IDENT ::= coma ident EN_IDENT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EN_IDENT ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$14 ::= 
            {
              String RESULT =null;
		int inputTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int inputTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String inputTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdoTipo(inputTipo); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",107, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$15 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int inputTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int inputTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String inputTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int inputAccessleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int inputAccessright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String inputAccess = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdoAccess(inputAccess); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",108, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$16 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int inputTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).left;
		int inputTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).right;
		String inputTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).value;
		int inputAccessleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int inputAccessright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String inputAccess = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdoID(b); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",109, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VAR_CONTRACT ::= TIPO NT$14 VAR_ARR VAR_ACCESS NT$15 ident NT$16 VAR_CONTRACT_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int inputTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).left;
		int inputTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).right;
		String inputTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).value;
		int inputAccessleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).left;
		int inputAccessright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).right;
		String inputAccess = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VAR_CONTRACT ::= TIPO error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VAR_CONTRACT_P ::= punto_coma 
            {
              String RESULT =null;
		 insertarTablaSimbolos(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VAR_CONTRACT_P ::= VAR_CONTRACT_C punto_coma 
            {
              String RESULT =null;
		 insertarTablaSimbolosAsignacion(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$17 ::= 
            {
              String RESULT =null;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaOperador(op_ig);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",110, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VAR_CONTRACT_C ::= igual NT$17 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		evalBinary();
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_C",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VAR_ARR ::= O_Parent_C C_Parent_C 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VAR_ARR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VAR_ACCESS ::= publicSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VAR_ACCESS ::= privateSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VAR_ACCESS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$18 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaVariable(id);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",111, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP ::= ident NT$18 EXP_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP ::= thisSoli EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP ::= BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP ::= ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= BOOL_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // BOOL_GATE ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // BOOL_GATE ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$19 ::= 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaConstante(num, "constante_numerico");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",112, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ARIT_GATE ::= numero NT$19 OP_ARIT_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_GATE",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ARIT_GATE ::= numero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		recuerdaConstante(num, "constante_numerico");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_GATE",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXP_P ::= punto ident EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXP_P ::= EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXP_P_S ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXP_P_S ::= OP_EXCL PARENT_S OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXP_P_S ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXP_P_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXP_PP ::= punto ident EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PP",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXP_PPP ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",51, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$20 ::= 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaOperador(op);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$20",113, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXP_PPP ::= OP_EXCL NT$20 PARENT_S OP_ARIT 
            {
              String RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",51, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXP_PPP ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",51, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",51, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FUNC_CALL_CASE ::= FS_EXP FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // FUNC_CALL_CASE ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // FUNC_CALL_CASE_P ::= coma FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // FUNC_CALL_CASE_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OP_ARIT ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$21 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaVariable(id);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$21",114, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OP_ARIT ::= ident NT$21 OP_ARIT_A 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OP_ARIT ::= thisSoli punto ident OP_ARIT_A 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OP_ARIT ::= numero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		recuerdaConstante(num, "constante_numerico"); evalBinary();
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OP_ARIT_A ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_A",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OP_ARIT_A ::= OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_A",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OP_ARIT_A ::= 
            {
              String RESULT =null;
		evalBinary();
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_A",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$22 ::= 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaOperador(op);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$22",115, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OP_ARIT_P ::= OP NT$22 PARENT_S OP_ARIT 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OP_ARIT_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // PARENT_S ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PARENT_S",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // PARENT_S ::= O_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PARENT_S",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // PARENT_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PARENT_S",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OP ::= mas 
            {
              String RESULT =null;
		int op_opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = op_op;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OP ::= menos 
            {
              String RESULT =null;
		int op_opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = op_op;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // OP_EXCL ::= mas 
            {
              String RESULT =null;
		int op_opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = op_op;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OP_EXCL ::= menos 
            {
              String RESULT =null;
		int op_opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = op_op;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // OP_EXCL ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // OP_EXCL ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // OP_EXCL ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // OP_EXCL ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OP_EXCL ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // OP_EXCL ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OP_EXCL ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OP_BOOL ::= NEGADO OP_BOOL_N 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OP_BOOL_N ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",76, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // OP_BOOL_N ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",76, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$23 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdaVariable(id); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$23",116, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // OP_BOOL_N ::= ident NT$23 OP_BOOL_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",76, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$24 ::= 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdaConstante(num, "constante_numerico"); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$24",117, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // OP_BOOL_N ::= numero NT$24 OP_BOOL_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",76, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // NT$25 ::= 
            {
              String RESULT =null;
		int op_bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdaOperador(op_b); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$25",118, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // OP_BOOL_P ::= OP_OP_BOOL NT$25 OP_BOOL 
            {
              String RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int op_bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int op_bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String op_b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // OP_BOOL_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // OP_OP_BOOL ::= igual_igual 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // OP_OP_BOOL ::= mayor_igual 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // OP_OP_BOOL ::= mayor 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // OP_OP_BOOL ::= menor_igual 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // OP_OP_BOOL ::= menor 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // OP_OP_BOOL ::= diferente 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // OP_OP_BOOL ::= op_or 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OP_OP_BOOL ::= op_and 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // NEGADO ::= negacion 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NEGADO",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // NEGADO ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NEGADO",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // F_EXP ::= ident F_EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // F_EXP ::= thisSoli F_EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // F_EXP ::= F_BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // F_EXP ::= F_ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // F_ARIT_GATE ::= numero F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_ARIT_GATE",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // F_EXP_P ::= punto ident F_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P",63, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // F_EXP_P ::= F_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P",63, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // F_EXP_P_S ::= O_Parent_R F_FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P_S",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // F_EXP_P_S ::= F_OP F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P_S",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // F_EXP_P_S ::= igual F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P_S",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // F_EXP_PP ::= punto ident F_EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PP",64, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // F_EXP_PPP ::= O_Parent_R F_FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PPP",71, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // F_EXP_PPP ::= F_OP F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PPP",71, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // F_EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PPP",71, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // F_FUNC_CALL_CASE ::= ident F_FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE",69, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // F_FUNC_CALL_CASE ::= thisSoli punto ident F_FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE",69, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // F_FUNC_CALL_CASE ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE",69, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // F_FUNC_CALL_CASE_P ::= coma F_FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE_P",72, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // F_FUNC_CALL_CASE_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE_P",72, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // F_OP_ARIT ::= numero F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT",70, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // F_OP_ARIT ::= ident F_OP_ARIT_Parent F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT",70, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // F_OP_ARIT ::= thisSoli punto ident F_OP_ARIT_Parent F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT",70, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // F_OP_ARIT_P ::= F_OP F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // F_OP_ARIT_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // F_OP_ARIT_Parent ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_Parent",73, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // F_OP_ARIT_Parent ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_Parent",73, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // F_OP ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // F_OP ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // F_OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // F_OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // F_OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // F_OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // F_OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // F_OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // F_OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // F_BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_BODY_LIT_TF",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // F_BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_BODY_LIT_TF",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // FS_EXP ::= ident FS_EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // FS_EXP ::= thisSoli FS_EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // FS_EXP ::= FS_BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // FS_EXP ::= FS_ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // FS_EXP ::= FS_BOOL_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // FS_BOOL_GATE ::= trueSoli FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_BOOL_GATE",85, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // FS_BOOL_GATE ::= falseSoli FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_BOOL_GATE",85, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // FS_ARIT_GATE ::= numero FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_ARIT_GATE",81, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // FS_EXP_P ::= punto ident FS_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // FS_EXP_P ::= FS_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // FS_EXP_P_S ::= O_Parent_R FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P_S",82, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // FS_EXP_P_S ::= FS_OP FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P_S",82, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // FS_EXP_P_S ::= FS_OP_OP_BOOL FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P_S",82, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // FS_EXP_P_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P_S",82, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // FS_EXP_PP ::= punto ident FS_EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PP",79, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // FS_EXP_PPP ::= O_Parent_R FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PPP",83, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // FS_EXP_PPP ::= FS_OP FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PPP",83, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // FS_EXP_PPP ::= FS_OP_OP_BOOL FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PPP",83, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // FS_EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PPP",83, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // FS_BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_BODY_LIT_TF",80, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // FS_BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_BODY_LIT_TF",80, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // FS_OP_BOOL ::= negacion FS_OP_BOOL_F 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // FS_OP_BOOL ::= FS_OP_BOOL_F 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // FS_OP_BOOL ::= trueSoli FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // FS_OP_BOOL ::= falseSoli FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // FS_OP_BOOL ::= numero FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // FS_OP_BOOL_F ::= ident PCLASS FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL_F",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // FS_OP_BOOL_F ::= thisSoli punto ident FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL_F",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // FS_OP_BOOL_P ::= FS_OP_OP_BOOL FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL_P",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // FS_OP_BOOL_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL_P",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // FS_OP_OP_BOOL ::= igual_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // FS_OP_OP_BOOL ::= mayor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // FS_OP_OP_BOOL ::= mayor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // FS_OP_OP_BOOL ::= menor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // FS_OP_OP_BOOL ::= menor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // FS_OP_OP_BOOL ::= diferente 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // FS_OP_OP_BOOL ::= op_or 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // FS_OP_OP_BOOL ::= op_and 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // FS_OP_OP_BOOL ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // FS_OP_OP_BOOL ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // FS_OP_OP_BOOL ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // FS_OP_OP_BOOL ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // FS_OP_OP_BOOL ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // FS_OP_OP_BOOL ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // FS_OP_OP_BOOL ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // FS_OP_OP_BOOL ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // FS_OP_OP_BOOL ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // PCLASS ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PCLASS",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // PCLASS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PCLASS",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // TIPO ::= bool 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // TIPO ::= byteSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // TIPO ::= bytes 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // TIPO ::= string 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // TIPO ::= uint 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // TIPO ::= uint_O 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // TIPO ::= uint_DS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // TIPO ::= uint_TD 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // TIPO ::= uint_SC 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // TIPO ::= uint_CVO 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // TIPO ::= uint_DCS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // TIPO ::= intSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // TIPO ::= int_O 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // TIPO ::= int_DS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // TIPO ::= int_TD 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // TIPO ::= int_SC 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000001(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // TIPO ::= int_CVO 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // TIPO ::= int_DCS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // TIPO ::= address 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // TIPO ::= address_payable 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // TIPO ::= charss 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // TIPO ::= ufixedSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // TIPO ::= B_I 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // TIPO ::= B_II 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // TIPO ::= B_III 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // TIPO ::= B_IV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // TIPO ::= B_V 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // TIPO ::= B_VI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // TIPO ::= B_VII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // TIPO ::= B_IIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // TIPO ::= B_IX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // TIPO ::= B_X 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // TIPO ::= B_XI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // TIPO ::= B_XII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // TIPO ::= B_XIII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // TIPO ::= B_XIV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // TIPO ::= B_XV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // TIPO ::= B_XVI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // TIPO ::= B_XVII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // TIPO ::= B_XIIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // TIPO ::= B_XIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // TIPO ::= B_XX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // TIPO ::= B_XXI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // TIPO ::= B_XXII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // TIPO ::= B_XXIII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // TIPO ::= B_XXIV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // TIPO ::= B_XXV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // TIPO ::= B_XXVI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // TIPO ::= B_XXVII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // TIPO ::= B_XXIIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // TIPO ::= B_XXIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // TIPO ::= B_XXX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // TIPO ::= B_XXXI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // TIPO ::= B_XXXII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$analisis_sintactico$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$analisis_sintactico$do_action_part00000001(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
