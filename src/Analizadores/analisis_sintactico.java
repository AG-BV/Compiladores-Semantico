
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symb.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u016a\000\002\002\004\000\002\141\002\000\002\002" +
    "\004\000\002\003\016\000\002\075\010\000\002\075\002" +
    "\000\002\004\004\000\002\004\003\000\002\005\004\000" +
    "\002\005\003\000\002\006\004\000\002\006\003\000\002" +
    "\007\004\000\002\007\002\000\002\142\002\000\002\143" +
    "\002\000\002\144\002\000\002\145\002\000\002\146\002" +
    "\000\002\012\024\000\002\012\005\000\002\147\002\000" +
    "\002\150\002\000\002\055\010\000\002\055\002\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\002\000\002\151\002\000\002\152\002" +
    "\000\002\057\011\000\002\057\002\000\002\153\002\000" +
    "\002\140\006\000\002\140\002\000\002\060\004\000\002" +
    "\060\002\000\002\076\007\000\002\076\003\000\002\154" +
    "\002\000\002\155\002\000\002\054\007\000\002\054\004" +
    "\000\002\054\005\000\002\054\003\000\002\063\003\000" +
    "\002\063\003\000\002\077\004\000\002\077\003\000\002" +
    "\100\003\000\002\100\003\000\002\050\014\000\002\050" +
    "\005\000\002\050\006\000\002\051\010\000\002\051\002" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\156\002\000\002\157\002\000\002" +
    "\160\002\000\002\034\015\000\002\034\005\000\002\042" +
    "\016\000\002\044\014\000\002\161\002\000\002\162\002" +
    "\000\002\163\002\000\002\045\016\000\002\045\005\000" +
    "\002\164\002\000\002\046\010\000\002\046\005\000\002" +
    "\046\002\000\002\047\012\000\002\047\005\000\002\047" +
    "\011\000\002\041\004\000\002\041\002\000\002\165\002" +
    "\000\002\035\005\000\002\035\010\000\002\166\002\000" +
    "\002\167\002\000\002\170\002\000\002\035\015\000\002" +
    "\035\016\000\002\035\014\000\002\035\003\000\002\035" +
    "\004\000\002\171\002\000\002\035\005\000\002\172\002" +
    "\000\002\035\005\000\002\037\005\000\002\037\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\013\000\002" +
    "\173\002\000\002\174\002\000\002\175\002\000\002\052" +
    "\016\000\002\176\002\000\002\053\010\000\002\053\002" +
    "\000\002\177\002\000\002\036\006\000\002\040\006\000" +
    "\002\043\005\000\002\030\004\000\002\030\002\000\002" +
    "\031\005\000\002\031\002\000\002\061\004\000\002\010" +
    "\010\000\002\010\005\000\002\013\005\000\002\013\002" +
    "\000\002\200\002\000\002\201\002\000\002\202\002\000" +
    "\002\017\012\000\002\017\005\000\002\033\003\000\002" +
    "\033\004\000\002\203\002\000\002\020\005\000\002\015" +
    "\004\000\002\015\002\000\002\016\003\000\002\016\003" +
    "\000\002\016\002\000\002\204\002\000\002\021\005\000" +
    "\002\021\004\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\070\004\000\002\070\004\000\002\205" +
    "\002\000\002\073\005\000\002\073\003\000\002\064\005" +
    "\000\002\064\003\000\002\074\004\000\002\206\002\000" +
    "\002\074\006\000\002\074\004\000\002\074\002\000\002" +
    "\065\005\000\002\066\004\000\002\207\002\000\002\066" +
    "\006\000\002\066\004\000\002\066\002\000\002\071\004" +
    "\000\002\071\003\000\002\072\004\000\002\072\003\000" +
    "\002\210\002\000\002\022\005\000\002\211\002\000\002" +
    "\022\005\000\002\022\006\000\002\022\003\000\002\135" +
    "\004\000\002\135\003\000\002\135\002\000\002\212\002" +
    "\000\002\026\006\000\002\026\003\000\002\134\003\000" +
    "\002\134\003\000\002\134\002\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\024\004\000\002\213\002\000\002\117\005" +
    "\000\002\214\002\000\002\117\005\000\002\215\002\000" +
    "\002\117\005\000\002\216\002\000\002\117\005\000\002" +
    "\217\002\000\002\027\005\000\002\027\002\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\116\003\000\002\116\002\000\002" +
    "\032\003\000\002\032\003\000\002\101\004\000\002\101" +
    "\004\000\002\101\003\000\002\101\003\000\002\105\004" +
    "\000\002\102\005\000\002\102\003\000\002\107\004\000" +
    "\002\107\004\000\002\107\004\000\002\103\005\000\002" +
    "\112\004\000\002\112\004\000\002\112\002\000\002\110" +
    "\004\000\002\110\006\000\002\110\003\000\002\113\004" +
    "\000\002\113\003\000\002\111\004\000\002\111\005\000" +
    "\002\111\007\000\002\106\004\000\002\106\002\000\002" +
    "\114\004\000\002\114\002\000\002\115\003\000\002\115" +
    "\003\000\002\115\003\000\002\115\003\000\002\115\003" +
    "\000\002\115\003\000\002\115\003\000\002\115\003\000" +
    "\002\115\003\000\002\104\003\000\002\104\003\000\002" +
    "\120\004\000\002\120\004\000\002\120\003\000\002\120" +
    "\003\000\002\120\003\000\002\130\004\000\002\130\004" +
    "\000\002\124\004\000\002\121\005\000\002\121\003\000" +
    "\002\125\004\000\002\125\004\000\002\125\004\000\002" +
    "\125\002\000\002\122\005\000\002\126\004\000\002\126" +
    "\004\000\002\126\004\000\002\126\002\000\002\123\003" +
    "\000\002\123\003\000\002\133\004\000\002\133\003\000" +
    "\002\133\004\000\002\133\004\000\002\133\004\000\002" +
    "\136\005\000\002\136\006\000\002\131\004\000\002\131" +
    "\002\000\002\132\003\000\002\132\003\000\002\132\003" +
    "\000\002\132\003\000\002\132\003\000\002\132\003\000" +
    "\002\132\003\000\002\132\003\000\002\132\003\000\002" +
    "\132\003\000\002\132\003\000\002\132\003\000\002\132" +
    "\003\000\002\132\003\000\002\132\003\000\002\132\003" +
    "\000\002\132\003\000\002\137\004\000\002\137\002\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u026f\000\004\004\000\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\005\011\001\002\000\004\002\uffff\001\002\000" +
    "\004\006\012\001\002\000\004\120\013\001\002\000\004" +
    "\120\014\001\002\000\004\013\015\001\002\000\004\007" +
    "\016\001\002\000\004\117\017\001\002\000\004\010\020" +
    "\001\002\000\166\011\ufff4\012\075\015\022\016\024\017" +
    "\040\020\106\021\065\022\120\023\113\024\036\025\107" +
    "\026\110\027\032\030\033\031\077\032\067\033\117\034" +
    "\076\035\101\036\112\037\070\107\105\110\056\114\064" +
    "\115\042\116\114\123\072\124\063\125\115\126\050\127" +
    "\060\130\043\131\051\132\103\133\047\134\054\135\073" +
    "\136\034\137\030\140\021\141\061\142\116\143\074\144" +
    "\121\145\122\146\057\147\044\150\052\151\035\152\041" +
    "\153\027\154\031\155\102\156\023\157\037\160\026\161" +
    "\062\162\055\001\002\000\014\003\ufeaa\040\ufeaa\042\ufeaa" +
    "\043\ufeaa\117\ufeaa\001\002\000\014\003\ufecd\040\ufecd\042" +
    "\ufecd\043\ufecd\117\ufecd\001\002\000\014\003\ufe9c\040\ufe9c" +
    "\042\ufe9c\043\ufe9c\117\ufe9c\001\002\000\014\003\ufecc\040" +
    "\ufecc\042\ufecc\043\ufecc\117\ufecc\001\002\000\014\003\u0263" +
    "\040\uff86\042\uff86\043\uff86\117\uff86\001\002\000\014\003" +
    "\ufe9a\040\ufe9a\042\ufe9a\043\ufe9a\117\ufe9a\001\002\000\014" +
    "\003\ufe9f\040\ufe9f\042\ufe9f\043\ufe9f\117\ufe9f\001\002\000" +
    "\014\003\ufeab\040\ufeab\042\ufeab\043\ufeab\117\ufeab\001\002" +
    "\000\014\003\ufe9e\040\ufe9e\042\ufe9e\043\ufe9e\117\ufe9e\001" +
    "\002\000\014\003\ufec2\040\ufec2\042\ufec2\043\ufec2\117\ufec2" +
    "\001\002\000\014\003\ufec1\040\ufec1\042\ufec1\043\ufec1\117" +
    "\ufec1\001\002\000\014\003\ufeac\040\ufeac\042\ufeac\043\ufeac" +
    "\117\ufeac\001\002\000\014\003\ufea1\040\ufea1\042\ufea1\043" +
    "\ufea1\117\ufea1\001\002\000\014\003\ufec5\040\ufec5\042\ufec5" +
    "\043\ufec5\117\ufec5\001\002\000\014\003\ufe9b\040\ufe9b\042" +
    "\ufe9b\043\ufe9b\117\ufe9b\001\002\000\014\003\ufecb\040\ufecb" +
    "\042\ufecb\043\ufecb\117\ufecb\001\002\000\014\003\ufea0\040" +
    "\ufea0\042\ufea0\043\ufea0\117\ufea0\001\002\000\014\003\ufeca" +
    "\040\ufeca\042\ufeca\043\ufeca\117\ufeca\001\002\000\014\003" +
    "\ufeb2\040\ufeb2\042\ufeb2\043\ufeb2\117\ufeb2\001\002\000\014" +
    "\003\ufea3\040\ufea3\042\ufea3\043\ufea3\117\ufea3\001\002\000" +
    "\164\011\ufff4\015\022\016\024\017\040\020\106\021\065" +
    "\022\120\023\113\024\036\025\107\026\110\027\032\030" +
    "\033\031\077\032\067\033\117\034\076\035\101\036\112" +
    "\037\070\107\105\110\056\114\064\115\042\116\114\123" +
    "\072\124\063\125\115\126\050\127\060\130\043\131\051" +
    "\132\103\133\047\134\054\135\073\136\034\137\030\140" +
    "\021\141\061\142\116\143\074\144\121\145\122\146\057" +
    "\147\044\150\052\151\035\152\041\153\027\154\031\155" +
    "\102\156\023\157\037\160\026\161\062\162\055\001\002" +
    "\000\004\011\ufff8\001\002\000\014\003\ufeaf\040\ufeaf\042" +
    "\ufeaf\043\ufeaf\117\ufeaf\001\002\000\014\003\ufeb4\040\ufeb4" +
    "\042\ufeb4\043\ufeb4\117\ufeb4\001\002\000\014\003\ufeb1\040" +
    "\ufeb1\042\ufeb1\043\ufeb1\117\ufeb1\001\002\000\014\003\ufea2" +
    "\040\ufea2\042\ufea2\043\ufea2\117\ufea2\001\002\000\004\011" +
    "\ufffa\001\002\000\014\003\ufeae\040\ufeae\042\ufeae\043\ufeae" +
    "\117\ufeae\001\002\000\014\003\ufe98\040\ufe98\042\ufe98\043" +
    "\ufe98\117\ufe98\001\002\000\006\003\200\117\ufff3\001\002" +
    "\000\014\003\ufea4\040\ufea4\042\ufea4\043\ufea4\117\ufea4\001" +
    "\002\000\014\003\ufeb3\040\ufeb3\042\ufeb3\043\ufeb3\117\ufeb3" +
    "\001\002\000\014\003\ufea9\040\ufea9\042\ufea9\043\ufea9\117" +
    "\ufea9\001\002\000\014\003\ufe99\040\ufe99\042\ufe99\043\ufe99" +
    "\117\ufe99\001\002\000\014\003\ufeb6\040\ufeb6\042\ufeb6\043" +
    "\ufeb6\117\ufeb6\001\002\000\014\003\ufeb9\040\ufeb9\042\ufeb9" +
    "\043\ufeb9\117\ufeb9\001\002\000\014\003\ufec8\040\ufec8\042" +
    "\ufec8\043\ufec8\117\ufec8\001\002\000\004\011\167\001\002" +
    "\000\014\003\ufebf\040\ufebf\042\ufebf\043\ufebf\117\ufebf\001" +
    "\002\000\014\003\ufeba\040\ufeba\042\ufeba\043\ufeba\117\ufeba" +
    "\001\002\000\004\011\ufff6\001\002\000\014\003\ufeb7\040" +
    "\ufeb7\042\ufeb7\043\ufeb7\117\ufeb7\001\002\000\014\003\ufead" +
    "\040\ufead\042\ufead\043\ufead\117\ufead\001\002\000\014\003" +
    "\ufea7\040\ufea7\042\ufea7\043\ufea7\117\ufea7\001\002\000\006" +
    "\003\155\117\156\001\002\000\014\003\ufebd\040\ufebd\042" +
    "\ufebd\043\ufebd\117\ufebd\001\002\000\014\003\ufec0\040\ufec0" +
    "\042\ufec0\043\ufec0\117\ufec0\001\002\000\166\011\ufff4\012" +
    "\075\015\022\016\024\017\040\020\106\021\065\022\120" +
    "\023\113\024\036\025\107\026\110\027\032\030\033\031" +
    "\077\032\067\033\117\034\076\035\101\036\112\037\070" +
    "\107\105\110\056\114\064\115\042\116\114\123\072\124" +
    "\063\125\115\126\050\127\060\130\043\131\051\132\103" +
    "\133\047\134\054\135\073\136\034\137\030\140\021\141" +
    "\061\142\116\143\074\144\121\145\122\146\057\147\044" +
    "\150\052\151\035\152\041\153\027\154\031\155\102\156" +
    "\023\157\037\160\026\161\062\162\055\001\002\000\014" +
    "\003\ufebc\040\ufebc\042\ufebc\043\ufebc\117\ufebc\001\002\000" +
    "\014\003\ufe9d\040\ufe9d\042\ufe9d\043\ufe9d\117\ufe9d\001\002" +
    "\000\014\003\ufeb0\040\ufeb0\042\ufeb0\043\ufeb0\117\ufeb0\001" +
    "\002\000\006\011\ufff4\110\056\001\002\000\006\003\124" +
    "\117\125\001\002\000\014\003\ufec9\040\ufec9\042\ufec9\043" +
    "\ufec9\117\ufec9\001\002\000\014\003\ufec4\040\ufec4\042\ufec4" +
    "\043\ufec4\117\ufec4\001\002\000\014\003\ufec3\040\ufec3\042" +
    "\ufec3\043\ufec3\117\ufec3\001\002\000\010\011\ufff4\107\105" +
    "\110\056\001\002\000\014\003\ufebb\040\ufebb\042\ufebb\043" +
    "\ufebb\117\ufebb\001\002\000\014\003\ufec6\040\ufec6\042\ufec6" +
    "\043\ufec6\117\ufec6\001\002\000\014\003\ufeb8\040\ufeb8\042" +
    "\ufeb8\043\ufeb8\117\ufeb8\001\002\000\014\003\ufeb5\040\ufeb5" +
    "\042\ufeb5\043\ufeb5\117\ufeb5\001\002\000\014\003\ufea8\040" +
    "\ufea8\042\ufea8\043\ufea8\117\ufea8\001\002\000\014\003\ufebe" +
    "\040\ufebe\042\ufebe\043\ufebe\117\ufebe\001\002\000\014\003" +
    "\ufec7\040\ufec7\042\ufec7\043\ufec7\117\ufec7\001\002\000\014" +
    "\003\ufea6\040\ufea6\042\ufea6\043\ufea6\117\ufea6\001\002\000" +
    "\014\003\ufea5\040\ufea5\042\ufea5\043\ufea5\117\ufea5\001\002" +
    "\000\004\011\ufff7\001\002\000\004\011\152\001\002\000" +
    "\006\003\127\010\126\001\002\000\156\015\022\016\024" +
    "\017\040\020\106\021\065\022\120\023\113\024\036\025" +
    "\107\026\110\027\032\030\033\031\077\032\067\033\117" +
    "\034\076\035\101\036\112\037\070\114\064\115\042\116" +
    "\114\123\072\124\063\125\115\126\050\127\060\130\043" +
    "\131\051\132\103\133\047\134\054\135\073\136\034\137" +
    "\030\140\021\141\061\142\116\143\074\144\121\145\122" +
    "\146\057\147\044\150\052\151\035\152\041\153\027\154" +
    "\031\155\102\156\023\157\037\160\026\161\062\162\055" +
    "\001\002\000\004\011\130\001\002\000\010\011\uffca\107" +
    "\uffca\110\uffca\001\002\000\012\040\132\042\uff7c\043\uff7c" +
    "\117\uff7c\001\002\000\004\041\151\001\002\000\010\042" +
    "\134\043\135\117\uff79\001\002\000\004\117\uff7b\001\002" +
    "\000\004\117\uff7a\001\002\000\004\117\137\001\002\000" +
    "\004\013\140\001\002\000\160\011\uffc8\015\022\016\024" +
    "\017\040\020\106\021\065\022\120\023\113\024\036\025" +
    "\107\026\110\027\032\030\033\031\077\032\067\033\117" +
    "\034\076\035\101\036\112\037\070\114\064\115\042\116" +
    "\114\123\072\124\063\125\115\126\050\127\060\130\043" +
    "\131\051\132\103\133\047\134\054\135\073\136\034\137" +
    "\030\140\021\141\061\142\116\143\074\144\121\145\122" +
    "\146\057\147\044\150\052\151\035\152\041\153\027\154" +
    "\031\155\102\156\023\157\037\160\026\161\062\162\055" +
    "\001\002\000\012\040\132\042\uff7c\043\uff7c\117\uff7c\001" +
    "\002\000\004\011\143\001\002\000\010\011\uffcc\107\uffcc" +
    "\110\uffcc\001\002\000\010\042\134\043\135\117\uff79\001" +
    "\002\000\004\117\146\001\002\000\004\013\147\001\002" +
    "\000\160\011\uffc8\015\022\016\024\017\040\020\106\021" +
    "\065\022\120\023\113\024\036\025\107\026\110\027\032" +
    "\030\033\031\077\032\067\033\117\034\076\035\101\036" +
    "\112\037\070\114\064\115\042\116\114\123\072\124\063" +
    "\125\115\126\050\127\060\130\043\131\051\132\103\133" +
    "\047\134\054\135\073\136\034\137\030\140\021\141\061" +
    "\142\116\143\074\144\121\145\122\146\057\147\044\150" +
    "\052\151\035\152\041\153\027\154\031\155\102\156\023" +
    "\157\037\160\026\161\062\162\055\001\002\000\004\011" +
    "\uffc9\001\002\000\010\042\uff7d\043\uff7d\117\uff7d\001\002" +
    "\000\010\011\uffcb\107\uffcb\110\uffcb\001\002\000\004\011" +
    "\ufff5\001\002\000\004\011\ufffb\001\002\000\004\011\166" +
    "\001\002\000\004\010\157\001\002\000\004\117\160\001" +
    "\002\000\006\011\uff87\014\161\001\002\000\004\117\164" +
    "\001\002\000\004\011\163\001\002\000\166\011\uff8a\012" +
    "\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a" +
    "\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031" +
    "\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a" +
    "\107\uff8a\110\uff8a\114\uff8a\115\uff8a\116\uff8a\123\uff8a\124" +
    "\uff8a\125\uff8a\126\uff8a\127\uff8a\130\uff8a\131\uff8a\132\uff8a" +
    "\133\uff8a\134\uff8a\135\uff8a\136\uff8a\137\uff8a\140\uff8a\141" +
    "\uff8a\142\uff8a\143\uff8a\144\uff8a\145\uff8a\146\uff8a\147\uff8a" +
    "\150\uff8a\151\uff8a\152\uff8a\153\uff8a\154\uff8a\155\uff8a\156" +
    "\uff8a\157\uff8a\160\uff8a\161\uff8a\162\uff8a\001\002\000\006" +
    "\011\uff87\014\161\001\002\000\004\011\uff88\001\002\000" +
    "\166\011\uff89\012\uff89\015\uff89\016\uff89\017\uff89\020\uff89" +
    "\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027" +
    "\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89" +
    "\036\uff89\037\uff89\107\uff89\110\uff89\114\uff89\115\uff89\116" +
    "\uff89\123\uff89\124\uff89\125\uff89\126\uff89\127\uff89\130\uff89" +
    "\131\uff89\132\uff89\133\uff89\134\uff89\135\uff89\136\uff89\137" +
    "\uff89\140\uff89\141\uff89\142\uff89\143\uff89\144\uff89\145\uff89" +
    "\146\uff89\147\uff89\150\uff89\151\uff89\152\uff89\153\uff89\154" +
    "\uff89\155\uff89\156\uff89\157\uff89\160\uff89\161\uff89\162\uff89" +
    "\001\002\000\006\002\ufffc\007\171\001\002\000\004\002" +
    "\ufffe\001\002\000\004\117\172\001\002\000\004\010\173" +
    "\001\002\000\166\011\ufff4\012\075\015\022\016\024\017" +
    "\040\020\106\021\065\022\120\023\113\024\036\025\107" +
    "\026\110\027\032\030\033\031\077\032\067\033\117\034" +
    "\076\035\101\036\112\037\070\107\105\110\056\114\064" +
    "\115\042\116\114\123\072\124\063\125\115\126\050\127" +
    "\060\130\043\131\051\132\103\133\047\134\054\135\073" +
    "\136\034\137\030\140\021\141\061\142\116\143\074\144" +
    "\121\145\122\146\057\147\044\150\052\151\035\152\041" +
    "\153\027\154\031\155\102\156\023\157\037\160\026\161" +
    "\062\162\055\001\002\000\004\011\175\001\002\000\006" +
    "\002\ufffc\007\171\001\002\000\004\002\ufffd\001\002\000" +
    "\004\117\202\001\002\000\004\011\201\001\002\000\006" +
    "\011\uffed\110\uffed\001\002\000\004\064\ufff2\001\002\000" +
    "\004\064\204\001\002\000\156\015\022\016\024\017\040" +
    "\020\106\021\065\022\120\023\113\024\036\025\107\026" +
    "\110\027\032\030\033\031\077\032\067\033\117\034\076" +
    "\035\101\036\112\037\070\114\064\115\042\116\114\123" +
    "\072\124\063\125\115\126\050\127\060\130\043\131\051" +
    "\132\103\133\047\134\054\135\073\136\034\137\030\140" +
    "\021\141\061\142\116\143\074\144\121\145\122\146\057" +
    "\147\044\150\052\151\035\152\041\153\027\154\031\155" +
    "\102\156\023\157\037\160\026\161\062\162\055\001\002" +
    "\000\004\117\ufff1\001\002\000\004\117\207\001\002\000" +
    "\006\014\ufff0\065\ufff0\001\002\000\006\014\211\065\uffe9" +
    "\001\002\000\156\015\022\016\024\017\040\020\106\021" +
    "\065\022\120\023\113\024\036\025\107\026\110\027\032" +
    "\030\033\031\077\032\067\033\117\034\076\035\101\036" +
    "\112\037\070\114\064\115\042\116\114\123\072\124\063" +
    "\125\115\126\050\127\060\130\043\131\051\132\103\133" +
    "\047\134\054\135\073\136\034\137\030\140\021\141\061" +
    "\142\116\143\074\144\121\145\122\146\057\147\044\150" +
    "\052\151\035\152\041\153\027\154\031\155\102\156\023" +
    "\157\037\160\026\161\062\162\055\001\002\000\004\065" +
    "\213\001\002\000\016\010\uffe4\042\214\043\216\111\220" +
    "\112\217\113\uffe4\001\002\000\006\010\uffe6\113\uffe6\001" +
    "\002\000\006\010\uffef\113\uffef\001\002\000\006\010\uffe7" +
    "\113\uffe7\001\002\000\006\010\uffe5\113\uffe5\001\002\000" +
    "\006\010\uffe8\113\uffe8\001\002\000\006\010\uffe0\113\223" +
    "\001\002\000\004\010\232\001\002\000\004\064\224\001" +
    "\002\000\156\015\022\016\024\017\040\020\106\021\065" +
    "\022\120\023\113\024\036\025\107\026\110\027\032\030" +
    "\033\031\077\032\067\033\117\034\076\035\101\036\112" +
    "\037\070\114\064\115\042\116\114\123\072\124\063\125" +
    "\115\126\050\127\060\130\043\131\051\132\103\133\047" +
    "\134\054\135\073\136\034\137\030\140\021\141\061\142" +
    "\116\143\074\144\121\145\122\146\057\147\044\150\052" +
    "\151\035\152\041\153\027\154\031\155\102\156\023\157" +
    "\037\160\026\161\062\162\055\001\002\000\004\117\uffe3" +
    "\001\002\000\004\117\227\001\002\000\004\065\uffe2\001" +
    "\002\000\004\065\231\001\002\000\004\010\uffe1\001\002" +
    "\000\212\011\uffdb\015\022\016\024\017\040\020\106\021" +
    "\065\022\120\023\113\024\036\025\107\026\110\027\032" +
    "\030\033\031\077\032\067\033\117\034\076\035\101\036" +
    "\112\037\070\045\250\046\241\064\244\074\261\075\262" +
    "\076\uffdb\101\237\102\242\103\256\114\064\115\042\116" +
    "\114\117\234\120\254\121\240\122\263\123\072\124\063" +
    "\125\115\126\050\127\060\130\043\131\051\132\103\133" +
    "\047\134\054\135\073\136\034\137\030\140\021\141\061" +
    "\142\116\143\074\144\121\145\122\146\057\147\044\150" +
    "\052\151\035\152\041\153\027\154\031\155\102\156\023" +
    "\157\037\160\026\161\062\162\055\001\002\000\004\013" +
    "\u025c\001\002\000\054\013\uff78\044\uffd8\047\uff78\050\uff78" +
    "\051\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78\060" +
    "\uff78\061\uff78\062\uff78\063\uff78\064\uff78\066\uff78\067\uff78" +
    "\070\uff78\071\uff78\072\uff78\073\uff78\001\002\000\006\011" +
    "\uffdd\076\u0251\001\002\000\212\011\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\037\uffc5\045\uffc5\046\uffc5\064" +
    "\uffc5\074\uffc5\075\uffc5\076\uffc5\101\uffc5\102\uffc5\103\uffc5" +
    "\114\uffc5\115\uffc5\116\uffc5\117\uffc5\120\uffc5\121\uffc5\122" +
    "\uffc5\123\uffc5\124\uffc5\125\uffc5\126\uffc5\127\uffc5\130\uffc5" +
    "\131\uffc5\132\uffc5\133\uffc5\134\uffc5\135\uffc5\136\uffc5\137" +
    "\uffc5\140\uffc5\141\uffc5\142\uffc5\143\uffc5\144\uffc5\145\uffc5" +
    "\146\uffc5\147\uffc5\150\uffc5\151\uffc5\152\uffc5\153\uffc5\154" +
    "\uffc5\155\uffc5\156\uffc5\157\uffc5\160\uffc5\161\uffc5\162\uffc5" +
    "\001\002\000\004\064\u0245\001\002\000\010\003\uff25\013" +
    "\uff25\106\uff25\001\002\000\030\003\uff30\013\uff30\047\306" +
    "\050\307\051\310\052\304\053\303\054\305\055\301\056" +
    "\311\106\uff30\001\002\000\004\010\u023b\001\002\000\212" +
    "\011\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\045\uffd9\046\uffd9\064\uffd9\074\uffd9\075\uffd9\076\uffd9" +
    "\101\uffd9\102\uffd9\103\uffd9\114\uffd9\115\uffd9\116\uffd9\117" +
    "\uffd9\120\uffd9\121\uffd9\122\uffd9\123\uffd9\124\uffd9\125\uffd9" +
    "\126\uffd9\127\uffd9\130\uffd9\131\uffd9\132\uffd9\133\uffd9\134" +
    "\uffd9\135\uffd9\136\uffd9\137\uffd9\140\uffd9\141\uffd9\142\uffd9" +
    "\143\uffd9\144\uffd9\145\uffd9\146\uffd9\147\uffd9\150\uffd9\151" +
    "\uffd9\152\uffd9\153\uffd9\154\uffd9\155\uffd9\156\uffd9\157\uffd9" +
    "\160\uffd9\161\uffd9\162\uffd9\001\002\000\022\013\uff8e\045" +
    "\u0144\046\u0143\074\u0140\117\u0145\120\u0147\121\u0146\122\u013f" +
    "\001\002\000\010\003\uff73\013\uff73\106\uff73\001\002\000" +
    "\012\040\132\042\uff7c\043\uff7c\117\uff7c\001\002\000\212" +
    "\011\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\045\uffc6\046\uffc6\064\uffc6\074\uffc6\075\uffc6\076\uffc6" +
    "\101\uffc6\102\uffc6\103\uffc6\114\uffc6\115\uffc6\116\uffc6\117" +
    "\uffc6\120\uffc6\121\uffc6\122\uffc6\123\uffc6\124\uffc6\125\uffc6" +
    "\126\uffc6\127\uffc6\130\uffc6\131\uffc6\132\uffc6\133\uffc6\134" +
    "\uffc6\135\uffc6\136\uffc6\137\uffc6\140\uffc6\141\uffc6\142\uffc6" +
    "\143\uffc6\144\uffc6\145\uffc6\146\uffc6\147\uffc6\150\uffc6\151" +
    "\uffc6\152\uffc6\153\uffc6\154\uffc6\155\uffc6\156\uffc6\157\uffc6" +
    "\160\uffc6\161\uffc6\162\uffc6\001\002\000\030\003\uff30\013" +
    "\uff30\047\306\050\307\051\310\052\304\053\303\054\305" +
    "\055\301\056\311\106\uff30\001\002\000\010\003\uff75\013" +
    "\uff75\106\uff75\001\002\000\212\011\uffdb\015\022\016\024" +
    "\017\040\020\106\021\065\022\120\023\113\024\036\025" +
    "\107\026\110\027\032\030\033\031\077\032\067\033\117" +
    "\034\076\035\101\036\112\037\070\045\250\046\241\064" +
    "\244\074\261\075\262\076\uffdb\101\237\102\242\103\256" +
    "\114\064\115\042\116\114\117\234\120\254\121\240\122" +
    "\263\123\072\124\063\125\115\126\050\127\060\130\043" +
    "\131\051\132\103\133\047\134\054\135\073\136\034\137" +
    "\030\140\021\141\061\142\116\143\074\144\121\145\122" +
    "\146\057\147\044\150\052\151\035\152\041\153\027\154" +
    "\031\155\102\156\023\157\037\160\026\161\062\162\055" +
    "\001\002\000\010\003\uff74\013\uff74\106\uff74\001\002\000" +
    "\034\003\uff6e\013\uff6e\060\uff70\061\uff70\062\uff70\063\uff70" +
    "\065\uff70\066\uff70\067\uff70\070\uff70\071\uff70\072\uff70\106" +
    "\uff6e\001\002\000\212\011\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\045\uffc7\046\uffc7\064\uffc7\074" +
    "\uffc7\075\uffc7\076\uffc7\101\uffc7\102\uffc7\103\uffc7\114\uffc7" +
    "\115\uffc7\116\uffc7\117\uffc7\120\uffc7\121\uffc7\122\uffc7\123" +
    "\uffc7\124\uffc7\125\uffc7\126\uffc7\127\uffc7\130\uffc7\131\uffc7" +
    "\132\uffc7\133\uffc7\134\uffc7\135\uffc7\136\uffc7\137\uffc7\140" +
    "\uffc7\141\uffc7\142\uffc7\143\uffc7\144\uffc7\145\uffc7\146\uffc7" +
    "\147\uffc7\150\uffc7\151\uffc7\152\uffc7\153\uffc7\154\uffc7\155" +
    "\uffc7\156\uffc7\157\uffc7\160\uffc7\161\uffc7\162\uffc7\001\002" +
    "\000\006\003\u0209\064\uffbc\001\002\000\212\011\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\045\uffd3" +
    "\046\uffd3\064\uffd3\074\uffd3\075\uffd3\076\uffd3\101\uffd3\102" +
    "\uffd3\103\uffd3\114\uffd3\115\uffd3\116\uffd3\117\uffd3\120\uffd3" +
    "\121\uffd3\122\uffd3\123\uffd3\124\uffd3\125\uffd3\126\uffd3\127" +
    "\uffd3\130\uffd3\131\uffd3\132\uffd3\133\uffd3\134\uffd3\135\uffd3" +
    "\136\uffd3\137\uffd3\140\uffd3\141\uffd3\142\uffd3\143\uffd3\144" +
    "\uffd3\145\uffd3\146\uffd3\147\uffd3\150\uffd3\151\uffd3\152\uffd3" +
    "\153\uffd3\154\uffd3\155\uffd3\156\uffd3\157\uffd3\160\uffd3\161" +
    "\uffd3\162\uffd3\001\002\000\212\011\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\045\uffc4\046\uffc4\064" +
    "\uffc4\074\uffc4\075\uffc4\076\uffc4\101\uffc4\102\uffc4\103\uffc4" +
    "\114\uffc4\115\uffc4\116\uffc4\117\uffc4\120\uffc4\121\uffc4\122" +
    "\uffc4\123\uffc4\124\uffc4\125\uffc4\126\uffc4\127\uffc4\130\uffc4" +
    "\131\uffc4\132\uffc4\133\uffc4\134\uffc4\135\uffc4\136\uffc4\137" +
    "\uffc4\140\uffc4\141\uffc4\142\uffc4\143\uffc4\144\uffc4\145\uffc4" +
    "\146\uffc4\147\uffc4\150\uffc4\151\uffc4\152\uffc4\153\uffc4\154" +
    "\uffc4\155\uffc4\156\uffc4\157\uffc4\160\uffc4\161\uffc4\162\uffc4" +
    "\001\002\000\004\073\u01fd\001\002\000\006\003\264\064" +
    "\uffc3\001\002\000\010\003\uff24\013\uff24\106\uff24\001\002" +
    "\000\004\011\u01fc\001\002\000\004\064\266\001\002\000" +
    "\014\045\uff26\046\uff26\057\271\117\uff26\120\uff26\001\002" +
    "\000\004\065\uffc2\001\002\000\012\045\276\046\272\117" +
    "\274\120\273\001\002\000\012\045\uff27\046\uff27\117\uff27" +
    "\120\uff27\001\002\000\032\003\uff38\013\uff38\047\uff38\050" +
    "\uff38\051\uff38\052\uff38\053\uff38\054\uff38\055\uff38\056\uff38" +
    "\065\uff38\106\uff38\001\002\000\032\003\uff34\013\uff34\047" +
    "\uff34\050\uff34\051\uff34\052\uff34\053\uff34\054\uff34\055\uff34" +
    "\056\uff34\065\uff34\106\uff34\001\002\000\032\003\uff36\013" +
    "\uff36\047\uff36\050\uff36\051\uff36\052\uff36\053\uff36\054\uff36" +
    "\055\uff36\056\uff36\065\uff36\106\uff36\001\002\000\012\003" +
    "\uff3b\013\uff3b\065\uff3b\106\uff3b\001\002\000\032\003\uff3a" +
    "\013\uff3a\047\uff3a\050\uff3a\051\uff3a\052\uff3a\053\uff3a\054" +
    "\uff3a\055\uff3a\056\uff3a\065\uff3a\106\uff3a\001\002\000\032" +
    "\003\uff30\013\uff30\047\306\050\307\051\310\052\304\053" +
    "\303\054\305\055\301\056\311\065\uff30\106\uff30\001\002" +
    "\000\012\003\uff39\013\uff39\065\uff39\106\uff39\001\002\000" +
    "\014\045\uff29\046\uff29\057\uff29\117\uff29\120\uff29\001\002" +
    "\000\014\045\uff32\046\uff32\057\uff32\117\uff32\120\uff32\001" +
    "\002\000\014\045\uff2b\046\uff2b\057\uff2b\117\uff2b\120\uff2b" +
    "\001\002\000\014\045\uff2c\046\uff2c\057\uff2c\117\uff2c\120" +
    "\uff2c\001\002\000\014\045\uff2a\046\uff2a\057\uff2a\117\uff2a" +
    "\120\uff2a\001\002\000\014\045\uff2f\046\uff2f\057\uff2f\117" +
    "\uff2f\120\uff2f\001\002\000\014\045\uff2e\046\uff2e\057\uff2e" +
    "\117\uff2e\120\uff2e\001\002\000\014\045\uff2d\046\uff2d\057" +
    "\uff2d\117\uff2d\120\uff2d\001\002\000\014\045\uff28\046\uff28" +
    "\057\uff28\117\uff28\120\uff28\001\002\000\014\045\uff26\046" +
    "\uff26\057\271\117\uff26\120\uff26\001\002\000\012\003\uff31" +
    "\013\uff31\065\uff31\106\uff31\001\002\000\032\003\uff30\013" +
    "\uff30\047\306\050\307\051\310\052\304\053\303\054\305" +
    "\055\301\056\311\065\uff30\106\uff30\001\002\000\012\003" +
    "\uff35\013\uff35\065\uff35\106\uff35\001\002\000\032\003\uff30" +
    "\013\uff30\047\306\050\307\051\310\052\304\053\303\054" +
    "\305\055\301\056\311\065\uff30\106\uff30\001\002\000\012" +
    "\003\uff33\013\uff33\065\uff33\106\uff33\001\002\000\032\003" +
    "\uff30\013\uff30\047\306\050\307\051\310\052\304\053\303" +
    "\054\305\055\301\056\311\065\uff30\106\uff30\001\002\000" +
    "\012\003\uff37\013\uff37\065\uff37\106\uff37\001\002\000\004" +
    "\065\323\001\002\000\004\010\uffc1\001\002\000\004\010" +
    "\325\001\002\000\024\074\326\075\333\076\340\077\334" +
    "\100\327\101\337\102\331\103\335\117\332\001\002\000" +
    "\004\073\u01f7\001\002\000\004\013\uffa1\001\002\000\026" +
    "\011\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5\101" +
    "\uffa5\102\uffa5\103\uffa5\117\uffa5\001\002\000\004\010\u01ec" +
    "\001\002\000\010\044\uffae\064\uffae\073\uffae\001\002\000" +
    "\004\064\uffab\001\002\000\004\013\uffa3\001\002\000\004" +
    "\064\uff9a\001\002\000\026\011\uffaf\074\326\075\333\076" +
    "\340\077\334\100\327\101\337\102\331\103\335\117\332" +
    "\001\002\000\004\064\342\001\002\000\004\013\341\001" +
    "\002\000\026\011\uffa4\074\uffa4\075\uffa4\076\uffa4\077\uffa4" +
    "\100\uffa4\101\uffa4\102\uffa4\103\uffa4\117\uffa4\001\002\000" +
    "\004\117\343\001\002\000\004\044\u012c\001\002\000\004" +
    "\013\345\001\002\000\014\045\uff26\046\uff26\057\271\117" +
    "\uff26\120\uff26\001\002\000\004\013\347\001\002\000\014" +
    "\074\350\117\354\120\351\121\357\122\356\001\002\000" +
    "\004\073\u0124\001\002\000\026\060\u0103\061\375\062\371" +
    "\063\u0102\065\uff0c\066\373\067\372\070\367\071\u0100\072" +
    "\u0101\001\002\000\004\065\uff20\001\002\000\004\065\uff21" +
    "\001\002\000\032\044\u0105\060\u0103\061\375\062\371\063" +
    "\u0102\064\u0104\066\373\067\372\070\367\071\u0100\072\u0101" +
    "\073\376\001\002\000\004\065\360\001\002\000\004\065" +
    "\ufeff\001\002\000\004\065\uff00\001\002\000\004\010\361" +
    "\001\002\000\024\074\326\075\333\076\340\077\334\100" +
    "\327\101\337\102\331\103\335\117\332\001\002\000\026" +
    "\011\uffaf\074\326\075\333\076\340\077\334\100\327\101" +
    "\337\102\331\103\335\117\332\001\002\000\026\011\uffaf" +
    "\074\326\075\333\076\340\077\334\100\327\101\337\102" +
    "\331\103\335\117\332\001\002\000\004\011\365\001\002" +
    "\000\026\011\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100" +
    "\uffa7\101\uffa7\102\uffa7\103\uffa7\117\uffa7\001\002\000\004" +
    "\011\uffb0\001\002\000\010\074\uff03\117\uff03\120\uff03\001" +
    "\002\000\004\065\uff23\001\002\000\010\074\uff07\117\uff07" +
    "\120\uff07\001\002\000\010\074\uff04\117\uff04\120\uff04\001" +
    "\002\000\010\074\uff05\117\uff05\120\uff05\001\002\000\010" +
    "\074\u0106\117\u0109\120\u0107\001\002\000\010\074\uff08\117" +
    "\uff08\120\uff08\001\002\000\004\117\u0120\001\002\000\004" +
    "\065\uff1d\001\002\000\010\074\uff02\117\uff02\120\uff02\001" +
    "\002\000\010\074\uff01\117\uff01\120\uff01\001\002\000\010" +
    "\074\uff06\117\uff06\120\uff06\001\002\000\010\074\uff09\117" +
    "\uff09\120\uff09\001\002\000\010\065\u0118\074\u0116\117\u0117" +
    "\001\002\000\010\074\u0106\117\u0109\120\u0107\001\002\000" +
    "\004\073\u0111\001\002\000\026\060\u0103\061\375\062\371" +
    "\063\u0102\065\uff0c\066\373\067\372\070\367\071\u0100\072" +
    "\u0101\001\002\000\004\065\uff1a\001\002\000\030\060\uff0a" +
    "\061\uff0a\062\uff0a\063\uff0a\065\uff0a\066\uff0a\067\uff0a\070" +
    "\uff0a\071\uff0a\072\uff0a\073\u010a\001\002\000\004\117\u010f" +
    "\001\002\000\026\060\u0103\061\375\062\371\063\u0102\065" +
    "\uff0c\066\373\067\372\070\367\071\u0100\072\u0101\001\002" +
    "\000\010\074\u0106\117\u0109\120\u0107\001\002\000\004\065" +
    "\uff0f\001\002\000\004\065\uff0d\001\002\000\026\060\uff0b" +
    "\061\uff0b\062\uff0b\063\uff0b\065\uff0b\066\uff0b\067\uff0b\070" +
    "\uff0b\071\uff0b\072\uff0b\001\002\000\004\065\uff10\001\002" +
    "\000\004\117\u0112\001\002\000\030\060\uff0a\061\uff0a\062" +
    "\uff0a\063\uff0a\065\uff0a\066\uff0a\067\uff0a\070\uff0a\071\uff0a" +
    "\072\uff0a\073\u010a\001\002\000\026\060\u0103\061\375\062" +
    "\371\063\u0102\065\uff0c\066\373\067\372\070\367\071\u0100" +
    "\072\u0101\001\002\000\004\065\uff0e\001\002\000\004\065" +
    "\uff1c\001\002\000\004\073\u011d\001\002\000\006\014\u0119" +
    "\065\u011b\001\002\000\004\065\uff13\001\002\000\010\065" +
    "\u0118\074\u0116\117\u0117\001\002\000\004\065\uff15\001\002" +
    "\000\004\065\uff11\001\002\000\004\065\uff12\001\002\000" +
    "\004\117\u011e\001\002\000\006\014\u0119\065\u011b\001\002" +
    "\000\004\065\uff14\001\002\000\030\044\u0105\060\u0103\061" +
    "\375\062\371\063\u0102\064\u0104\066\373\067\372\070\367" +
    "\071\u0100\072\u0101\001\002\000\004\065\uff1e\001\002\000" +
    "\004\065\uff1b\001\002\000\004\065\uff1f\001\002\000\004" +
    "\117\u0126\001\002\000\004\065\uff22\001\002\000\030\060" +
    "\u0103\061\375\062\371\063\u0102\064\u0129\065\uff16\066\373" +
    "\067\372\070\367\071\u0100\072\u0101\001\002\000\010\074" +
    "\u0106\117\u0109\120\u0107\001\002\000\004\065\uff19\001\002" +
    "\000\010\065\u0118\074\u0116\117\u0117\001\002\000\004\065" +
    "\uff18\001\002\000\004\065\uff17\001\002\000\020\045\250" +
    "\046\241\074\261\117\u012d\120\254\121\240\122\263\001" +
    "\002\000\056\003\uff78\013\uff78\047\uff78\050\uff78\051\uff78" +
    "\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78\060\uff78\061" +
    "\uff78\062\uff78\063\uff78\064\uff78\066\uff78\067\uff78\070\uff78" +
    "\071\uff78\072\uff78\073\uff78\106\uff78\001\002\000\004\013" +
    "\uff90\001\002\000\056\003\uff67\013\uff67\047\306\050\307" +
    "\051\310\052\304\053\303\054\305\055\301\056\311\060" +
    "\u013e\061\u0136\062\u0139\063\u0132\064\u013d\066\u0133\067\u013c" +
    "\070\u0134\071\u0130\072\u0138\073\u0137\106\uff67\001\002\000" +
    "\014\064\uff3d\065\uff3d\074\uff3d\117\uff3d\120\uff3d\001\002" +
    "\000\014\045\uff26\046\uff26\057\271\117\uff26\120\uff26\001" +
    "\002\000\014\064\uff41\065\uff41\074\uff41\117\uff41\120\uff41" +
    "\001\002\000\014\064\uff40\065\uff40\074\uff40\117\uff40\120" +
    "\uff40\001\002\000\014\064\uff3e\065\uff3e\074\uff3e\117\uff3e" +
    "\120\uff3e\001\002\000\014\064\uff6a\065\uff6a\074\uff6a\117" +
    "\uff6a\120\uff6a\001\002\000\014\064\uff43\065\uff43\074\uff43" +
    "\117\uff43\120\uff43\001\002\000\004\117\u018d\001\002\000" +
    "\014\064\uff3c\065\uff3c\074\uff3c\117\uff3c\120\uff3c\001\002" +
    "\000\014\064\uff42\065\uff42\074\uff42\117\uff42\120\uff42\001" +
    "\002\000\010\003\uff77\013\uff77\106\uff77\001\002\000\010" +
    "\003\uff6c\013\uff6c\106\uff6c\001\002\000\014\064\uff3f\065" +
    "\uff3f\074\uff3f\117\uff3f\120\uff3f\001\002\000\022\045\u0144" +
    "\046\u0143\065\u014b\074\u0140\117\u0145\120\u0147\121\u0146\122" +
    "\u013f\001\002\000\014\064\uff44\065\uff44\074\uff44\117\uff44" +
    "\120\uff44\001\002\000\026\013\ufeea\014\ufeea\045\ufeea\046" +
    "\ufeea\065\ufeea\074\ufeea\117\ufeea\120\ufeea\121\ufeea\122\ufeea" +
    "\001\002\000\004\073\u0183\001\002\000\006\014\u017f\065" +
    "\u0180\001\002\000\026\013\ufefb\014\ufefb\045\ufefb\046\ufefb" +
    "\065\ufefb\074\ufefb\117\ufefb\120\ufefb\121\ufefb\122\ufefb\001" +
    "\002\000\070\013\ufee1\014\ufee1\045\ufee1\046\ufee1\047\u0150" +
    "\050\u014c\051\u015e\052\u0155\053\u0157\054\u015d\055\u014e\056" +
    "\u015b\060\u015c\061\u0156\062\u0158\063\u0151\065\ufee1\066\u0152" +
    "\067\u015a\070\u0153\071\u014d\072\u0159\074\ufee1\117\ufee1\120" +
    "\ufee1\121\ufee1\122\ufee1\001\002\000\070\013\ufee1\014\ufee1" +
    "\045\ufee1\046\ufee1\047\u0150\050\u014c\051\u015e\052\u0155\053" +
    "\u0157\054\u015d\055\u014e\056\u015b\060\u015c\061\u0156\062\u0158" +
    "\063\u0151\065\ufee1\066\u0152\067\u015a\070\u0153\071\u014d\072" +
    "\u0159\074\ufee1\117\ufee1\120\ufee1\121\ufee1\122\ufee1\001\002" +
    "\000\074\013\ufef1\014\ufef1\045\ufef1\046\ufef1\047\u0150\050" +
    "\u014c\051\u015e\052\u0155\053\u0157\054\u015d\055\u014e\056\u015b" +
    "\060\u015c\061\u0156\062\u0158\063\u0151\064\u0177\065\ufef1\066" +
    "\u0152\067\u015a\070\u0153\071\u014d\072\u0159\073\u0176\074\ufef1" +
    "\117\ufef1\120\ufef1\121\ufef1\122\ufef1\001\002\000\026\013" +
    "\ufeeb\014\ufeeb\045\ufeeb\046\ufeeb\065\ufeeb\074\ufeeb\117\ufeeb" +
    "\120\ufeeb\121\ufeeb\122\ufeeb\001\002\000\070\013\ufee1\014" +
    "\ufee1\045\ufee1\046\ufee1\047\u0150\050\u014c\051\u015e\052\u0155" +
    "\053\u0157\054\u015d\055\u014e\056\u015b\060\u015c\061\u0156\062" +
    "\u0158\063\u0151\065\ufee1\066\u0152\067\u015a\070\u0153\071\u014d" +
    "\072\u0159\074\ufee1\117\ufee1\120\ufee1\121\ufee1\122\ufee1\001" +
    "\002\000\026\013\ufefc\014\ufefc\045\ufefc\046\ufefc\065\ufefc" +
    "\074\ufefc\117\ufefc\120\ufefc\121\ufefc\122\ufefc\001\002\000" +
    "\026\013\ufefa\014\ufefa\045\ufefa\046\ufefa\065\ufefa\074\ufefa" +
    "\117\ufefa\120\ufefa\121\ufefa\122\ufefa\001\002\000\010\003" +
    "\uff6b\013\uff6b\106\uff6b\001\002\000\010\003\uff5f\013\uff5f" +
    "\106\uff5f\001\002\000\016\045\ufedf\046\ufedf\057\ufedf\074" +
    "\ufedf\117\ufedf\120\ufedf\001\002\000\016\045\ufed1\046\ufed1" +
    "\057\ufed1\074\ufed1\117\ufed1\120\ufed1\001\002\000\016\045" +
    "\ufeda\046\ufeda\057\ufeda\074\ufeda\117\ufeda\120\ufeda\001\002" +
    "\000\026\013\ufef7\014\ufef7\045\ufef7\046\ufef7\065\ufef7\074" +
    "\ufef7\117\ufef7\120\ufef7\121\ufef7\122\ufef7\001\002\000\016" +
    "\045\ufee0\046\ufee0\057\ufee0\074\ufee0\117\ufee0\120\ufee0\001" +
    "\002\000\016\045\ufed5\046\ufed5\057\ufed5\074\ufed5\117\ufed5" +
    "\120\ufed5\001\002\000\016\045\ufed4\046\ufed4\057\ufed4\074" +
    "\ufed4\117\ufed4\120\ufed4\001\002\000\016\045\ufed2\046\ufed2" +
    "\057\ufed2\074\ufed2\117\ufed2\120\ufed2\001\002\000\016\045" +
    "\u0166\046\u015f\057\u0164\074\u0160\117\u0163\120\u0161\001\002" +
    "\000\016\045\ufedd\046\ufedd\057\ufedd\074\ufedd\117\ufedd\120" +
    "\ufedd\001\002\000\016\045\ufed7\046\ufed7\057\ufed7\074\ufed7" +
    "\117\ufed7\120\ufed7\001\002\000\016\045\ufedc\046\ufedc\057" +
    "\ufedc\074\ufedc\117\ufedc\120\ufedc\001\002\000\016\045\ufed6" +
    "\046\ufed6\057\ufed6\074\ufed6\117\ufed6\120\ufed6\001\002\000" +
    "\016\045\ufed0\046\ufed0\057\ufed0\074\ufed0\117\ufed0\120\ufed0" +
    "\001\002\000\016\045\ufed3\046\ufed3\057\ufed3\074\ufed3\117" +
    "\ufed3\120\ufed3\001\002\000\016\045\ufed9\046\ufed9\057\ufed9" +
    "\074\ufed9\117\ufed9\120\ufed9\001\002\000\016\045\ufed8\046" +
    "\ufed8\057\ufed8\074\ufed8\117\ufed8\120\ufed8\001\002\000\016" +
    "\045\ufedb\046\ufedb\057\ufedb\074\ufedb\117\ufedb\120\ufedb\001" +
    "\002\000\016\045\ufede\046\ufede\057\ufede\074\ufede\117\ufede" +
    "\120\ufede\001\002\000\070\013\ufee1\014\ufee1\045\ufee1\046" +
    "\ufee1\047\u0150\050\u014c\051\u015e\052\u0155\053\u0157\054\u015d" +
    "\055\u014e\056\u015b\060\u015c\061\u0156\062\u0158\063\u0151\065" +
    "\ufee1\066\u0152\067\u015a\070\u0153\071\u014d\072\u0159\074\ufee1" +
    "\117\ufee1\120\ufee1\121\ufee1\122\ufee1\001\002\000\004\073" +
    "\u016e\001\002\000\070\013\ufee1\014\ufee1\045\ufee1\046\ufee1" +
    "\047\u0150\050\u014c\051\u015e\052\u0155\053\u0157\054\u015d\055" +
    "\u014e\056\u015b\060\u015c\061\u0156\062\u0158\063\u0151\065\ufee1" +
    "\066\u0152\067\u015a\070\u0153\071\u014d\072\u0159\074\ufee1\117" +
    "\ufee1\120\ufee1\121\ufee1\122\ufee1\001\002\000\026\013\ufee2" +
    "\014\ufee2\045\ufee2\046\ufee2\065\ufee2\074\ufee2\117\ufee2\120" +
    "\ufee2\121\ufee2\122\ufee2\001\002\000\072\013\ufece\014\ufece" +
    "\045\ufece\046\ufece\047\ufece\050\ufece\051\ufece\052\ufece\053" +
    "\ufece\054\ufece\055\ufece\056\ufece\060\ufece\061\ufece\062\ufece" +
    "\063\ufece\065\ufece\066\ufece\067\ufece\070\ufece\071\ufece\072" +
    "\ufece\073\u0169\074\ufece\117\ufece\120\ufece\121\ufece\122\ufece" +
    "\001\002\000\006\074\u0160\117\u0163\001\002\000\026\013" +
    "\ufee8\014\ufee8\045\ufee8\046\ufee8\065\ufee8\074\ufee8\117\ufee8" +
    "\120\ufee8\121\ufee8\122\ufee8\001\002\000\070\013\ufee1\014" +
    "\ufee1\045\ufee1\046\ufee1\047\u0150\050\u014c\051\u015e\052\u0155" +
    "\053\u0157\054\u015d\055\u014e\056\u015b\060\u015c\061\u0156\062" +
    "\u0158\063\u0151\065\ufee1\066\u0152\067\u015a\070\u0153\071\u014d" +
    "\072\u0159\074\ufee1\117\ufee1\120\ufee1\121\ufee1\122\ufee1\001" +
    "\002\000\026\013\ufee7\014\ufee7\045\ufee7\046\ufee7\065\ufee7" +
    "\074\ufee7\117\ufee7\120\ufee7\121\ufee7\122\ufee7\001\002\000" +
    "\026\013\ufee9\014\ufee9\045\ufee9\046\ufee9\065\ufee9\074\ufee9" +
    "\117\ufee9\120\ufee9\121\ufee9\122\ufee9\001\002\000\004\117" +
    "\u016c\001\002\000\070\013\ufee1\014\ufee1\045\ufee1\046\ufee1" +
    "\047\u0150\050\u014c\051\u015e\052\u0155\053\u0157\054\u015d\055" +
    "\u014e\056\u015b\060\u015c\061\u0156\062\u0158\063\u0151\065\ufee1" +
    "\066\u0152\067\u015a\070\u0153\071\u014d\072\u0159\074\ufee1\117" +
    "\ufee1\120\ufee1\121\ufee1\122\ufee1\001\002\000\026\013\ufee4" +
    "\014\ufee4\045\ufee4\046\ufee4\065\ufee4\074\ufee4\117\ufee4\120" +
    "\ufee4\121\ufee4\122\ufee4\001\002\000\070\013\ufecf\014\ufecf" +
    "\045\ufecf\046\ufecf\047\ufecf\050\ufecf\051\ufecf\052\ufecf\053" +
    "\ufecf\054\ufecf\055\ufecf\056\ufecf\060\ufecf\061\ufecf\062\ufecf" +
    "\063\ufecf\065\ufecf\066\ufecf\067\ufecf\070\ufecf\071\ufecf\072" +
    "\ufecf\074\ufecf\117\ufecf\120\ufecf\121\ufecf\122\ufecf\001\002" +
    "\000\026\013\ufee5\014\ufee5\045\ufee5\046\ufee5\065\ufee5\074" +
    "\ufee5\117\ufee5\120\ufee5\121\ufee5\122\ufee5\001\002\000\004" +
    "\117\u016f\001\002\000\070\013\ufee1\014\ufee1\045\ufee1\046" +
    "\ufee1\047\u0150\050\u014c\051\u015e\052\u0155\053\u0157\054\u015d" +
    "\055\u014e\056\u015b\060\u015c\061\u0156\062\u0158\063\u0151\065" +
    "\ufee1\066\u0152\067\u015a\070\u0153\071\u014d\072\u0159\074\ufee1" +
    "\117\ufee1\120\ufee1\121\ufee1\122\ufee1\001\002\000\026\013" +
    "\ufee3\014\ufee3\045\ufee3\046\ufee3\065\ufee3\074\ufee3\117\ufee3" +
    "\120\ufee3\121\ufee3\122\ufee3\001\002\000\026\013\ufee6\014" +
    "\ufee6\045\ufee6\046\ufee6\065\ufee6\074\ufee6\117\ufee6\120\ufee6" +
    "\121\ufee6\122\ufee6\001\002\000\026\013\ufef5\014\ufef5\045" +
    "\ufef5\046\ufef5\065\ufef5\074\ufef5\117\ufef5\120\ufef5\121\ufef5" +
    "\122\ufef5\001\002\000\026\013\ufefe\014\ufefe\045\ufefe\046" +
    "\ufefe\065\ufefe\074\ufefe\117\ufefe\120\ufefe\121\ufefe\122\ufefe" +
    "\001\002\000\016\045\u0166\046\u015f\057\u0164\074\u0160\117" +
    "\u0163\120\u0161\001\002\000\016\045\u0166\046\u015f\057\u0164" +
    "\074\u0160\117\u0163\120\u0161\001\002\000\004\117\u0179\001" +
    "\002\000\016\045\u0166\046\u015f\057\u0164\074\u0160\117\u0163" +
    "\120\u0161\001\002\000\026\013\ufef4\014\ufef4\045\ufef4\046" +
    "\ufef4\065\ufef4\074\ufef4\117\ufef4\120\ufef4\121\ufef4\122\ufef4" +
    "\001\002\000\072\013\ufef1\014\ufef1\045\ufef1\046\ufef1\047" +
    "\u0150\050\u014c\051\u015e\052\u0155\053\u0157\054\u015d\055\u014e" +
    "\056\u015b\060\u015c\061\u0156\062\u0158\063\u0151\064\u0177\065" +
    "\ufef1\066\u0152\067\u015a\070\u0153\071\u014d\072\u0159\074\ufef1" +
    "\117\ufef1\120\ufef1\121\ufef1\122\ufef1\001\002\000\026\013" +
    "\ufef6\014\ufef6\045\ufef6\046\ufef6\065\ufef6\074\ufef6\117\ufef6" +
    "\120\ufef6\121\ufef6\122\ufef6\001\002\000\026\013\ufef2\014" +
    "\ufef2\045\ufef2\046\ufef2\065\ufef2\074\ufef2\117\ufef2\120\ufef2" +
    "\121\ufef2\122\ufef2\001\002\000\026\013\ufef3\014\ufef3\045" +
    "\ufef3\046\ufef3\065\ufef3\074\ufef3\117\ufef3\120\ufef3\121\ufef3" +
    "\122\ufef3\001\002\000\026\013\ufef9\014\ufef9\045\ufef9\046" +
    "\ufef9\065\ufef9\074\ufef9\117\ufef9\120\ufef9\121\ufef9\122\ufef9" +
    "\001\002\000\026\013\ufef8\014\ufef8\045\ufef8\046\ufef8\065" +
    "\ufef8\074\ufef8\117\ufef8\120\ufef8\121\ufef8\122\ufef8\001\002" +
    "\000\022\045\u0144\046\u0143\065\u014b\074\u0140\117\u0145\120" +
    "\u0147\121\u0146\122\u013f\001\002\000\010\003\uff5d\013\uff5d" +
    "\106\uff5d\001\002\000\010\003\uff60\013\uff60\106\uff60\001" +
    "\002\000\010\003\uff5e\013\uff5e\106\uff5e\001\002\000\004" +
    "\117\u0185\001\002\000\026\013\ufefd\014\ufefd\045\ufefd\046" +
    "\ufefd\065\ufefd\074\ufefd\117\ufefd\120\ufefd\121\ufefd\122\ufefd" +
    "\001\002\000\072\013\ufeec\014\ufeec\045\ufeec\046\ufeec\047" +
    "\u0150\050\u014c\051\u015e\052\u0155\053\u0157\054\u015d\055\u014e" +
    "\056\u015b\060\u015c\061\u0156\062\u0158\063\u0151\064\u0189\065" +
    "\ufeec\066\u0152\067\u015a\070\u0153\071\u014d\072\u0159\074\ufeec" +
    "\117\ufeec\120\ufeec\121\ufeec\122\ufeec\001\002\000\026\013" +
    "\ufef0\014\ufef0\045\ufef0\046\ufef0\065\ufef0\074\ufef0\117\ufef0" +
    "\120\ufef0\121\ufef0\122\ufef0\001\002\000\016\045\u0166\046" +
    "\u015f\057\u0164\074\u0160\117\u0163\120\u0161\001\002\000\016" +
    "\045\u0166\046\u015f\057\u0164\074\u0160\117\u0163\120\u0161\001" +
    "\002\000\016\045\u0166\046\u015f\057\u0164\074\u0160\117\u0163" +
    "\120\u0161\001\002\000\026\013\ufeef\014\ufeef\045\ufeef\046" +
    "\ufeef\065\ufeef\074\ufeef\117\ufeef\120\ufeef\121\ufeef\122\ufeef" +
    "\001\002\000\026\013\ufeed\014\ufeed\045\ufeed\046\ufeed\065" +
    "\ufeed\074\ufeed\117\ufeed\120\ufeed\121\ufeed\122\ufeed\001\002" +
    "\000\026\013\ufeee\014\ufeee\045\ufeee\046\ufeee\065\ufeee\074" +
    "\ufeee\117\ufeee\120\ufeee\121\ufeee\122\ufeee\001\002\000\054" +
    "\003\uff67\013\uff67\047\306\050\307\051\310\052\304\053" +
    "\303\054\305\055\301\056\311\060\u013e\061\u0136\062\u0139" +
    "\063\u0132\064\u013d\066\u0133\067\u013c\070\u0134\071\u0130\072" +
    "\u0138\106\uff67\001\002\000\010\003\uff6d\013\uff6d\106\uff6d" +
    "\001\002\000\014\064\u0191\065\u0192\074\uff4e\117\uff4e\120" +
    "\uff4e\001\002\000\010\074\u0193\117\u0195\120\u0194\001\002" +
    "\000\010\074\uff4f\117\uff4f\120\uff4f\001\002\000\010\074" +
    "\uff50\117\uff50\120\uff50\001\002\000\004\073\u01ac\001\002" +
    "\000\034\003\uff57\013\uff57\060\uff5c\061\uff5c\062\uff5c\063" +
    "\uff5c\065\uff5c\066\uff5c\067\uff5c\070\uff5c\071\uff5c\072\uff5c" +
    "\106\uff57\001\002\000\036\003\uff5a\013\uff5a\060\uff5a\061" +
    "\uff5a\062\uff5a\063\uff5a\064\uff5a\065\uff5a\066\uff5a\067\uff5a" +
    "\070\uff5a\071\uff5a\072\uff5a\106\uff5a\001\002\000\010\003" +
    "\uff69\013\uff69\106\uff69\001\002\000\036\003\uff54\013\uff54" +
    "\060\u01a4\061\u019e\062\u019a\063\u01a2\064\u01a3\065\u01a5\066" +
    "\u019c\067\u019b\070\u0198\071\u019f\072\u01a0\106\uff54\001\002" +
    "\000\014\064\uff47\065\uff47\074\uff47\117\uff47\120\uff47\001" +
    "\002\000\014\064\uff53\065\uff53\074\uff53\117\uff53\120\uff53" +
    "\001\002\000\014\064\uff4b\065\uff4b\074\uff4b\117\uff4b\120" +
    "\uff4b\001\002\000\014\064\uff48\065\uff48\074\uff48\117\uff48" +
    "\120\uff48\001\002\000\014\064\uff49\065\uff49\074\uff49\117" +
    "\uff49\120\uff49\001\002\000\010\003\uff59\013\uff59\106\uff59" +
    "\001\002\000\014\064\uff4c\065\uff4c\074\uff4c\117\uff4c\120" +
    "\uff4c\001\002\000\014\064\uff46\065\uff46\074\uff46\117\uff46" +
    "\120\uff46\001\002\000\014\064\uff45\065\uff45\074\uff45\117" +
    "\uff45\120\uff45\001\002\000\010\003\uff55\013\uff55\106\uff55" +
    "\001\002\000\014\064\uff4a\065\uff4a\074\uff4a\117\uff4a\120" +
    "\uff4a\001\002\000\022\045\u0144\046\u0143\065\u014b\074\u0140" +
    "\117\u0145\120\u0147\121\u0146\122\u013f\001\002\000\014\064" +
    "\uff4d\065\uff4d\074\uff4d\117\uff4d\120\uff4d\001\002\000\010" +
    "\003\uff51\013\uff51\106\uff51\001\002\000\010\003\uff56\013" +
    "\uff56\106\uff56\001\002\000\014\064\u0191\065\u0192\074\uff4e" +
    "\117\uff4e\120\uff4e\001\002\000\010\074\u0193\117\u0195\120" +
    "\u0194\001\002\000\010\003\uff52\013\uff52\106\uff52\001\002" +
    "\000\026\060\u01a4\061\u019e\062\u019a\063\u01a2\065\u01a5\066" +
    "\u019c\067\u019b\070\u0198\071\u019f\072\u01a0\001\002\000\010" +
    "\003\uff5b\013\uff5b\106\uff5b\001\002\000\004\117\u01ad\001" +
    "\002\000\036\003\uff54\013\uff54\060\u01a4\061\u019e\062\u019a" +
    "\063\u01a2\064\u01a3\065\u01a5\066\u019c\067\u019b\070\u0198\071" +
    "\u019f\072\u01a0\106\uff54\001\002\000\010\003\uff58\013\uff58" +
    "\106\uff58\001\002\000\010\003\uff68\013\uff68\106\uff68\001" +
    "\002\000\004\011\u01b1\001\002\000\212\011\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\045\uffc0\046" +
    "\uffc0\064\uffc0\074\uffc0\075\uffc0\076\uffc0\101\uffc0\102\uffc0" +
    "\103\uffc0\114\uffc0\115\uffc0\116\uffc0\117\uffc0\120\uffc0\121" +
    "\uffc0\122\uffc0\123\uffc0\124\uffc0\125\uffc0\126\uffc0\127\uffc0" +
    "\130\uffc0\131\uffc0\132\uffc0\133\uffc0\134\uffc0\135\uffc0\136" +
    "\uffc0\137\uffc0\140\uffc0\141\uffc0\142\uffc0\143\uffc0\144\uffc0" +
    "\145\uffc0\146\uffc0\147\uffc0\150\uffc0\151\uffc0\152\uffc0\153" +
    "\uffc0\154\uffc0\155\uffc0\156\uffc0\157\uffc0\160\uffc0\161\uffc0" +
    "\162\uffc0\001\002\000\004\064\u01b3\001\002\000\014\045" +
    "\uff26\046\uff26\057\271\117\uff26\120\uff26\001\002\000\004" +
    "\065\uff99\001\002\000\004\065\u01b6\001\002\000\004\010" +
    "\uff98\001\002\000\004\010\u01b8\001\002\000\024\074\326" +
    "\075\333\076\340\077\334\100\327\101\337\102\331\103" +
    "\335\117\332\001\002\000\026\011\uffaf\074\326\075\333" +
    "\076\340\077\334\100\327\101\337\102\331\103\335\117" +
    "\332\001\002\000\004\011\u01bb\001\002\000\030\011\uff94" +
    "\074\uff94\075\uff94\076\uff94\077\uff94\100\uff94\101\uff94\102" +
    "\uff94\103\uff94\104\u01bd\117\uff94\001\002\000\026\011\uff97" +
    "\074\uff97\075\uff97\076\uff97\077\uff97\100\uff97\101\uff97\102" +
    "\uff97\103\uff97\117\uff97\001\002\000\004\010\uff96\001\002" +
    "\000\004\010\u01bf\001\002\000\024\074\326\075\333\076" +
    "\340\077\334\100\327\101\337\102\331\103\335\117\332" +
    "\001\002\000\026\011\uffaf\074\326\075\333\076\340\077" +
    "\334\100\327\101\337\102\331\103\335\117\332\001\002" +
    "\000\004\011\u01c2\001\002\000\026\011\uff95\074\uff95\075" +
    "\uff95\076\uff95\077\uff95\100\uff95\101\uff95\102\uff95\103\uff95" +
    "\117\uff95\001\002\000\004\013\u01c4\001\002\000\026\011" +
    "\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2\101\uffa2" +
    "\102\uffa2\103\uffa2\117\uffa2\001\002\000\004\064\u01c6\001" +
    "\002\000\014\045\uff26\046\uff26\057\271\117\uff26\120\uff26" +
    "\001\002\000\004\065\uffaa\001\002\000\004\065\u01c9\001" +
    "\002\000\004\010\uffa9\001\002\000\004\010\u01cb\001\002" +
    "\000\024\074\326\075\333\076\340\077\334\100\327\101" +
    "\337\102\331\103\335\117\332\001\002\000\026\011\uffaf" +
    "\074\326\075\333\076\340\077\334\100\327\101\337\102" +
    "\331\103\335\117\332\001\002\000\004\011\u01ce\001\002" +
    "\000\026\011\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100" +
    "\uffa8\101\uffa8\102\uffa8\103\uffa8\117\uffa8\001\002\000\010" +
    "\044\u01d3\064\u01d5\073\u01d0\001\002\000\004\117\u01ea\001" +
    "\002\000\026\011\uffad\074\uffad\075\uffad\076\uffad\077\uffad" +
    "\100\uffad\101\uffad\102\uffad\103\uffad\117\uffad\001\002\000" +
    "\026\011\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e" +
    "\101\uff9e\102\uff9e\103\uff9e\117\uff9e\001\002\000\022\045" +
    "\uff93\046\uff93\064\u01e0\074\uff93\117\uff93\120\uff93\121\uff93" +
    "\122\uff93\001\002\000\026\011\uff9c\074\uff9c\075\uff9c\076" +
    "\uff9c\077\uff9c\100\uff9c\101\uff9c\102\uff9c\103\uff9c\117\uff9c" +
    "\001\002\000\022\045\u0144\046\u0143\065\uff8e\074\u0140\117" +
    "\u0145\120\u0147\121\u0146\122\u013f\001\002\000\026\011\uff9d" +
    "\074\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d\101\uff9d\102" +
    "\uff9d\103\uff9d\117\uff9d\001\002\000\010\013\uff8c\014\u01db" +
    "\065\uff8c\001\002\000\004\065\u01d9\001\002\000\004\013" +
    "\u01da\001\002\000\026\011\uff91\074\uff91\075\uff91\076\uff91" +
    "\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91\117\uff91\001" +
    "\002\000\020\045\u0144\046\u0143\074\u0140\117\u0145\120\u0147" +
    "\121\u0146\122\u013f\001\002\000\006\013\uff8f\065\uff8f\001" +
    "\002\000\024\013\uff8e\045\u0144\046\u0143\065\uff8e\074\u0140" +
    "\117\u0145\120\u0147\121\u0146\122\u013f\001\002\000\006\013" +
    "\uff8d\065\uff8d\001\002\000\020\045\250\046\241\074\261" +
    "\117\u012d\120\254\121\240\122\263\001\002\000\014\045" +
    "\uff26\046\uff26\057\271\117\uff26\120\uff26\001\002\000\004" +
    "\065\u01e2\001\002\000\004\105\u01e3\001\002\000\020\045" +
    "\250\046\241\074\261\117\u012d\120\254\121\240\122\263" +
    "\001\002\000\004\106\u01e5\001\002\000\020\045\250\046" +
    "\241\074\261\117\u012d\120\254\121\240\122\263\001\002" +
    "\000\004\013\u01e7\001\002\000\026\011\uff9b\074\uff9b\075" +
    "\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b" +
    "\117\uff9b\001\002\000\004\013\u01e9\001\002\000\026\011" +
    "\uff92\074\uff92\075\uff92\076\uff92\077\uff92\100\uff92\101\uff92" +
    "\102\uff92\103\uff92\117\uff92\001\002\000\006\044\u01d3\064" +
    "\u01d5\001\002\000\026\011\uff9f\074\uff9f\075\uff9f\076\uff9f" +
    "\077\uff9f\100\uff9f\101\uff9f\102\uff9f\103\uff9f\117\uff9f\001" +
    "\002\000\024\074\326\075\333\076\340\077\334\100\327" +
    "\101\337\102\331\103\335\117\332\001\002\000\026\011" +
    "\uffaf\074\326\075\333\076\340\077\334\100\327\101\337" +
    "\102\331\103\335\117\332\001\002\000\004\011\u01ef\001" +
    "\002\000\004\075\u01f0\001\002\000\004\064\u01f1\001\002" +
    "\000\014\045\uff26\046\uff26\057\271\117\uff26\120\uff26\001" +
    "\002\000\004\065\u01f3\001\002\000\004\013\u01f4\001\002" +
    "\000\026\011\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\100" +
    "\uffa6\101\uffa6\102\uffa6\103\uffa6\117\uffa6\001\002\000\004" +
    "\013\u01f6\001\002\000\026\011\uffa0\074\uffa0\075\uffa0\076" +
    "\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0\117\uffa0" +
    "\001\002\000\004\117\u01f8\001\002\000\004\044\u01f9\001" +
    "\002\000\020\045\250\046\241\074\261\117\u012d\120\254" +
    "\121\240\122\263\001\002\000\004\013\u01fb\001\002\000" +
    "\026\011\uffac\074\uffac\075\uffac\076\uffac\077\uffac\100\uffac" +
    "\101\uffac\102\uffac\103\uffac\117\uffac\001\002\000\212\011" +
    "\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf" +
    "\045\uffbf\046\uffbf\064\uffbf\074\uffbf\075\uffbf\076\uffbf\101" +
    "\uffbf\102\uffbf\103\uffbf\114\uffbf\115\uffbf\116\uffbf\117\uffbf" +
    "\120\uffbf\121\uffbf\122\uffbf\123\uffbf\124\uffbf\125\uffbf\126" +
    "\uffbf\127\uffbf\130\uffbf\131\uffbf\132\uffbf\133\uffbf\134\uffbf" +
    "\135\uffbf\136\uffbf\137\uffbf\140\uffbf\141\uffbf\142\uffbf\143" +
    "\uffbf\144\uffbf\145\uffbf\146\uffbf\147\uffbf\150\uffbf\151\uffbf" +
    "\152\uffbf\153\uffbf\154\uffbf\155\uffbf\156\uffbf\157\uffbf\160" +
    "\uffbf\161\uffbf\162\uffbf\001\002\000\004\117\u01ff\001\002" +
    "\000\010\003\uff76\013\uff76\106\uff76\001\002\000\054\003" +
    "\uff61\013\uff61\047\306\050\307\051\310\052\304\053\303" +
    "\054\305\055\301\056\311\060\u013e\061\u0136\062\u0139\063" +
    "\u0132\064\u0203\066\u0133\067\u013c\070\u0134\071\u0130\072\u0138" +
    "\106\uff61\001\002\000\014\045\uff26\046\uff26\057\271\117" +
    "\uff26\120\uff26\001\002\000\014\064\uff64\065\uff64\074\uff64" +
    "\117\uff64\120\uff64\001\002\000\010\003\uff66\013\uff66\106" +
    "\uff66\001\002\000\022\045\u0144\046\u0143\065\u014b\074\u0140" +
    "\117\u0145\120\u0147\121\u0146\122\u013f\001\002\000\010\003" +
    "\uff65\013\uff65\106\uff65\001\002\000\014\064\u0191\065\u0192" +
    "\074\uff4e\117\uff4e\120\uff4e\001\002\000\010\074\u0193\117" +
    "\u0195\120\u0194\001\002\000\010\003\uff63\013\uff63\106\uff63" +
    "\001\002\000\010\003\uff62\013\uff62\106\uff62\001\002\000" +
    "\004\011\u021d\001\002\000\004\064\u020b\001\002\000\014" +
    "\045\uff26\046\uff26\057\271\117\uff26\120\uff26\001\002\000" +
    "\004\065\uffbb\001\002\000\004\065\u020e\001\002\000\004" +
    "\010\uffba\001\002\000\004\010\u0210\001\002\000\024\074" +
    "\326\075\333\076\340\077\334\100\327\101\337\102\331" +
    "\103\335\117\332\001\002\000\026\011\uffaf\074\326\075" +
    "\333\076\340\077\334\100\327\101\337\102\331\103\335" +
    "\117\332\001\002\000\004\011\u0213\001\002\000\214\011" +
    "\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\045\uffb4\046\uffb4\064\uffb4\074\uffb4\075\uffb4\076\uffb4\101" +
    "\uffb4\102\uffb4\103\uffb4\104\u0214\114\uffb4\115\uffb4\116\uffb4" +
    "\117\uffb4\120\uffb4\121\uffb4\122\uffb4\123\uffb4\124\uffb4\125" +
    "\uffb4\126\uffb4\127\uffb4\130\uffb4\131\uffb4\132\uffb4\133\uffb4" +
    "\134\uffb4\135\uffb4\136\uffb4\137\uffb4\140\uffb4\141\uffb4\142" +
    "\uffb4\143\uffb4\144\uffb4\145\uffb4\146\uffb4\147\uffb4\150\uffb4" +
    "\151\uffb4\152\uffb4\153\uffb4\154\uffb4\155\uffb4\156\uffb4\157" +
    "\uffb4\160\uffb4\161\uffb4\162\uffb4\001\002\000\006\003\u0217" +
    "\010\uffb7\001\002\000\212\011\uffb9\015\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\045\uffb9\046\uffb9\064\uffb9" +
    "\074\uffb9\075\uffb9\076\uffb9\101\uffb9\102\uffb9\103\uffb9\114" +
    "\uffb9\115\uffb9\116\uffb9\117\uffb9\120\uffb9\121\uffb9\122\uffb9" +
    "\123\uffb9\124\uffb9\125\uffb9\126\uffb9\127\uffb9\130\uffb9\131" +
    "\uffb9\132\uffb9\133\uffb9\134\uffb9\135\uffb9\136\uffb9\137\uffb9" +
    "\140\uffb9\141\uffb9\142\uffb9\143\uffb9\144\uffb9\145\uffb9\146" +
    "\uffb9\147\uffb9\150\uffb9\151\uffb9\152\uffb9\153\uffb9\154\uffb9" +
    "\155\uffb9\156\uffb9\157\uffb9\160\uffb9\161\uffb9\162\uffb9\001" +
    "\002\000\004\010\u0219\001\002\000\004\011\u0218\001\002" +
    "\000\212\011\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\045\uffb5\046\uffb5\064\uffb5\074\uffb5\075\uffb5" +
    "\076\uffb5\101\uffb5\102\uffb5\103\uffb5\114\uffb5\115\uffb5\116" +
    "\uffb5\117\uffb5\120\uffb5\121\uffb5\122\uffb5\123\uffb5\124\uffb5" +
    "\125\uffb5\126\uffb5\127\uffb5\130\uffb5\131\uffb5\132\uffb5\133" +
    "\uffb5\134\uffb5\135\uffb5\136\uffb5\137\uffb5\140\uffb5\141\uffb5" +
    "\142\uffb5\143\uffb5\144\uffb5\145\uffb5\146\uffb5\147\uffb5\150" +
    "\uffb5\151\uffb5\152\uffb5\153\uffb5\154\uffb5\155\uffb5\156\uffb5" +
    "\157\uffb5\160\uffb5\161\uffb5\162\uffb5\001\002\000\024\074" +
    "\326\075\333\076\340\077\334\100\327\101\337\102\331" +
    "\103\335\117\332\001\002\000\026\011\uffaf\074\326\075" +
    "\333\076\340\077\334\100\327\101\337\102\331\103\335" +
    "\117\332\001\002\000\004\011\u021c\001\002\000\212\011" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\045\uffb6\046\uffb6\064\uffb6\074\uffb6\075\uffb6\076\uffb6\101" +
    "\uffb6\102\uffb6\103\uffb6\114\uffb6\115\uffb6\116\uffb6\117\uffb6" +
    "\120\uffb6\121\uffb6\122\uffb6\123\uffb6\124\uffb6\125\uffb6\126" +
    "\uffb6\127\uffb6\130\uffb6\131\uffb6\132\uffb6\133\uffb6\134\uffb6" +
    "\135\uffb6\136\uffb6\137\uffb6\140\uffb6\141\uffb6\142\uffb6\143" +
    "\uffb6\144\uffb6\145\uffb6\146\uffb6\147\uffb6\150\uffb6\151\uffb6" +
    "\152\uffb6\153\uffb6\154\uffb6\155\uffb6\156\uffb6\157\uffb6\160" +
    "\uffb6\161\uffb6\162\uffb6\001\002\000\212\011\uffb8\015\uffb8" +
    "\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\045\uffb8\046" +
    "\uffb8\064\uffb8\074\uffb8\075\uffb8\076\uffb8\101\uffb8\102\uffb8" +
    "\103\uffb8\114\uffb8\115\uffb8\116\uffb8\117\uffb8\120\uffb8\121" +
    "\uffb8\122\uffb8\123\uffb8\124\uffb8\125\uffb8\126\uffb8\127\uffb8" +
    "\130\uffb8\131\uffb8\132\uffb8\133\uffb8\134\uffb8\135\uffb8\136" +
    "\uffb8\137\uffb8\140\uffb8\141\uffb8\142\uffb8\143\uffb8\144\uffb8" +
    "\145\uffb8\146\uffb8\147\uffb8\150\uffb8\151\uffb8\152\uffb8\153" +
    "\uffb8\154\uffb8\155\uffb8\156\uffb8\157\uffb8\160\uffb8\161\uffb8" +
    "\162\uffb8\001\002\000\026\060\u01a4\061\u019e\062\u019a\063" +
    "\u01a2\065\u01a5\066\u019c\067\u019b\070\u0198\071\u019f\072\u01a0" +
    "\001\002\000\010\003\uff6f\013\uff6f\106\uff6f\001\002\000" +
    "\006\011\uffdc\076\uffdc\001\002\000\010\003\uff72\013\uff72" +
    "\106\uff72\001\002\000\010\042\134\043\135\117\uff79\001" +
    "\002\000\004\117\u0224\001\002\000\006\013\u0227\044\u0226" +
    "\001\002\000\212\011\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\uffda\036\uffda\037\uffda\045\uffda\046\uffda\064\uffda\074\uffda" +
    "\075\uffda\076\uffda\101\uffda\102\uffda\103\uffda\114\uffda\115" +
    "\uffda\116\uffda\117\uffda\120\uffda\121\uffda\122\uffda\123\uffda" +
    "\124\uffda\125\uffda\126\uffda\127\uffda\130\uffda\131\uffda\132" +
    "\uffda\133\uffda\134\uffda\135\uffda\136\uffda\137\uffda\140\uffda" +
    "\141\uffda\142\uffda\143\uffda\144\uffda\145\uffda\146\uffda\147" +
    "\uffda\150\uffda\151\uffda\152\uffda\153\uffda\154\uffda\155\uffda" +
    "\156\uffda\157\uffda\160\uffda\161\uffda\162\uffda\001\002\000" +
    "\022\045\250\046\241\064\u022c\074\261\117\u012d\120\254" +
    "\121\240\122\263\001\002\000\212\011\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\045\uffcf\046\uffcf" +
    "\064\uffcf\074\uffcf\075\uffcf\076\uffcf\101\uffcf\102\uffcf\103" +
    "\uffcf\114\uffcf\115\uffcf\116\uffcf\117\uffcf\120\uffcf\121\uffcf" +
    "\122\uffcf\123\uffcf\124\uffcf\125\uffcf\126\uffcf\127\uffcf\130" +
    "\uffcf\131\uffcf\132\uffcf\133\uffcf\134\uffcf\135\uffcf\136\uffcf" +
    "\137\uffcf\140\uffcf\141\uffcf\142\uffcf\143\uffcf\144\uffcf\145" +
    "\uffcf\146\uffcf\147\uffcf\150\uffcf\151\uffcf\152\uffcf\153\uffcf" +
    "\154\uffcf\155\uffcf\156\uffcf\157\uffcf\160\uffcf\161\uffcf\162" +
    "\uffcf\001\002\000\212\011\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\045\uffd0\046\uffd0\064\uffd0\074" +
    "\uffd0\075\uffd0\076\uffd0\101\uffd0\102\uffd0\103\uffd0\114\uffd0" +
    "\115\uffd0\116\uffd0\117\uffd0\120\uffd0\121\uffd0\122\uffd0\123" +
    "\uffd0\124\uffd0\125\uffd0\126\uffd0\127\uffd0\130\uffd0\131\uffd0" +
    "\132\uffd0\133\uffd0\134\uffd0\135\uffd0\136\uffd0\137\uffd0\140" +
    "\uffd0\141\uffd0\142\uffd0\143\uffd0\144\uffd0\145\uffd0\146\uffd0" +
    "\147\uffd0\150\uffd0\151\uffd0\152\uffd0\153\uffd0\154\uffd0\155" +
    "\uffd0\156\uffd0\157\uffd0\160\uffd0\161\uffd0\162\uffd0\001\002" +
    "\000\212\011\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\045\uffcd\046\uffcd\064\uffcd\074\uffcd\075\uffcd" +
    "\076\uffcd\101\uffcd\102\uffcd\103\uffcd\114\uffcd\115\uffcd\116" +
    "\uffcd\117\uffcd\120\uffcd\121\uffcd\122\uffcd\123\uffcd\124\uffcd" +
    "\125\uffcd\126\uffcd\127\uffcd\130\uffcd\131\uffcd\132\uffcd\133" +
    "\uffcd\134\uffcd\135\uffcd\136\uffcd\137\uffcd\140\uffcd\141\uffcd" +
    "\142\uffcd\143\uffcd\144\uffcd\145\uffcd\146\uffcd\147\uffcd\150" +
    "\uffcd\151\uffcd\152\uffcd\153\uffcd\154\uffcd\155\uffcd\156\uffcd" +
    "\157\uffcd\160\uffcd\161\uffcd\162\uffcd\001\002\000\212\011" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\045\uffce\046\uffce\064\uffce\074\uffce\075\uffce\076\uffce\101" +
    "\uffce\102\uffce\103\uffce\114\uffce\115\uffce\116\uffce\117\uffce" +
    "\120\uffce\121\uffce\122\uffce\123\uffce\124\uffce\125\uffce\126" +
    "\uffce\127\uffce\130\uffce\131\uffce\132\uffce\133\uffce\134\uffce" +
    "\135\uffce\136\uffce\137\uffce\140\uffce\141\uffce\142\uffce\143" +
    "\uffce\144\uffce\145\uffce\146\uffce\147\uffce\150\uffce\151\uffce" +
    "\152\uffce\153\uffce\154\uffce\155\uffce\156\uffce\157\uffce\160" +
    "\uffce\161\uffce\162\uffce\001\002\000\004\013\u0238\001\002" +
    "\000\016\003\u022d\045\uff26\046\uff26\057\271\117\uff26\120" +
    "\uff26\001\002\000\004\013\u0237\001\002\000\004\065\u022f" +
    "\001\002\000\004\105\u0230\001\002\000\020\045\250\046" +
    "\241\074\261\117\u012d\120\254\121\240\122\263\001\002" +
    "\000\006\003\u0232\106\u0233\001\002\000\004\013\u0236\001" +
    "\002\000\020\045\250\046\241\074\261\117\u012d\120\254" +
    "\121\240\122\263\001\002\000\004\013\u0235\001\002\000" +
    "\212\011\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\045\uffb3\046\uffb3\064\uffb3\074\uffb3\075\uffb3\076" +
    "\uffb3\101\uffb3\102\uffb3\103\uffb3\114\uffb3\115\uffb3\116\uffb3" +
    "\117\uffb3\120\uffb3\121\uffb3\122\uffb3\123\uffb3\124\uffb3\125" +
    "\uffb3\126\uffb3\127\uffb3\130\uffb3\131\uffb3\132\uffb3\133\uffb3" +
    "\134\uffb3\135\uffb3\136\uffb3\137\uffb3\140\uffb3\141\uffb3\142" +
    "\uffb3\143\uffb3\144\uffb3\145\uffb3\146\uffb3\147\uffb3\150\uffb3" +
    "\151\uffb3\152\uffb3\153\uffb3\154\uffb3\155\uffb3\156\uffb3\157" +
    "\uffb3\160\uffb3\161\uffb3\162\uffb3\001\002\000\212\011\uffb1" +
    "\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\045" +
    "\uffb1\046\uffb1\064\uffb1\074\uffb1\075\uffb1\076\uffb1\101\uffb1" +
    "\102\uffb1\103\uffb1\114\uffb1\115\uffb1\116\uffb1\117\uffb1\120" +
    "\uffb1\121\uffb1\122\uffb1\123\uffb1\124\uffb1\125\uffb1\126\uffb1" +
    "\127\uffb1\130\uffb1\131\uffb1\132\uffb1\133\uffb1\134\uffb1\135" +
    "\uffb1\136\uffb1\137\uffb1\140\uffb1\141\uffb1\142\uffb1\143\uffb1" +
    "\144\uffb1\145\uffb1\146\uffb1\147\uffb1\150\uffb1\151\uffb1\152" +
    "\uffb1\153\uffb1\154\uffb1\155\uffb1\156\uffb1\157\uffb1\160\uffb1" +
    "\161\uffb1\162\uffb1\001\002\000\212\011\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2" +
    "\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\045\uffb2\046\uffb2" +
    "\064\uffb2\074\uffb2\075\uffb2\076\uffb2\101\uffb2\102\uffb2\103" +
    "\uffb2\114\uffb2\115\uffb2\116\uffb2\117\uffb2\120\uffb2\121\uffb2" +
    "\122\uffb2\123\uffb2\124\uffb2\125\uffb2\126\uffb2\127\uffb2\130" +
    "\uffb2\131\uffb2\132\uffb2\133\uffb2\134\uffb2\135\uffb2\136\uffb2" +
    "\137\uffb2\140\uffb2\141\uffb2\142\uffb2\143\uffb2\144\uffb2\145" +
    "\uffb2\146\uffb2\147\uffb2\150\uffb2\151\uffb2\152\uffb2\153\uffb2" +
    "\154\uffb2\155\uffb2\156\uffb2\157\uffb2\160\uffb2\161\uffb2\162" +
    "\uffb2\001\002\000\212\011\uff8b\015\uff8b\016\uff8b\017\uff8b" +
    "\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026" +
    "\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b" +
    "\035\uff8b\036\uff8b\037\uff8b\045\uff8b\046\uff8b\064\uff8b\074" +
    "\uff8b\075\uff8b\076\uff8b\101\uff8b\102\uff8b\103\uff8b\114\uff8b" +
    "\115\uff8b\116\uff8b\117\uff8b\120\uff8b\121\uff8b\122\uff8b\123" +
    "\uff8b\124\uff8b\125\uff8b\126\uff8b\127\uff8b\130\uff8b\131\uff8b" +
    "\132\uff8b\133\uff8b\134\uff8b\135\uff8b\136\uff8b\137\uff8b\140" +
    "\uff8b\141\uff8b\142\uff8b\143\uff8b\144\uff8b\145\uff8b\146\uff8b" +
    "\147\uff8b\150\uff8b\151\uff8b\152\uff8b\153\uff8b\154\uff8b\155" +
    "\uff8b\156\uff8b\157\uff8b\160\uff8b\161\uff8b\162\uff8b\001\002" +
    "\000\004\013\u023a\001\002\000\212\011\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\045\uffd4\046\uffd4" +
    "\064\uffd4\074\uffd4\075\uffd4\076\uffd4\101\uffd4\102\uffd4\103" +
    "\uffd4\114\uffd4\115\uffd4\116\uffd4\117\uffd4\120\uffd4\121\uffd4" +
    "\122\uffd4\123\uffd4\124\uffd4\125\uffd4\126\uffd4\127\uffd4\130" +
    "\uffd4\131\uffd4\132\uffd4\133\uffd4\134\uffd4\135\uffd4\136\uffd4" +
    "\137\uffd4\140\uffd4\141\uffd4\142\uffd4\143\uffd4\144\uffd4\145" +
    "\uffd4\146\uffd4\147\uffd4\150\uffd4\151\uffd4\152\uffd4\153\uffd4" +
    "\154\uffd4\155\uffd4\156\uffd4\157\uffd4\160\uffd4\161\uffd4\162" +
    "\uffd4\001\002\000\024\074\326\075\333\076\340\077\334" +
    "\100\327\101\337\102\331\103\335\117\332\001\002\000" +
    "\026\011\uffaf\074\326\075\333\076\340\077\334\100\327" +
    "\101\337\102\331\103\335\117\332\001\002\000\004\011" +
    "\u023e\001\002\000\004\075\u023f\001\002\000\004\064\u0240" +
    "\001\002\000\014\045\uff26\046\uff26\057\271\117\uff26\120" +
    "\uff26\001\002\000\004\065\u0242\001\002\000\004\013\u0243" +
    "\001\002\000\212\011\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\045\uffbd\046\uffbd\064\uffbd\074\uffbd" +
    "\075\uffbd\076\uffbd\101\uffbd\102\uffbd\103\uffbd\114\uffbd\115" +
    "\uffbd\116\uffbd\117\uffbd\120\uffbd\121\uffbd\122\uffbd\123\uffbd" +
    "\124\uffbd\125\uffbd\126\uffbd\127\uffbd\130\uffbd\131\uffbd\132" +
    "\uffbd\133\uffbd\134\uffbd\135\uffbd\136\uffbd\137\uffbd\140\uffbd" +
    "\141\uffbd\142\uffbd\143\uffbd\144\uffbd\145\uffbd\146\uffbd\147" +
    "\uffbd\150\uffbd\151\uffbd\152\uffbd\153\uffbd\154\uffbd\155\uffbd" +
    "\156\uffbd\157\uffbd\160\uffbd\161\uffbd\162\uffbd\001\002\000" +
    "\010\003\uff71\013\uff71\106\uff71\001\002\000\004\117\343" +
    "\001\002\000\004\013\u0247\001\002\000\014\045\uff26\046" +
    "\uff26\057\271\117\uff26\120\uff26\001\002\000\004\013\u0249" +
    "\001\002\000\014\074\350\117\354\120\351\121\357\122" +
    "\356\001\002\000\004\065\u024b\001\002\000\004\010\u024c" +
    "\001\002\000\024\074\326\075\333\076\340\077\334\100" +
    "\327\101\337\102\331\103\335\117\332\001\002\000\026" +
    "\011\uffaf\074\326\075\333\076\340\077\334\100\327\101" +
    "\337\102\331\103\335\117\332\001\002\000\004\011\u024f" +
    "\001\002\000\212\011\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\045\uffbe\046\uffbe\064\uffbe\074\uffbe" +
    "\075\uffbe\076\uffbe\101\uffbe\102\uffbe\103\uffbe\114\uffbe\115" +
    "\uffbe\116\uffbe\117\uffbe\120\uffbe\121\uffbe\122\uffbe\123\uffbe" +
    "\124\uffbe\125\uffbe\126\uffbe\127\uffbe\130\uffbe\131\uffbe\132" +
    "\uffbe\133\uffbe\134\uffbe\135\uffbe\136\uffbe\137\uffbe\140\uffbe" +
    "\141\uffbe\142\uffbe\143\uffbe\144\uffbe\145\uffbe\146\uffbe\147" +
    "\uffbe\150\uffbe\151\uffbe\152\uffbe\153\uffbe\154\uffbe\155\uffbe" +
    "\156\uffbe\157\uffbe\160\uffbe\161\uffbe\162\uffbe\001\002\000" +
    "\004\011\u0255\001\002\000\020\045\250\046\241\074\261" +
    "\117\u012d\120\254\121\240\122\263\001\002\000\004\013" +
    "\uffdf\001\002\000\004\013\u0254\001\002\000\004\011\uffde" +
    "\001\002\000\006\011\uffee\110\uffee\001\002\000\004\044" +
    "\u0257\001\002\000\022\045\uffd7\046\uffd7\064\uffd7\074\uffd7" +
    "\117\uffd7\120\uffd7\121\uffd7\122\uffd7\001\002\000\022\045" +
    "\250\046\241\064\u022c\074\261\117\u012d\120\254\121\240" +
    "\122\263\001\002\000\212\011\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\045\uffd1\046\uffd1\064\uffd1" +
    "\074\uffd1\075\uffd1\076\uffd1\101\uffd1\102\uffd1\103\uffd1\114" +
    "\uffd1\115\uffd1\116\uffd1\117\uffd1\120\uffd1\121\uffd1\122\uffd1" +
    "\123\uffd1\124\uffd1\125\uffd1\126\uffd1\127\uffd1\130\uffd1\131" +
    "\uffd1\132\uffd1\133\uffd1\134\uffd1\135\uffd1\136\uffd1\137\uffd1" +
    "\140\uffd1\141\uffd1\142\uffd1\143\uffd1\144\uffd1\145\uffd1\146" +
    "\uffd1\147\uffd1\150\uffd1\151\uffd1\152\uffd1\153\uffd1\154\uffd1" +
    "\155\uffd1\156\uffd1\157\uffd1\160\uffd1\161\uffd1\162\uffd1\001" +
    "\002\000\212\011\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\045\uffd2\046\uffd2\064\uffd2\074\uffd2\075" +
    "\uffd2\076\uffd2\101\uffd2\102\uffd2\103\uffd2\114\uffd2\115\uffd2" +
    "\116\uffd2\117\uffd2\120\uffd2\121\uffd2\122\uffd2\123\uffd2\124" +
    "\uffd2\125\uffd2\126\uffd2\127\uffd2\130\uffd2\131\uffd2\132\uffd2" +
    "\133\uffd2\134\uffd2\135\uffd2\136\uffd2\137\uffd2\140\uffd2\141" +
    "\uffd2\142\uffd2\143\uffd2\144\uffd2\145\uffd2\146\uffd2\147\uffd2" +
    "\150\uffd2\151\uffd2\152\uffd2\153\uffd2\154\uffd2\155\uffd2\156" +
    "\uffd2\157\uffd2\160\uffd2\161\uffd2\162\uffd2\001\002\000\212" +
    "\011\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\045\uffd6\046\uffd6\064\uffd6\074\uffd6\075\uffd6\076\uffd6" +
    "\101\uffd6\102\uffd6\103\uffd6\114\uffd6\115\uffd6\116\uffd6\117" +
    "\uffd6\120\uffd6\121\uffd6\122\uffd6\123\uffd6\124\uffd6\125\uffd6" +
    "\126\uffd6\127\uffd6\130\uffd6\131\uffd6\132\uffd6\133\uffd6\134" +
    "\uffd6\135\uffd6\136\uffd6\137\uffd6\140\uffd6\141\uffd6\142\uffd6" +
    "\143\uffd6\144\uffd6\145\uffd6\146\uffd6\147\uffd6\150\uffd6\151" +
    "\uffd6\152\uffd6\153\uffd6\154\uffd6\155\uffd6\156\uffd6\157\uffd6" +
    "\160\uffd6\161\uffd6\162\uffd6\001\002\000\212\011\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\045\uffd5" +
    "\046\uffd5\064\uffd5\074\uffd5\075\uffd5\076\uffd5\101\uffd5\102" +
    "\uffd5\103\uffd5\114\uffd5\115\uffd5\116\uffd5\117\uffd5\120\uffd5" +
    "\121\uffd5\122\uffd5\123\uffd5\124\uffd5\125\uffd5\126\uffd5\127" +
    "\uffd5\130\uffd5\131\uffd5\132\uffd5\133\uffd5\134\uffd5\135\uffd5" +
    "\136\uffd5\137\uffd5\140\uffd5\141\uffd5\142\uffd5\143\uffd5\144" +
    "\uffd5\145\uffd5\146\uffd5\147\uffd5\150\uffd5\151\uffd5\152\uffd5" +
    "\153\uffd5\154\uffd5\155\uffd5\156\uffd5\157\uffd5\160\uffd5\161" +
    "\uffd5\162\uffd5\001\002\000\004\117\uffec\001\002\000\004" +
    "\117\u025f\001\002\000\006\014\uffeb\065\uffeb\001\002\000" +
    "\006\014\211\065\uffe9\001\002\000\004\065\uffea\001\002" +
    "\000\004\011\ufff9\001\002\000\004\013\u0271\001\002\000" +
    "\012\040\132\042\uff7c\043\uff7c\117\uff7c\001\002\000\010" +
    "\042\134\043\135\117\uff79\001\002\000\004\117\uff85\001" +
    "\002\000\004\117\u0268\001\002\000\006\013\uff84\044\uff84" +
    "\001\002\000\006\013\u026c\044\u026a\001\002\000\020\045" +
    "\uff7f\046\uff7f\074\uff7f\117\uff7f\120\uff7f\121\uff7f\122\uff7f" +
    "\001\002\000\164\011\uff83\015\uff83\016\uff83\017\uff83\020" +
    "\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83" +
    "\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035" +
    "\uff83\036\uff83\037\uff83\107\uff83\110\uff83\114\uff83\115\uff83" +
    "\116\uff83\123\uff83\124\uff83\125\uff83\126\uff83\127\uff83\130" +
    "\uff83\131\uff83\132\uff83\133\uff83\134\uff83\135\uff83\136\uff83" +
    "\137\uff83\140\uff83\141\uff83\142\uff83\143\uff83\144\uff83\145" +
    "\uff83\146\uff83\147\uff83\150\uff83\151\uff83\152\uff83\153\uff83" +
    "\154\uff83\155\uff83\156\uff83\157\uff83\160\uff83\161\uff83\162" +
    "\uff83\001\002\000\164\011\uff81\015\uff81\016\uff81\017\uff81" +
    "\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81\025\uff81\026" +
    "\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81" +
    "\035\uff81\036\uff81\037\uff81\107\uff81\110\uff81\114\uff81\115" +
    "\uff81\116\uff81\123\uff81\124\uff81\125\uff81\126\uff81\127\uff81" +
    "\130\uff81\131\uff81\132\uff81\133\uff81\134\uff81\135\uff81\136" +
    "\uff81\137\uff81\140\uff81\141\uff81\142\uff81\143\uff81\144\uff81" +
    "\145\uff81\146\uff81\147\uff81\150\uff81\151\uff81\152\uff81\153" +
    "\uff81\154\uff81\155\uff81\156\uff81\157\uff81\160\uff81\161\uff81" +
    "\162\uff81\001\002\000\004\013\u026e\001\002\000\164\011" +
    "\uff80\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80\022\uff80" +
    "\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031" +
    "\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80\037\uff80" +
    "\107\uff80\110\uff80\114\uff80\115\uff80\116\uff80\123\uff80\124" +
    "\uff80\125\uff80\126\uff80\127\uff80\130\uff80\131\uff80\132\uff80" +
    "\133\uff80\134\uff80\135\uff80\136\uff80\137\uff80\140\uff80\141" +
    "\uff80\142\uff80\143\uff80\144\uff80\145\uff80\146\uff80\147\uff80" +
    "\150\uff80\151\uff80\152\uff80\153\uff80\154\uff80\155\uff80\156" +
    "\uff80\157\uff80\160\uff80\161\uff80\162\uff80\001\002\000\020" +
    "\045\250\046\241\074\261\117\u012d\120\254\121\240\122" +
    "\263\001\002\000\004\013\uff7e\001\002\000\164\011\uff82" +
    "\015\uff82\016\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023" +
    "\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82" +
    "\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\107" +
    "\uff82\110\uff82\114\uff82\115\uff82\116\uff82\123\uff82\124\uff82" +
    "\125\uff82\126\uff82\127\uff82\130\uff82\131\uff82\132\uff82\133" +
    "\uff82\134\uff82\135\uff82\136\uff82\137\uff82\140\uff82\141\uff82" +
    "\142\uff82\143\uff82\144\uff82\145\uff82\146\uff82\147\uff82\150" +
    "\uff82\151\uff82\152\uff82\153\uff82\154\uff82\155\uff82\156\uff82" +
    "\157\uff82\160\uff82\161\uff82\162\uff82\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u026f\000\006\002\004\141\003\001\001\000\004\003" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\065\005" +
    "\052\006\045\007\070\010\077\012\103\014\024\017\044" +
    "\050\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\200\u0263\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\u0261\006" +
    "\045\007\070\012\103\014\024\017\044\050\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\142\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\153\005\052\006\045\007\070\010" +
    "\077\012\103\014\024\017\044\050\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\152\012\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\122\007" +
    "\070\012\103\050\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\132\001\001\000\002\001" +
    "\001\000\004\016\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\140\051\141\001\001\000\004\015\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\140\051\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\075\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\173\005\052\006" +
    "\045\007\070\010\077\012\103\014\024\017\044\050\110" +
    "\001\001\000\002\001\001\000\004\075\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\143\202\001\001\000\002\001\001\000" +
    "\004\014\204\001\001\000\004\144\205\001\001\000\002" +
    "\001\001\000\004\145\207\001\001\000\004\055\211\001" +
    "\001\000\004\014\u025c\001\001\000\002\001\001\000\004" +
    "\056\214\001\001\000\002\001\001\000\004\146\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\224\001\001\000\004\151\225\001\001" +
    "\000\002\001\001\000\004\152\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\011\256\014\245\021\232" +
    "\032\250\034\254\042\246\044\235\045\257\054\242\060" +
    "\234\070\244\073\252\076\251\001\001\000\002\001\001" +
    "\000\006\154\u0255\204\u012e\001\001\000\004\140\u024f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\301\027\u0243\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\030\u0238\120\u01d6\123\u0147\124\u0141" +
    "\130\u0148\001\001\000\002\001\001\000\004\015\u0221\001" +
    "\001\000\002\001\001\000\006\025\301\027\u0220\001\001" +
    "\000\002\001\001\000\034\011\256\014\245\021\232\032" +
    "\250\034\254\042\246\044\235\045\257\054\242\060\u021f" +
    "\070\244\073\252\076\251\001\001\000\002\001\001\000" +
    "\004\205\u021d\001\001\000\002\001\001\000\004\161\u0209" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\u01fd\001\001\000\004\156\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\266\116" +
    "\267\001\001\000\004\157\321\001\001\000\004\117\274" +
    "\001\001\000\002\001\001\000\004\214\317\001\001\000" +
    "\004\216\315\001\001\000\004\215\313\001\001\000\002" +
    "\001\001\000\004\213\276\001\001\000\006\025\301\027" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\217\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\312\116\267\001" +
    "\001\000\002\001\001\000\006\025\301\027\314\001\001" +
    "\000\002\001\001\000\006\025\301\027\316\001\001\000" +
    "\002\001\001\000\006\025\301\027\320\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\160\323\001\001\000" +
    "\002\001\001\000\006\035\335\052\327\001\001\000\002" +
    "\001\001\000\004\172\u01f4\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\165\u01ce\001\001\000\004\166\u01c4" +
    "\001\001\000\004\171\u01c2\001\001\000\004\173\u01b1\001" +
    "\001\000\010\035\362\041\u01af\052\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\343\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\345\116\267\001\001\000\002\001\001\000\010\101" +
    "\354\104\352\105\351\001\001\000\004\103\u0124\001\001" +
    "\000\006\106\u0122\115\u010b\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\102\367\107\376\115\373\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\361\052\327\001\001\000\010" +
    "\035\362\041\363\052\327\001\001\000\010\035\362\041" +
    "\365\052\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\111\u0121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\110\u0114\001\001\000" +
    "\004\111\u0107\001\001\000\002\001\001\000\006\106\u010f" +
    "\115\u010b\001\001\000\002\001\001\000\004\114\u010a\001" +
    "\001\000\002\001\001\000\006\106\u010c\115\u010b\001\001" +
    "\000\004\111\u010d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\114\u0112\001\001\000\006\106\u0113\115\u010b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\113\u0119\001\001\000\002\001\001\000\004\110" +
    "\u011b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\113\u011e\001\001\000" +
    "\002\001\001\000\006\107\u0120\115\373\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\112\u0127\115\u0126\001\001" +
    "\000\004\111\u012a\001\001\000\002\001\001\000\004\110" +
    "\u0129\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\u012d\032\250\070\244\073\252\001\001\000\004\204" +
    "\u012e\001\001\000\002\001\001\000\012\025\u0130\064\u0139" +
    "\067\u0134\074\u013a\001\001\000\002\001\001\000\006\024" +
    "\u01ae\116\267\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\206\u018e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\071\u0149\120\u0140\123\u0147\124\u0141\130\u0148\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\122\u0183\001" +
    "\001\000\004\072\u0180\001\001\000\002\001\001\000\006" +
    "\131\u017d\132\u0153\001\001\000\006\131\u017c\132\u0153\001" +
    "\001\000\012\121\u0172\125\u0171\127\u0173\132\u0174\001\001" +
    "\000\002\001\001\000\006\131\u014e\132\u0153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\133\u0161\136" +
    "\u0164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\131\u0170\132\u0153\001\001\000" +
    "\002\001\001\000\006\131\u016c\132\u0153\001\001\000\002" +
    "\001\001\000\004\137\u0169\001\001\000\004\136\u0167\001" +
    "\001\000\002\001\001\000\006\131\u0166\132\u0153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\131\u016a\132\u0153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\131" +
    "\u016f\132\u0153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\133\u017b\136" +
    "\u0164\001\001\000\006\133\u017a\136\u0164\001\001\000\002" +
    "\001\001\000\006\133\u0177\136\u0164\001\001\000\002\001" +
    "\001\000\010\125\u0179\127\u0173\132\u0174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\071\u0181\120\u0140\123\u0147" +
    "\124\u0141\130\u0148\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\126\u0185\127\u0186\132\u0187\001\001\000\002\001" +
    "\001\000\006\133\u018b\136\u0164\001\001\000\006\133\u018a" +
    "\136\u0164\001\001\000\006\133\u0189\136\u0164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\u0130\067\u0134\074\u018d\001\001\000\002\001\001\000" +
    "\004\134\u018f\001\001\000\004\022\u0195\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\210" +
    "\u01a9\001\001\000\004\211\u0196\001\001\000\002\001\001" +
    "\000\010\023\u0198\026\u01a0\135\u019c\001\001\000\002\001" +
    "\001\000\004\212\u01a6\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\071\u01a5\120\u0140\123\u0147\124" +
    "\u0141\130\u0148\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\134\u01a7\001\001\000\004\022" +
    "\u01a8\001\001\000\002\001\001\000\006\023\u0198\026\u01aa" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\u0198\026\u01a0\135\u01ad\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\u01b3\116\267\001\001\000\004\174\u01b4" +
    "\001\001\000\002\001\001\000\004\175\u01b6\001\001\000" +
    "\002\001\001\000\006\035\u01b8\052\327\001\001\000\010" +
    "\035\362\041\u01b9\052\327\001\001\000\002\001\001\000" +
    "\004\053\u01bb\001\001\000\002\001\001\000\004\176\u01bd" +
    "\001\001\000\002\001\001\000\006\035\u01bf\052\327\001" +
    "\001\000\010\035\362\041\u01c0\052\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\u01c6\116\267\001\001" +
    "\000\004\167\u01c7\001\001\000\002\001\001\000\004\170" +
    "\u01c9\001\001\000\002\001\001\000\006\035\u01cb\052\327" +
    "\001\001\000\010\035\362\041\u01cc\052\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\036\u01d5\037\u01d0" +
    "\040\u01d3\062\u01d1\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\177\u01de\001\001\000\002" +
    "\001\001\000\014\030\u01d7\120\u01d6\123\u0147\124\u0141\130" +
    "\u0148\001\001\000\002\001\001\000\004\031\u01db\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\120\u01dc\123\u0147\124\u0141\130\u0148\001\001\000\002" +
    "\001\001\000\014\030\u01dd\120\u01d6\123\u0147\124\u0141\130" +
    "\u0148\001\001\000\002\001\001\000\012\021\u01e7\032\250" +
    "\070\244\073\252\001\001\000\006\024\u01e0\116\267\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\u01e3" +
    "\032\250\070\244\073\252\001\001\000\002\001\001\000" +
    "\012\021\u01e5\032\250\070\244\073\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\036\u01d5\040\u01d3\062\u01ea\001\001\000\002" +
    "\001\001\000\006\035\u01ec\052\327\001\001\000\010\035" +
    "\362\041\u01ed\052\327\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\u01f1\116\267\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\021\u01f9\032\250\070\244\073\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\u01ff" +
    "\066\u0201\067\u0200\001\001\000\006\024\u0207\116\267\001" +
    "\001\000\004\207\u0204\001\001\000\002\001\001\000\014" +
    "\071\u0203\120\u0140\123\u0147\124\u0141\130\u0148\001\001\000" +
    "\002\001\001\000\004\134\u0205\001\001\000\004\022\u0206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\u020b\116\267\001\001" +
    "\000\004\162\u020c\001\001\000\002\001\001\000\004\163" +
    "\u020e\001\001\000\002\001\001\000\006\035\u0210\052\327" +
    "\001\001\000\010\035\362\041\u0211\052\327\001\001\000" +
    "\002\001\001\000\004\046\u0214\001\001\000\004\164\u0215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\035\u0219\052\327\001\001" +
    "\000\010\035\362\041\u021a\052\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\u0198" +
    "\026\u021e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\u0222\001\001\000\002\001\001" +
    "\000\004\077\u0224\001\001\000\002\001\001\000\020\021" +
    "\u022a\032\250\047\u0228\061\u0229\070\244\073\252\100\u0227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\u022d" +
    "\116\267\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\021\u0230\032\250\070\244\073\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\021" +
    "\u0233\032\250\070\244\073\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\035\u023b\052\327\001\001\000\010\035\362\041\u023c\052" +
    "\327\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\u0240\116\267\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\u0245\001\001\000\002\001\001\000\006\024" +
    "\u0247\116\267\001\001\000\002\001\001\000\010\101\u0249" +
    "\104\352\105\351\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\u024c\052\327\001\001\000\010\035\362" +
    "\041\u024d\052\327\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\u0251\032\250\070\244" +
    "\073\252\001\001\000\004\153\u0252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\155\u0257\001\001\000\020\021\u022a\032\250\047" +
    "\u0258\061\u0259\063\u025a\070\244\073\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\147\u025d\001\001\000\002\001\001\000\004" +
    "\150\u025f\001\001\000\004\055\u0260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\u0264" +
    "\001\001\000\004\016\u0265\001\001\000\004\201\u0266\001" +
    "\001\000\002\001\001\000\004\202\u0268\001\001\000\006" +
    "\020\u026c\033\u026a\001\001\000\004\203\u026e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\u026f\032\250\070\244\073\252\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static String nombreArchivo;
    public FileWriter myWriter;
    public int contador = 0;
    public SimboloFuncion sFuncion;
    public int offsetParam = 4;
    public boolean retornEncontrado = false;
    public boolean returnEnDeclaracion = false;

    // lista donde se almacenan los errores sintácticos
    public static LinkedList<TError> TablaES = new LinkedList<TError>();
    public static LinkedList<ErrorSemantico> erroresSemanticos = new LinkedList<ErrorSemantico>();
    public static LinkedList<Integer> listaParametros = new LinkedList<Integer>();
    public static LinkedList<RegistroSemantico> pilaSemantica = new LinkedList<RegistroSemantico>();
    public static LinkedList<Simbolo> tablaSimbolos = new LinkedList<Simbolo>();

    public void writeLine(final String pData, final int flag) throws IOException {
        if (flag == 0) {
            myWriter.write(pData + "\n");
        } else {
            myWriter.write(pData + " ");
        }
        myWriter.flush();
    }


    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        if(s.value != null){
            String lexema = s.value.toString();
            int fila = s.left;
            int columna = s.right;
            TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
            TablaES.add(datos);
            System.out.println("------ Recuperacion exitosa ------");
            System.out.println("\t\tLexema: "+lexema);
        }
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        if(s.value != null){
            String lexema = s.value.toString();
            int fila = s.left;
            int columna = s.right;
            TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
            TablaES.add(datos);
            System.out.println("------ Error Sintactico irrecuperable ------");
            System.out.println("\t\tLexema: "+lexema);
        }
    }

    /* Metodos para realizar las acciones semánticas*/

    public void recuerdoTipo(String pTipo, int lineaPos){
        pilaSemantica.push(new RS_Tipo(pTipo));
    }

    public void recuerdoAccess(String pAcces, int lineaPos){
        if(pAcces != null){
            pilaSemantica.push(new RS_ACCESS(pAcces));
        }
    }

    public void recuerdoID(String pIdent, int lineaPos){
        pilaSemantica.push(new RS_IDENT(pIdent));
    }

    // Ya se agregaron los errores
    public void insertarTablaSimbolos(int lineaPos){

        RS_IDENT id = (RS_IDENT)pilaSemantica.pop();
        RegistroSemantico sig = pilaSemantica.pop();
        SimboloVariable var = new SimboloVariable();
        if (sig.valueType == RegistroSemantico.Value.TIPO){
            RS_Tipo tipo = (RS_Tipo) sig;
            var.nombre = id.ident;
            var.tipoSimbolo = "variable";
            var.acceso = "public";
            var.tipoVariable = tipo.tipo;
        } else {
            RS_ACCESS acc = (RS_ACCESS) sig;
            RS_Tipo tipo = (RS_Tipo)pilaSemantica.pop();

            var.nombre = id.ident;
            var.tipoSimbolo = "variable";
            var.acceso = acc.access;
            var.tipoVariable = tipo.tipo;
        }
        //var.printDatos();
        // verificar si ya el id esta en la pila
        boolean estaEnTabla = false;
        for(Simbolo sim : tablaSimbolos){
            if(sim.nombre.equals(var.nombre)){
                // Variable ya esta definida dar error
                //System.out.println("Ya esta en la tabla");
                String msg = "La variable '";
                msg = msg.concat(id.ident);
                msg = msg.concat("' ya se encuentra definida");
                erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
                estaEnTabla = true;
            }
        }

        if(estaEnTabla){
            // Agregar el error donde corresponde
        } else {
            tablaSimbolos.push(var);
        }

    }

    // Ya se agregaron los errores
    public void insertarTablaSimbolosAsignacion(int lineaPos){

        RS_IDENT id = (RS_IDENT)pilaSemantica.pop();
        RegistroSemantico sig = pilaSemantica.pop();
        SimboloVariable var = new SimboloVariable();

        if (sig.valueType == RegistroSemantico.Value.TIPO){
            RS_Tipo tipo = (RS_Tipo) sig;
            var.nombre = id.ident;
            var.tipoSimbolo = "variable";
            var.acceso = "public";
            var.tipoVariable = tipo.tipo;
        } else {
            RS_ACCESS acc = (RS_ACCESS) sig;
            RS_Tipo tipo = (RS_Tipo)pilaSemantica.pop();

            var.nombre = id.ident;
            var.tipoSimbolo = "variable";
            var.acceso = acc.access;
            var.tipoVariable = tipo.tipo;
        }
        //var.printDatos();
        // verificar si ya el id esta en la pila
        boolean estaEnTabla = false;
        for(Simbolo sim : tablaSimbolos){
            if(sim.nombre.equals(var.nombre)){
                // Variable ya esta definida dar error
                //System.out.println("Ya esta en la tabla");
                String msg = "La variable '";
                msg = msg.concat(id.ident);
                msg = msg.concat("' ya se encuentra definida");
                erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
                estaEnTabla = true;
            }
        }

        if(estaEnTabla){
            // Agregar el error donde corresponde
        } else {
            tablaSimbolos.push(var);
        }

    }

    public void recuerdaConstante(String pConst, String pTipo, int lineaPos){
        RS_DO dop = new RS_DO(pTipo, pConst);
        pilaSemantica.push(dop);
    }

    public void recuerdaVariable(String pConst, int lineaPos){
        RS_DO dop = new RS_DO("variable", pConst);
        pilaSemantica.push(dop);
    }

    public void recuerdaOperador(String pOperador, int lineaPos){
        RS_Operador op = new RS_Operador(pOperador);
        pilaSemantica.push(op);
    }

    // Ya se agregaron los errores pero revisar la linea que muestra cuando es una expresion booleana
    public void evalBinary(int lineaPos){

        RS_DO do_uno = (RS_DO) pilaSemantica.pop();
        RS_Operador do_op = (RS_Operador) pilaSemantica.pop();
        // El RS siguiente se obtiene después para evitar problemas de tipo
        // en caso de que el operador se igual ya que a la izq del igual
        // viene un RS_IDENT y no un RS_DO

        // validar do_uno, puede ser una variable o constante
        if(do_uno.tipo.equals("variable")){
            boolean seEncontro = false;
            for(Simbolo s : tablaSimbolos){
                if(s.nombre.equals(do_uno.valor)){
                    // no hay error
                    seEncontro = true;
                }
            }
            if(!seEncontro){
                // dar error
                if(!do_uno.valor.equals("eax")){

                    String msg = "La variable '";
                    msg = msg.concat(do_uno.valor);
                    msg = msg.concat("' no se encuentra definida");
                    erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
                    // agregar la variable a la tabla de simbolos
                    SimboloVariable sv = new SimboloVariable();
                    sv.nombre = do_uno.valor;
                    sv.tipoSimbolo = "error";
                    tablaSimbolos.add(sv);
                }
            }
        }

        if(do_op.operador.equals("=")){
            // verificar que el tipo concuerde en ambos lados
            RegistroSemantico rs = pilaSemantica.pop();
            if(rs instanceof RS_IDENT){
                RS_IDENT do_dos = (RS_IDENT) rs;
                // mov dword [b], 5
                String codMov = "mov dword [";
                codMov = codMov.concat(do_dos.ident);
                codMov = codMov.concat("], ");
                codMov = codMov.concat(do_uno.valor);
                try{
                    writeLine(codMov, 0);
                } catch(IOException e){
                    e.printStackTrace();
                }

                pilaSemantica.push(do_dos);
                // dejar un RS_IDENT en la pila
            } else {
                RS_DO do_dos = (RS_DO) rs;
                // mov dword [b], 5
                String codMov = "mov dword [";
                codMov = codMov.concat(do_dos.valor);
                codMov = codMov.concat("], ");
                codMov = codMov.concat(do_uno.valor);
                try{
                    writeLine(codMov, 0);
                } catch(IOException e){
                    e.printStackTrace();
                }

                if(!do_dos.valor.equals("eax")){

                    boolean seEncontro = false;
                    for(Simbolo s : tablaSimbolos){
                        if(s.nombre.equals(do_dos.valor)){
                            seEncontro = true;
                        }
                    }
                    if(!seEncontro){

                        String msg = "La variable '";
                        msg = msg.concat(do_dos.valor);
                        msg = msg.concat("' no se encuentra definida");
                        erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
                        // agregar la variable a la tabla de simbolos
                        SimboloVariable sv = new SimboloVariable();
                        sv.nombre = do_dos.valor;
                        sv.tipoSimbolo = "error";
                        tablaSimbolos.add(sv);
                    }
                }

            }

            // Generar un DO
            // hacer push del DO
        } else if(do_op.operador.equals("+")){

            // verificar que el tipo concuerde en ambos lados
            RS_DO do_dos = (RS_DO) pilaSemantica.pop();
            if(do_uno.tipo.equals("constante_numerico") & do_dos.tipo.equals("constante_numerico")){
                String resultado = String.valueOf(Integer.parseInt(do_uno.valor) + Integer.parseInt(do_dos.valor));
                RS_DO newDO = new RS_DO("constante_numerico", resultado);
                pilaSemantica.push(newDO);
            } else if(do_uno.tipo.equals("variable") & do_dos.tipo.equals("constante_numerico")){
                try{
                    // mov eax, dword [var]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(do_uno.valor);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // sub eax, num
                    String codResta = "add eax, ";
                    codResta = codResta.concat(do_dos.valor);
                    writeLine(codResta, 0);

                } catch (IOException e ){
                    e.printStackTrace();
                }


                if(!do_uno.valor.equals("eax")){

                    boolean seEncontro = false;
                    for(Simbolo s : tablaSimbolos){
                        if(s.nombre.equals(do_uno.valor)){
                            seEncontro = true;
                        }
                    }
                    if(!seEncontro){

                        String msg = "La variable '";
                        msg = msg.concat(do_uno.valor);
                        msg = msg.concat("' no se encuentra definida");
                        erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
                        // agregar la variable a la tabla de simbolos
                        SimboloVariable sv = new SimboloVariable();
                        sv.nombre = do_uno.valor;
                        sv.tipoSimbolo = "error";
                        tablaSimbolos.add(sv);
                    }
                }
                // hago DO, variable, eax
                RS_DO newDO = new RS_DO("variable", "eax");
                pilaSemantica.push(newDO);

            } else if(do_uno.tipo.equals("constante_numerico") & do_dos.tipo.equals("variable")){
                try{
                    // mov eax, dword [var]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(do_dos.valor);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // sub eax, num
                    String codResta = "add eax, ";
                    codResta = codResta.concat(do_uno.valor);
                    writeLine(codResta, 0);

                } catch (IOException e ){
                    e.printStackTrace();
                }
                if(!do_dos.valor.equals("eax")){

                    boolean seEncontro = false;
                    for(Simbolo s : tablaSimbolos){
                        if(s.nombre.equals(do_dos.valor)){
                            seEncontro = true;
                        }
                    }
                    if(!seEncontro){

                        String msg = "La variable '";
                        msg = msg.concat(do_dos.valor);
                        msg = msg.concat("' no se encuentra definida");
                        erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
                        // agregar la variable a la tabla de simbolos
                        SimboloVariable sv = new SimboloVariable();
                        sv.nombre = do_dos.valor;
                        sv.tipoSimbolo = "error";
                        tablaSimbolos.add(sv);
                    }
                }
                // hago DO, variable, eax
                RS_DO newDO = new RS_DO("variable", "eax");
                pilaSemantica.push(newDO);
            } else if(do_uno.tipo.equals("variable") & do_dos.tipo.equals("variable")){
                try{
                    // push ebx
                    writeLine("push ebx", 0);

                    // mov eax, dword [var]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(do_uno.valor);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // mov ebx, dword [var2]
                    codMov = "mov ebx, dword [";
                    codMov = codMov.concat(do_dos.valor);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // sub eax, num
                    String codResta = "add eax, ebx";
                    writeLine(codResta, 0);

                    writeLine("pop ebx", 0);

                } catch (IOException e ){
                    e.printStackTrace();
                }

                if(!do_dos.valor.equals("eax")){

                    boolean seEncontro = false;
                    for(Simbolo s : tablaSimbolos){
                        if(s.nombre.equals(do_dos.valor)){
                            seEncontro = true;
                        }
                    }
                    if(!seEncontro){

                        String msg = "La variable '";
                        msg = msg.concat(do_dos.valor);
                        msg = msg.concat("' no se encuentra definida");
                        erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
                        // agregar la variable a la tabla de simbolos
                        SimboloVariable sv = new SimboloVariable();
                        sv.nombre = do_dos.valor;
                        sv.tipoSimbolo = "error";
                        tablaSimbolos.add(sv);
                    }
                }
                if(!do_uno.valor.equals("eax")){

                    boolean seEncontro = false;
                    for(Simbolo s : tablaSimbolos){
                        if(s.nombre.equals(do_uno.valor)){
                            seEncontro = true;
                        }
                    }
                    if(!seEncontro){

                        String msg = "La variable '";
                        msg = msg.concat(do_uno.valor);
                        msg = msg.concat("' no se encuentra definida");
                        erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
                        // agregar la variable a la tabla de simbolos
                        SimboloVariable sv = new SimboloVariable();
                        sv.nombre = do_uno.valor;
                        sv.tipoSimbolo = "error";
                        tablaSimbolos.add(sv);
                    }
                }
                // hago DO, variable, eax
                RS_DO newDO = new RS_DO("variable", "eax");
                pilaSemantica.push(newDO);
            }else{
                // generar codigo asm de la operacion
                //Crear un registro DO
            }
            // Generar un DO
            // hacer push del DO
        } else if(do_op.operador.equals("-")){
            // verificar que el tipo concuerde en ambos lados
            RS_DO do_dos = (RS_DO) pilaSemantica.pop();
            if(do_uno.tipo.equals("constante_numerico") & do_dos.tipo.equals("constante_numerico")){
                String resultado = String.valueOf(Integer.parseInt(do_dos.valor) - Integer.parseInt(do_uno.valor));
                RS_DO newDO = new RS_DO("constante_numerico", resultado);
                pilaSemantica.push(newDO);
            } else if(do_uno.tipo.equals("variable") & do_dos.tipo.equals("constante_numerico")){
                try{
                    // mov eax, dword [var]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(do_uno.valor);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // sub eax, num
                    String codResta = "sub eax, ";
                    codResta = codResta.concat(do_dos.valor);
                    writeLine(codResta, 0);

                } catch (IOException e ){
                    e.printStackTrace();
                }
                if(!do_uno.valor.equals("eax")){

                    boolean seEncontro = false;
                    for(Simbolo s : tablaSimbolos){
                        if(s.nombre.equals(do_uno.valor)){
                            seEncontro = true;
                        }
                    }
                    if(!seEncontro){

                        String msg = "La variable '";
                        msg = msg.concat(do_uno.valor);
                        msg = msg.concat("' no se encuentra definida");
                        erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
                        // agregar la variable a la tabla de simbolos
                        SimboloVariable sv = new SimboloVariable();
                        sv.nombre = do_uno.valor;
                        sv.tipoSimbolo = "error";
                        tablaSimbolos.add(sv);
                    }
                }
                // hago DO, variable, eax
                RS_DO newDO = new RS_DO("variable", "eax");
                pilaSemantica.push(newDO);

            } else if(do_uno.tipo.equals("constante_numerico") & do_dos.tipo.equals("variable")){
                try{
                    // mov eax, dword [var]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(do_dos.valor);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // sub eax, num
                    String codResta = "sub eax, ";
                    codResta = codResta.concat(do_uno.valor);
                    writeLine(codResta, 0);

                } catch (IOException e ){
                    e.printStackTrace();
                }
                if(!do_dos.valor.equals("eax")){

                    boolean seEncontro = false;
                    for(Simbolo s : tablaSimbolos){
                        if(s.nombre.equals(do_dos.valor)){
                            seEncontro = true;
                        }
                    }
                    if(!seEncontro){

                        String msg = "La variable '";
                        msg = msg.concat(do_dos.valor);
                        msg = msg.concat("' no se encuentra definida");
                        erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
                        // agregar la variable a la tabla de simbolos
                        SimboloVariable sv = new SimboloVariable();
                        sv.nombre = do_dos.valor;
                        sv.tipoSimbolo = "error";
                        tablaSimbolos.add(sv);
                    }
                }
                // hago DO, variable, eax
                RS_DO newDO = new RS_DO("variable", "eax");
                pilaSemantica.push(newDO);
            } else if(do_uno.tipo.equals("variable") & do_dos.tipo.equals("variable")){
                try{
                    // push ebx
                    writeLine("push ebx", 0);

                    // mov eax, dword [var]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(do_uno.valor);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // mov ebx, dword [var2]
                    codMov = "mov ebx, dword [";
                    codMov = codMov.concat(do_dos.valor);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // sub eax, num
                    String codResta = "sub eax, ebx";
                    writeLine(codResta, 0);

                    writeLine("pop ebx", 0);

                } catch (IOException e ){
                    e.printStackTrace();
                }
                if(!do_dos.valor.equals("eax")){

                    boolean seEncontro = false;
                    for(Simbolo s : tablaSimbolos){
                        if(s.nombre.equals(do_dos.valor)){
                            seEncontro = true;
                        }
                    }
                    if(!seEncontro){

                        String msg = "La variable '";
                        msg = msg.concat(do_dos.valor);
                        msg = msg.concat("' no se encuentra definida");
                        erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
                        // agregar la variable a la tabla de simbolos
                        SimboloVariable sv = new SimboloVariable();
                        sv.nombre = do_dos.valor;
                        sv.tipoSimbolo = "error";
                        tablaSimbolos.add(sv);
                    }
                }
                if(!do_uno.valor.equals("eax")){

                    boolean seEncontro = false;
                    for(Simbolo s : tablaSimbolos){
                        if(s.nombre.equals(do_uno.valor)){
                            seEncontro = true;
                        }
                    }
                    if(!seEncontro){

                        String msg = "La variable '";
                        msg = msg.concat(do_uno.valor);
                        msg = msg.concat("' no se encuentra definida");
                        erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
                        // agregar la variable a la tabla de simbolos
                        SimboloVariable sv = new SimboloVariable();
                        sv.nombre = do_uno.valor;
                        sv.tipoSimbolo = "error";
                        tablaSimbolos.add(sv);
                    }
                }
                // hago DO, variable, eax
                RS_DO newDO = new RS_DO("variable", "eax");
                pilaSemantica.push(newDO);
            }else{
                // generar codigo asm de la operacion
                //Crear un registro DO
            }
            // Generar un DO
            // hacer push del DO
        } else if (do_op.operador.equals("<") || do_op.operador.equals("<=") || do_op.operador.equals(">") || do_op.operador.equals(">=") || do_op.operador.equals("==") || do_op.operador.equals("!=")) {
            RS_DO do_dos = (RS_DO) pilaSemantica.pop();
            if(do_uno.tipo.equals("constante_numerico") & do_dos.tipo.equals("constante_numerico")){
                String op = do_op.operador;

                try{

                    String codComparacion = "cmp ";
                    codComparacion = codComparacion.concat(do_uno.valor);
                    codComparacion = codComparacion.concat(", ");
                    codComparacion = codComparacion.concat(do_dos.valor);
                    writeLine(codComparacion, 0);
                    
                    String codCmp = "";
                    switch(op){
                        case "<":
                        writeLine("jl", 1);
                            break;
                        case "<=":
                        writeLine("jle", 1);
                            break;
                        case ">":
                        writeLine("jg", 1);
                            break;
                        case ">=":
                        writeLine("jge", 1);
                            break;
                        case "==":
                        writeLine("je", 1);
                            break;
                        case "!=":
                        writeLine("jne", 1);
                            break;
                    }
                } catch(IOException e){
                    e.printStackTrace();
                }
            }
            else if(do_uno.tipo.equals("constante_numerico") & do_dos.tipo.equals("variable")){
                // generar codigo asm de la operacion
                String nombreVar = do_dos.valor;
                int operando = Integer.parseInt(do_uno.valor);
                String op = do_op.operador;

                try{
                    // Para preservar eax
                    writeLine("push eax", 0);

                    // mov eax, dword [nombreVar]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(nombreVar);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    String codResta = "sub eax, ";
                    codResta = codResta.concat(do_uno.valor);
                    writeLine(codResta, 0);

                    String codComparacion = "cmp eax, ";
                    codComparacion = codComparacion.concat("0");
                    writeLine(codComparacion, 0);

                    writeLine("pop eax", 0);
                    
                    String codCmp = "";
                    switch(op){
                        case "<":
                        writeLine("jl", 1);
                            break;
                        case "<=":
                        writeLine("jle", 1);
                            break;
                        case ">":
                        writeLine("jg", 1);
                            break;
                        case ">=":
                        writeLine("jge", 1);
                            break;
                        case "==":
                        writeLine("je", 1);
                            break;
                        case "!=":
                        writeLine("jne", 1);
                            break;
                    }
                } catch(IOException e){
                    e.printStackTrace();
                }
                if(!do_dos.valor.equals("eax")){

                    boolean seEncontro = false;
                    for(Simbolo s : tablaSimbolos){
                        if(s.nombre.equals(do_dos.valor)){
                            seEncontro = true;
                        }
                    }
                    if(!seEncontro){

                        String msg = "La variable '";
                        msg = msg.concat(do_dos.valor);
                        msg = msg.concat("' no se encuentra definida");
                        erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
                        // agregar la variable a la tabla de simbolos
                        SimboloVariable sv = new SimboloVariable();
                        sv.nombre = do_dos.valor;
                        sv.tipoSimbolo = "error";
                        tablaSimbolos.add(sv);
                    }
                }
                //Crear un registro DO
            }
            else if(do_uno.tipo.equals("variable") & do_dos.tipo.equals("constante_numerico")){
                // generar codigo asm de la operacion
                String nombreVar = do_uno.valor;
                // int operando = Integer.parseInt(do_dos.valor);
                String op = do_op.operador;

                try{
                    // push eax
                    writeLine("push eax", 0);

                    // mov eax, dword [nombreVar]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(nombreVar);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // sub eax, valor
                    String codResta = "sub eax, ";
                    codResta = codResta.concat(do_dos.valor);
                    writeLine(codResta, 0);

                    String codComparacion = "cmp eax, ";
                    codComparacion = codComparacion.concat("0");
                    writeLine(codComparacion, 0);
                    
                    writeLine("pop eax", 0);
                    
                    String codCmp = "";
                    switch(op){
                        case "<":
                        writeLine("jl", 1);
                            break;
                        case "<=":
                        writeLine("jle", 1);
                            break;
                        case ">":
                        writeLine("jg", 1);
                            break;
                        case ">=":
                        writeLine("jge", 1);
                            break;
                        case "==":
                        writeLine("je", 1);
                            break;
                        case "!=":
                        writeLine("jne", 1);
                            break;
                    }
                } catch(IOException e){
                    e.printStackTrace();
                }
                if(!do_uno.valor.equals("eax")){

                    boolean seEncontro = false;
                    for(Simbolo s : tablaSimbolos){
                        if(s.nombre.equals(do_uno.valor)){
                            seEncontro = true;
                        }
                    }
                    if(!seEncontro){

                        String msg = "La variable '";
                        msg = msg.concat(do_uno.valor);
                        msg = msg.concat("' no se encuentra definida");
                        erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
                        // agregar la variable a la tabla de simbolos
                        SimboloVariable sv = new SimboloVariable();
                        sv.nombre = do_uno.valor;
                        sv.tipoSimbolo = "error";
                        tablaSimbolos.add(sv);
                    }
                }
                //Crear un registro DO
            }
            else if(do_uno.tipo.equals("variable") & do_dos.tipo.equals("variable")){
                // generar codigo asm de la operacion
                String nombreVarUno = do_uno.valor;
                String nombreVarDos = do_dos.valor;
                // int operando = Integer.parseInt(do_dos.valor);
                String op = do_op.operador;

                try{
                    writeLine("push eax", 0);
                    writeLine("push ebx", 0);

                    // mov eax, dword [nombreVarUno]
                    String codMov = "mov eax, dword [";
                    codMov = codMov.concat(nombreVarUno);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // mov ebx, dword [nombreVarDos]
                    codMov = "mov ebx, dword [";
                    codMov = codMov.concat(nombreVarDos);
                    codMov = codMov.concat("]");
                    writeLine(codMov, 0);

                    // sub ebx, eax
                    String codResta = "sub ebx, eax";
                    writeLine(codResta, 0);

                    // cmp dword [nombreDos]
                    String codComparacion = "cmp ebx, 0";
                    writeLine(codComparacion, 0);

                    writeLine("pop ebx", 0);
                    writeLine("pop eax", 0);
                    
                    String codCmp = "";
                    switch(op){
                        case "<":
                        writeLine("jl", 1);
                            break;
                        case "<=":
                        writeLine("jle", 1);
                            break;
                        case ">":
                        writeLine("jg", 1);
                            break;
                        case ">=":
                        writeLine("jge", 1);
                            break;
                        case "==":
                        writeLine("je", 1);
                            break;
                        case "!=":
                        writeLine("jne", 1);
                            break;
                    }
                } catch(IOException e){
                    e.printStackTrace();
                }
                if(!do_uno.valor.equals("eax")){

                    boolean seEncontro = false;
                    for(Simbolo s : tablaSimbolos){
                        if(s.nombre.equals(do_uno.valor)){
                            seEncontro = true;
                        }
                    }
                    if(!seEncontro){

                        String msg = "La variable '";
                        msg = msg.concat(do_uno.valor);
                        msg = msg.concat("' no se encuentra definida");
                        erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
                        // agregar la variable a la tabla de simbolos
                        SimboloVariable sv = new SimboloVariable();
                        sv.nombre = do_uno.valor;
                        sv.tipoSimbolo = "error";
                        tablaSimbolos.add(sv);
                    }
                }
                if(!do_dos.valor.equals("eax")){

                    boolean seEncontro = false;
                    for(Simbolo s : tablaSimbolos){
                        if(s.nombre.equals(do_dos.valor)){
                            seEncontro = true;
                        }
                    }
                    if(!seEncontro){

                        String msg = "La variable '";
                        msg = msg.concat(do_dos.valor);
                        msg = msg.concat("' no se encuentra definida");
                        erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
                        // agregar la variable a la tabla de simbolos
                        SimboloVariable sv = new SimboloVariable();
                        sv.nombre = do_dos.valor;
                        sv.tipoSimbolo = "error";
                        tablaSimbolos.add(sv);
                    }
                }
                //Crear un registro DO
            }

        } else {
            // verificar que el tipo concuerde en ambos lados
            RS_DO do_dos = (RS_DO) pilaSemantica.pop();
            // Generar un DO
            // hacer push del DO
        }
    }

    public void startIf(){
        try{
            writeLine(";----------IF---------", 0);
        } catch(IOException e ){
            e.printStackTrace();
        }
        String elseLabel = "Else_label_";
        elseLabel = elseLabel.concat(String.valueOf(contador));

        String exitLabel = "Exit_label_";
        exitLabel = exitLabel.concat(String.valueOf(contador));

        RS_IF new_IF = new RS_IF(elseLabel, exitLabel);

        contador++;
        pilaSemantica.push(new_IF);
    }

    public void testIf(){
        RS_IF rs = (RS_IF) pilaSemantica.pop();

        String elseLabel = rs.else_label;
        try{
            writeLine(elseLabel, 0);
        } catch(IOException e){
            e.printStackTrace();
        }
        pilaSemantica.push(rs);
    }

    public void startElse(){
        RS_IF rs = (RS_IF) pilaSemantica.pop();
        String exitLabel = rs.exit_label;
        String elseLabel = rs.else_label;
        try{
            // jump exitLabel
            writeLine("jump", 1);
            writeLine(exitLabel, 0);
            // elseLabel:
            writeLine(elseLabel, 1);
            writeLine(":", 0);
        } catch(IOException e){
            e.printStackTrace();
        }
        pilaSemantica.push(rs);
        
    }

    public void endIf(){
        RS_IF rs = (RS_IF) pilaSemantica.pop();
        String exitLabel = rs.exit_label;
        try{
            // exitlabel:
            writeLine(exitLabel, 1);
            writeLine(":", 0);
            writeLine(";-------Fin if-------", 0);
        } catch(IOException e){
            e.printStackTrace();
        }
    }

    public void startWhile(){
        String WhileLabel = "While_label_";
        WhileLabel = WhileLabel.concat(String.valueOf(contador));

        String exitLabel = "While_exit_label_";
        exitLabel = exitLabel.concat(String.valueOf(contador));

        RS_WHILE new_while = new RS_WHILE(WhileLabel, exitLabel);

        try{
            writeLine(";----------While---------", 0);
            writeLine(WhileLabel, 1);
            writeLine(":", 0);
            
        } catch(IOException e ){
            e.printStackTrace();
        }

        contador++;
        pilaSemantica.push(new_while);
    }

    public void testWhile(){
        RS_WHILE rs = (RS_WHILE) pilaSemantica.pop();

        String whileExitLabel = rs.exit_label;
        try{
            writeLine(whileExitLabel, 0);
        } catch(IOException e){
            e.printStackTrace();
        }
        pilaSemantica.push(rs);
    }

    public void endWhile(){
        RS_WHILE rs = (RS_WHILE) pilaSemantica.pop();

        String whileExitLabel = rs.exit_label;
        String whileLabel = rs.while_label;
        try{
            writeLine("jump", 1);
            writeLine(whileLabel, 0);
            writeLine(whileExitLabel, 1);
            writeLine(":", 0);
            writeLine(";---------Fin While---------", 0);
        } catch(IOException e){
            e.printStackTrace();
        }
    }

    public void finArchivo(){
        try{
            // poner el codigo de finalizacion

            writeLine("mov eax, 1", 0);
            writeLine("xor ebx, ebx", 0);
            writeLine("int 80h", 0);
            writeLine("", 0);

            // escribir el segmento de datos no inicializados
            writeLine("SECTION .bss", 0);
            for(Simbolo s : tablaSimbolos){
                
                if(s.tipoSimbolo.equals("variable")){
                    SimboloVariable var = (SimboloVariable) s;
                    writeLine(var.nombre, 1);
                    writeLine("resb", 1);
                    String tipo = var.tipoVariable;
                    switch(tipo){
                        case "int": 
                            writeLine("4", 0);
                            break;
                        case "string": 
                            writeLine("2", 0);
                            break;
                        case "uint":
                            writeLine("4", 0);
                            break;
                        case "bytes":
                            writeLine("1", 0);
                            break;
                        case "bytes1":
                            writeLine("1", 0);
                            break;
                        case "bytes2":
                            writeLine("2", 0);
                            break;
                        case "bytes3":
                            writeLine("3", 0);
                            break;

                        default:
                            break;
                    }
                }
            }
        } catch(IOException e ){
            e.printStackTrace();
        }
    }

    public void inicioArchivo(){
        try{
            writeLine("SECTION .text", 0);
            writeLine("global start", 0);
            writeLine("start:", 0);
        } catch(IOException e){
            e.printStackTrace();
        }
    }

    public void funcStart(){
        sFuncion = new SimboloFuncion();
    }
    public void recuerdaFuncId(String pId, int lineaPos){
        try{
            sFuncion.nombre = pId;
            writeLine(";----------Inicio funcion------------", 0);
            writeLine(pId, 1);
            writeLine(":", 0);
            writeLine("push ebp", 0);
            writeLine("mov ebp, esp", 0);
            writeLine("sub esp, 0", 0);
        } catch(IOException e){
            e.printStackTrace();
        }
    }
    public void recuerdaTipoParam(String pTipo){
        RS_Tipo rsTipo = new RS_Tipo(pTipo);
        pilaSemantica.push(rsTipo);
    }
    public void recuerdaIdentParam(String pIdent, int lineaPos){
        RS_Tipo rsTipo = (RS_Tipo) pilaSemantica.pop();
        ParametroFuncion pf = new ParametroFuncion(rsTipo.tipo, pIdent, String.valueOf(offsetParam));

        // revisar si el parametro ya fue definido
        boolean seEncontro = false;
        for (ParametroFuncion p : sFuncion.listaParametros){
            if(p.nombre.equals(pIdent)){
                seEncontro = true;
            }
        }
        if(seEncontro){
            // error ya se definio
            String msg = "El parámetro '";
            msg = msg.concat(pIdent);
            msg = msg.concat("' ya se encuentra definido");
            erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
        }

        sFuncion.listaParametros.add(pf);

        switch(rsTipo.tipo){
            case "int": 
                offsetParam += 4;
                break;
            case "string": 
                offsetParam += 4;
                break;
            case "uint":
                offsetParam += 4;
                break;
            case "bytes":
                offsetParam += 1;
                break;
            case "bytes1":
                offsetParam += 1;
                break;
            case "bytes2":
                offsetParam += 2;
                break;
            case "bytes3":
                offsetParam += 3;
                break;

            default:
                break;
        }
    }
    public void recuerdaFuncMod(String pMod){
        if(pMod != null){
            sFuncion.acceso = pMod;
        } else {
            sFuncion.acceso = "public";
        }
    }
    public void recuerdaTipoReturn(String pTipo){
        RS_Tipo rsTipo = new RS_Tipo(pTipo);
        pilaSemantica.push(rsTipo);
    }
    public void recuerdaIdentReturn(String pIdent, int lineaPos){
        RS_Tipo rsTipo = (RS_Tipo) pilaSemantica.pop();
        ParametroFuncion pf = new ParametroFuncion(rsTipo.tipo, pIdent, null);
        sFuncion.retornoVariable = pf;
        returnEnDeclaracion = true;

        boolean seEncontro = false;
        for(Simbolo s : tablaSimbolos){
            if(s.nombre.equals(pIdent)){
                seEncontro = true;
            }
        }
        if(seEncontro){
            String msg = "La variable de retorno '";
            msg = msg.concat(pIdent);
            msg = msg.concat("' ya se encuentra definida");
            erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
        }
    }
    public void retornoFuncion(int lineaPos){
        retornEncontrado = true;
        RS_DO retorno = (RS_DO) pilaSemantica.pop();
        try{
            if(retorno.tipo.equals("constante_numerico")){
                writeLine("mov eax, ", 1);
                writeLine(retorno.valor, 0);
            } else if(retorno.tipo.equals("variable")){
                writeLine("mov eax, dword [", 1);
                writeLine(retorno.valor, 1);
                writeLine("]", 0);

            }
        } catch (IOException e){
            e.printStackTrace();
        }
        RS_DO rsDo = new RS_DO("variable", "eax");
        pilaSemantica.push(rsDo);

    }
    public void funcEnd(int lineaPos){
        try{
            writeLine("mov esp, ebp", 0);
            writeLine("pop ebp", 0);
            writeLine("ret", 0);
            writeLine(";----------Fin funcion------------", 0);
            offsetParam = 4;
            sFuncion = null;
        } catch(IOException e){
            e.printStackTrace();
        }
        // validar que si se indico return en la declaracion, tuve que haber venido en el cuerpo
        if(returnEnDeclaracion == true && retornEncontrado == false){
            //error semántico
            ErrorSemantico err = new ErrorSemantico(lineaPos, "Error en el retorno de la funcion");
            erroresSemanticos.add(err);
        } else if(returnEnDeclaracion == false && retornEncontrado == true){
            ErrorSemantico err = new ErrorSemantico(lineaPos, "Error en el retorno de la funcion");
            erroresSemanticos.add(err);
        }

    }

    public void recordarBreak(String p, int lineaPos){
        // buscar la etiqueta while más proxima
        RS_WHILE rs_w = null;
        for(RegistroSemantico rs: pilaSemantica){
            if(rs.valueType == RegistroSemantico.Value.WHILE){
                rs_w = (RS_WHILE) rs;
                break;
            }
        }
        if(rs_w != null){
            // obtener la etiqueta de exit
            String exitL = rs_w.exit_label;
            try{
                writeLine("jump", 1);
                writeLine(exitL, 0);
            } catch (IOException e){
                e.printStackTrace();
            }
            // saltar a esa etiqueta
        } else {
            // si no la encuentro dar error semantico
            String msg = "El break no se encuentra dentro de un while";
            erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
        }
    }

    public void recordarContinue(String p, int lineaPos){
        // buscar la etiqueta while más proxima
            // si no la encuentro dar error semantico
        // obtener la etiqueta de inicio del while
        // saltar a esa etiqueta
        // buscar la etiqueta while más proxima
        RS_WHILE rs_w = null;
        for(RegistroSemantico rs: pilaSemantica){
            if(rs.valueType == RegistroSemantico.Value.WHILE){
                rs_w = (RS_WHILE) rs;
                break;
            }
        }
        if(rs_w != null){
            // obtener la etiqueta de exit
            String exitL = rs_w.while_label;
            try{
                writeLine("jump", 1);
                writeLine(exitL, 0);
            } catch (IOException e){
                e.printStackTrace();
            }
            // saltar a esa etiqueta
        } else {
            // si no la encuentro dar error semantico
            String msg = "El continue no se encuentra dentro de un while";
            erroresSemanticos.add(new ErrorSemantico(lineaPos + 1, msg));
        }

    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              String RESULT =null;
inicioArchivo();
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",95, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_INICIO ::= NT$0 INICIO 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		finArchivo();
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= pragma solidity techo numero numero punto_coma contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO_S ::= contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY_CONTRACT ::= EN BODY_CONTRACT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_CONTRACT ::= BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY_CONTRACT_P ::= VAR_CONTRACT BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BODY_CONTRACT_P ::= BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY_CONTRACT_PP ::= STRUCTURE BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BODY_CONTRACT_PP ::= BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BODY_CONTRACT_PPP ::= FUNC BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BODY_CONTRACT_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              String RESULT =null;
funcStart();
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",96, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int funcIdleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int funcIdright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String funcId = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaFuncId(funcId, funcIdleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",97, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int funcIdleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int funcIdright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String funcId = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int paramTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int paramTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String paramTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaTipoParam(paramTipo);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",98, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int funcIdleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).left;
		int funcIdright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).right;
		String funcId = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).value;
		int paramTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int paramTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String paramTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int paramIdentleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int paramIdentright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String paramIdent = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaIdentParam(paramIdent, paramIdentleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",99, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$5 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int funcIdleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)).left;
		int funcIdright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)).right;
		String funcId = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)).value;
		int paramTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).left;
		int paramTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).right;
		String paramTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).value;
		int paramIdentleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).left;
		int paramIdentright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).right;
		String paramIdent = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		int modleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String mod = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaFuncMod(mod);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",100, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNC ::= functionSoli NT$1 ident NT$2 O_Parent_R TIPO NT$3 ident NT$4 FUNC_PARAM C_Parent_R FUNC_MOD NT$5 FUNC_RETURNS O_Parent_L CUERPO_M RETURN_P C_Parent_L 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).value;
		int funcIdleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-15)).left;
		int funcIdright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-15)).right;
		String funcId = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-15)).value;
		int paramTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-12)).left;
		int paramTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-12)).right;
		String paramTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-12)).value;
		int paramIdentleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)).left;
		int paramIdentright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)).right;
		String paramIdent = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)).value;
		int modleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).right;
		String mod = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String ff = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		funcEnd(ffleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNC ::= functionSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$6 ::= 
            {
              String RESULT =null;
		int paramTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int paramTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String paramTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaTipoParam(paramTipo);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",101, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$7 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int paramTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int paramTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String paramTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int paramIdentleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int paramIdentright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String paramIdent = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaIdentParam(paramIdent, paramIdentleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",102, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNC_PARAM ::= coma TIPO NT$6 ident NT$7 FUNC_PARAM 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int paramTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).left;
		int paramTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).right;
		String paramTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		int paramIdentleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int paramIdentright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String paramIdent = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNC_PARAM ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNC_MOD ::= payableSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNC_MOD ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNC_MOD ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNC_MOD ::= internalSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNC_MOD ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$8 ::= 
            {
              String RESULT =null;
		int tipoReturnleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int tipoReturnright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String tipoReturn = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaTipoReturn(tipoReturn);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",103, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$9 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int tipoReturnleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int tipoReturnright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String tipoReturn = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int identReturnleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int identReturnright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String identReturn = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaIdentReturn(identReturn, identReturnleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",104, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNC_RETURNS ::= returns O_Parent_R TIPO NT$8 ident NT$9 C_Parent_R 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int tipoReturnleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).left;
		int tipoReturnright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).right;
		String tipoReturn = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		int identReturnleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int identReturnright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String identReturn = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNC_RETURNS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$10 ::= 
            {
              String RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String rf = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
retornoFuncion(rfleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",105, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RETURN_P ::= returnSoli EXP NT$10 punto_coma 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int rfleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String rf = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("RETURN_P",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RETURN_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("RETURN_P",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO_M ::= CUERPO_MA CUERPO_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUERPO_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CUERPO_MA ::= TIPO VAR_ARR VAR_ACCESS ident CUERPO_ASSIGN_F 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_MA",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CUERPO_MA ::= CUERPO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_MA",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$11 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaVariable(id, idleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",106, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$12 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaOperador(op_ig, op_igleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",107, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CUERPO ::= ident NT$11 igual NT$12 CUERPO_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CUERPO ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CUERPO ::= O_Parent_R FUNC_CALL_PARAMS punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CUERPO ::= STRU 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CUERPO_P ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CUERPO_P ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CUERPO_ASSIGN_F ::= igual CUERPO_ASSIGN_FP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_F",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CUERPO_ASSIGN_F ::= punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_F",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CUERPO_ASSIGN_FP ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_FP",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CUERPO_ASSIGN_FP ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_FP",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STRUCTURE ::= structSoli ident O_Parent_L TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STRUCTURE ::= structSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STRUCTURE ::= structSoli ident error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STRUCTURE_VAR ::= TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STRUCTURE_VAR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STRU ::= STRU_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STRU ::= STRU_FOR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STRU ::= STRU_DO_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // STRU ::= STRU_IF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$13 ::= 
            {
              String RESULT =null;
 startWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",108, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$14 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
evalBinary(evleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",109, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$15 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int evright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
 testWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",110, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STRU_WHILE ::= whileSoli NT$13 O_Parent_R OP_BOOL NT$14 C_Parent_R NT$15 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).left;
		int evright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).value;
		 endWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STRU_WHILE ::= whileSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STRU_FOR ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma F_EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_FOR",32, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STRU_DO_WHILE ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_DO_WHILE",34, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$16 ::= 
            {
              String RESULT =null;
 startIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",111, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$17 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
evalBinary(evright);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",112, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$18 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int evright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
 testIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",113, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // STRU_IF ::= ifSoli NT$16 O_Parent_R OP_BOOL NT$17 C_Parent_R NT$18 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).left;
		int evright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",35, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // STRU_IF ::= ifSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",35, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$19 ::= 
            {
              String RESULT =null;
 startElse(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",114, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // STRU_ELSE ::= elseSoli NT$19 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		 endIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // STRU_ELSE ::= elseSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // STRU_ELSE ::= 
            {
              String RESULT =null;
		 endIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // STRU_IF_LINE ::= O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // STRU_IF_LINE ::= O_Parent_R error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // STRU_IF_LINE ::= O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BODY_SENT_M ::= BODY_SENT BODY_SENT_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",31, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BODY_SENT_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",31, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$20 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaVariable(id, idleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$20",115, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BODY_SENT ::= ident NT$20 BODY_SENT_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BODY_SENT ::= thisSoli punto ident igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$21 ::= 
            {
              String RESULT =null;
 startWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$21",116, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$22 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
evalBinary(evleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$22",117, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$23 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int evright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
 testWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$23",118, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BODY_SENT ::= whileSoli NT$21 O_Parent_R OP_BOOL NT$22 C_Parent_R NT$23 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).left;
		int evright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).value;
		 endWhile(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // BODY_SENT ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma F_EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BODY_SENT ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BODY_SENT ::= STRU_IF_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BODY_SENT ::= returnSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$24 ::= 
            {
              String RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int brright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String br = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recordarBreak(br, brleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$24",119, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BODY_SENT ::= breakSoli NT$24 punto_coma 
            {
              String RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int brleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String br = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$25 ::= 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recordarContinue(b, bleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$25",120, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BODY_SENT ::= continueSoli NT$25 punto_coma 
            {
              String RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BODY_SENT_P ::= punto ident BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",29, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BODY_SENT_P ::= BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",29, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BODY_SENT_PP ::= BODY_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BODY_SENT_PP ::= BODY_FUN_CALL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // BODY_SENT_PP ::= igual O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$26 ::= 
            {
              String RESULT =null;
 startIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$26",121, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$27 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
evalBinary(evleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$27",122, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$28 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int evright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
 testIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$28",123, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // STRU_IF_ELSE_IN ::= ifSoli NT$26 O_Parent_R OP_BOOL NT$27 C_Parent_R NT$28 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE_IN 
            {
              String RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).left;
		int evright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_ELSE_IN",40, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$29 ::= 
            {
              String RESULT =null;
 startElse(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$29",124, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // STRU_ELSE_IN ::= elseSoli NT$29 O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		 endIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // STRU_ELSE_IN ::= 
            {
              String RESULT =null;
		 endIf(); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$30 ::= 
            {
              String RESULT =null;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdaOperador(op_ig, op_igleft); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$30",125, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // BODY_ASSIGN ::= igual NT$30 EXP punto_coma 
            {
              String RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		evalBinary(evleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_ASSIGN",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // BODY_FUN_CALL ::= O_Parent_R FUNC_CALL_PARAMS C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_FUN_CALL",30, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FOR_VAR ::= ident igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FOR_VAR",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FUNC_CALL_PARAMS ::= FS_EXP FUNC_CALL_PARAMS_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS",22, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FUNC_CALL_PARAMS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS",22, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FUNC_CALL_PARAMS_P ::= coma FS_EXP FUNC_CALL_PARAMS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS_P",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FUNC_CALL_PARAMS_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS_P",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ASSIGN_NOT_VAR ::= EXP punto_coma 
            {
              String RESULT =null;
		int evleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 evalBinary(evleft); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGN_NOT_VAR",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EN ::= enumSoli ident O_Parent_L ident EN_IDENT C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EN ::= enumSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EN_IDENT ::= coma ident EN_IDENT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EN_IDENT ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$31 ::= 
            {
              String RESULT =null;
		int inputTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int inputTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String inputTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdoTipo(inputTipo, inputTipoleft); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$31",126, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$32 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int inputTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int inputTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String inputTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int inputAccessleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int inputAccessright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String inputAccess = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdoAccess(inputAccess, inputAccessleft); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$32",127, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$33 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int inputTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).left;
		int inputTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).right;
		String inputTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).value;
		int inputAccessleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int inputAccessright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String inputAccess = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdoID(b, bleft); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$33",128, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VAR_CONTRACT ::= TIPO NT$31 VAR_ARR VAR_ACCESS NT$32 ident NT$33 VAR_CONTRACT_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int inputTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).left;
		int inputTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).right;
		String inputTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).value;
		int inputAccessleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).left;
		int inputAccessright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).right;
		String inputAccess = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VAR_CONTRACT ::= TIPO error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VAR_CONTRACT_P ::= punto_coma 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 insertarTablaSimbolos(ileft); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VAR_CONTRACT_P ::= VAR_CONTRACT_C punto_coma 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 insertarTablaSimbolosAsignacion(ileft); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$34 ::= 
            {
              String RESULT =null;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaOperador(op_ig, op_igleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$34",129, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VAR_CONTRACT_C ::= igual NT$34 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int op_igleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int op_igright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String op_ig = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		evalBinary(evleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_C",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // VAR_ARR ::= O_Parent_C C_Parent_C 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // VAR_ARR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // VAR_ACCESS ::= publicSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // VAR_ACCESS ::= privateSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // VAR_ACCESS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$35 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaVariable(id, idleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$35",130, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXP ::= ident NT$35 EXP_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXP ::= thisSoli EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXP ::= BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXP ::= ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXP ::= BOOL_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // BOOL_GATE ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // BOOL_GATE ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$36 ::= 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaConstante(num, "constante_numerico", numleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$36",131, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ARIT_GATE ::= numero NT$36 OP_ARIT_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_GATE",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ARIT_GATE ::= numero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		recuerdaConstante(num, "constante_numerico", numleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_GATE",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXP_P ::= punto ident EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXP_P ::= EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXP_P_S ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$37 ::= 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaOperador(op, opleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$37",132, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXP_P_S ::= OP_EXCL NT$37 PARENT_S OP_ARIT 
            {
              String RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXP_P_S ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXP_P_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EXP_PP ::= punto ident EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PP",51, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXP_PPP ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$38 ::= 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaOperador(op, opleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$38",133, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXP_PPP ::= OP_EXCL NT$38 PARENT_S OP_ARIT 
            {
              String RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXP_PPP ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // FUNC_CALL_CASE ::= FS_EXP FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // FUNC_CALL_CASE ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // FUNC_CALL_CASE_P ::= coma FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // FUNC_CALL_CASE_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$39 ::= 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaConstante(num, "constante_numerico", numleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$39",134, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // OP_ARIT ::= numero NT$39 OP_ARIT_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$40 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaVariable(id, idleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$40",135, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OP_ARIT ::= ident NT$40 OP_ARIT_A 
            {
              String RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		evalBinary(evleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // OP_ARIT ::= thisSoli punto ident OP_ARIT_A 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // OP_ARIT ::= numero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		recuerdaConstante(num, "constante_numerico", numleft); evalBinary(numleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // OP_ARIT_A ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_A",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // OP_ARIT_A ::= OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_A",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OP_ARIT_A ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_A",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$41 ::= 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaOperador(op, opleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$41",136, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OP_ARIT_P ::= OP NT$41 PARENT_S OP_ARIT 
            {
              String RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OP_ARIT_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // PARENT_S ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PARENT_S",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // PARENT_S ::= O_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PARENT_S",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // PARENT_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PARENT_S",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // OP ::= mas 
            {
              String RESULT =null;
		int op_opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = op_op;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // OP ::= menos 
            {
              String RESULT =null;
		int op_opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = op_op;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // OP_EXCL ::= mas 
            {
              String RESULT =null;
		int op_opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = op_op;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // OP_EXCL ::= menos 
            {
              String RESULT =null;
		int op_opleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_opright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_op = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = op_op;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // OP_EXCL ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // OP_EXCL ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OP_EXCL ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // OP_EXCL ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // OP_EXCL ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OP_EXCL ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // OP_EXCL ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // OP_BOOL ::= NEGADO OP_BOOL_N 
            {
              String RESULT =null;
		int opopleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int opopright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String opop = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = opop;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // NT$42 ::= 
            {
              String RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaConstante(bool, "constante_booleana", boolleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$42",137, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // OP_BOOL_N ::= trueSoli NT$42 OP_BOOL_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int opopleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int opopright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String opop = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = opop;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // NT$43 ::= 
            {
              String RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
recuerdaConstante(bool, "constante_booleana", boolleft);
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$43",138, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // OP_BOOL_N ::= falseSoli NT$43 OP_BOOL_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // NT$44 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdaVariable(id, idleft); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$44",139, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // OP_BOOL_N ::= ident NT$44 OP_BOOL_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // NT$45 ::= 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdaConstante(num, "constante_numerico", numleft); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$45",140, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // OP_BOOL_N ::= numero NT$45 OP_BOOL_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // NT$46 ::= 
            {
              String RESULT =null;
		int op_bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdaOperador(op_b, op_bleft); RESULT = op_b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$46",141, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // OP_BOOL_P ::= OP_OP_BOOL NT$46 OP_BOOL 
            {
              String RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int op_bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int op_bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String op_b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // OP_BOOL_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // OP_OP_BOOL ::= igual_igual 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // OP_OP_BOOL ::= mayor_igual 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // OP_OP_BOOL ::= mayor 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // OP_OP_BOOL ::= menor_igual 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // OP_OP_BOOL ::= menor 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // OP_OP_BOOL ::= diferente 
            {
              String RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String op_bool = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT=op_bool; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // OP_OP_BOOL ::= op_or 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // OP_OP_BOOL ::= op_and 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // NEGADO ::= negacion 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NEGADO",76, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // NEGADO ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NEGADO",76, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // F_EXP ::= ident F_EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",63, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // F_EXP ::= thisSoli F_EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",63, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // F_EXP ::= F_BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",63, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // F_EXP ::= F_ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",63, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // F_ARIT_GATE ::= numero F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_ARIT_GATE",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // F_EXP_P ::= punto ident F_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P",64, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // F_EXP_P ::= F_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P",64, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // F_EXP_P_S ::= O_Parent_R F_FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P_S",69, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // F_EXP_P_S ::= F_OP F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P_S",69, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // F_EXP_P_S ::= igual F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P_S",69, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // F_EXP_PP ::= punto ident F_EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // F_EXP_PPP ::= O_Parent_R F_FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PPP",72, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // F_EXP_PPP ::= F_OP F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PPP",72, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // F_EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PPP",72, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // F_FUNC_CALL_CASE ::= ident F_FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE",70, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // F_FUNC_CALL_CASE ::= thisSoli punto ident F_FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE",70, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // F_FUNC_CALL_CASE ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE",70, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // F_FUNC_CALL_CASE_P ::= coma F_FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE_P",73, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // F_FUNC_CALL_CASE_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE_P",73, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // F_OP_ARIT ::= numero F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT",71, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // F_OP_ARIT ::= ident F_OP_ARIT_Parent F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT",71, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // F_OP_ARIT ::= thisSoli punto ident F_OP_ARIT_Parent F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT",71, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // F_OP_ARIT_P ::= F_OP F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_P",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // F_OP_ARIT_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_P",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // F_OP_ARIT_Parent ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_Parent",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // F_OP_ARIT_Parent ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_Parent",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // F_OP ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // F_OP ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // F_OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // F_OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // F_OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // F_OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // F_OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // F_OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // F_OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // F_BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_BODY_LIT_TF",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // F_BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_BODY_LIT_TF",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // FS_EXP ::= ident FS_EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // FS_EXP ::= thisSoli FS_EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // FS_EXP ::= FS_BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // FS_EXP ::= FS_ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // FS_EXP ::= FS_BOOL_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // FS_BOOL_GATE ::= trueSoli FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_BOOL_GATE",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // FS_BOOL_GATE ::= falseSoli FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_BOOL_GATE",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // FS_ARIT_GATE ::= numero FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_ARIT_GATE",82, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // FS_EXP_P ::= punto ident FS_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P",79, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // FS_EXP_P ::= FS_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P",79, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // FS_EXP_P_S ::= O_Parent_R FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P_S",83, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // FS_EXP_P_S ::= FS_OP FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P_S",83, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // FS_EXP_P_S ::= FS_OP_OP_BOOL FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P_S",83, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // FS_EXP_P_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P_S",83, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // FS_EXP_PP ::= punto ident FS_EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PP",80, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // FS_EXP_PPP ::= O_Parent_R FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PPP",84, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // FS_EXP_PPP ::= FS_OP FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PPP",84, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // FS_EXP_PPP ::= FS_OP_OP_BOOL FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PPP",84, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // FS_EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PPP",84, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // FS_BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_BODY_LIT_TF",81, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // FS_BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_BODY_LIT_TF",81, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // FS_OP_BOOL ::= negacion FS_OP_BOOL_F 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // FS_OP_BOOL ::= FS_OP_BOOL_F 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // FS_OP_BOOL ::= trueSoli FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // FS_OP_BOOL ::= falseSoli FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // FS_OP_BOOL ::= numero FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // FS_OP_BOOL_F ::= ident PCLASS FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL_F",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // FS_OP_BOOL_F ::= thisSoli punto ident FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL_F",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // FS_OP_BOOL_P ::= FS_OP_OP_BOOL FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL_P",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // FS_OP_BOOL_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL_P",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // FS_OP_OP_BOOL ::= igual_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // FS_OP_OP_BOOL ::= mayor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // FS_OP_OP_BOOL ::= mayor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // FS_OP_OP_BOOL ::= menor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // FS_OP_OP_BOOL ::= menor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // FS_OP_OP_BOOL ::= diferente 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // FS_OP_OP_BOOL ::= op_or 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // FS_OP_OP_BOOL ::= op_and 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // FS_OP_OP_BOOL ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // FS_OP_OP_BOOL ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // FS_OP_OP_BOOL ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000001(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // FS_OP_OP_BOOL ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // FS_OP_OP_BOOL ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // FS_OP_OP_BOOL ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // FS_OP_OP_BOOL ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // FS_OP_OP_BOOL ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // FS_OP_OP_BOOL ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // PCLASS ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PCLASS",93, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // PCLASS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PCLASS",93, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // TIPO ::= bool 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // TIPO ::= byteSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // TIPO ::= bytes 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // TIPO ::= string 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // TIPO ::= uint 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // TIPO ::= uint_O 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // TIPO ::= uint_DS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // TIPO ::= uint_TD 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // TIPO ::= uint_SC 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // TIPO ::= uint_CVO 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // TIPO ::= uint_DCS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // TIPO ::= intSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // TIPO ::= int_O 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // TIPO ::= int_DS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // TIPO ::= int_TD 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // TIPO ::= int_SC 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // TIPO ::= int_CVO 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // TIPO ::= int_DCS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // TIPO ::= address 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // TIPO ::= address_payable 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // TIPO ::= charss 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // TIPO ::= ufixedSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // TIPO ::= B_I 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // TIPO ::= B_II 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // TIPO ::= B_III 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // TIPO ::= B_IV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // TIPO ::= B_V 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // TIPO ::= B_VI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // TIPO ::= B_VII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // TIPO ::= B_IIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // TIPO ::= B_IX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // TIPO ::= B_X 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // TIPO ::= B_XI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // TIPO ::= B_XII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // TIPO ::= B_XIII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // TIPO ::= B_XIV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // TIPO ::= B_XV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // TIPO ::= B_XVI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // TIPO ::= B_XVII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // TIPO ::= B_XIIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // TIPO ::= B_XIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // TIPO ::= B_XX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // TIPO ::= B_XXI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // TIPO ::= B_XXII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // TIPO ::= B_XXIII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // TIPO ::= B_XXIV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // TIPO ::= B_XXV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // TIPO ::= B_XXVI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // TIPO ::= B_XXVII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // TIPO ::= B_XXIIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // TIPO ::= B_XXIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // TIPO ::= B_XXX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // TIPO ::= B_XXXI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // TIPO ::= B_XXXII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$analisis_sintactico$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$analisis_sintactico$do_action_part00000001(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
